{
 "0": {
  "NL": "If Person X owns Animal Y, then Person X can feed Animal Y.",
  "FOL": "Own(Person X, Animal Y) => CanFeed(Person X, Animal Y)"
 },
 "1": {
  "NL": "If Person X is trained to rescue Animal Y, then Person X can rescue Animal Y.",
  "FOL": "Trained(Person X, Animal Y) => CanRescue(Person X, Animal Y)"
 },
 "2": {
  "NL": "If Person X has access to fire and Material Y, then Person X can burn Material Y.",
  "FOL": "HasAccessToFire(Person X, Material Y) => CanBurn(Person X, Material Y)"
 },
 "3": {
  "NL": "If Person X can breathe Substance Y, then Person X can inhale Substance Y.",
  "FOL": "Breathe(Person X, Substance Y) => CanInhale(Person X, Substance Y)"
 },
 "4": {
  "NL": "If Person X receives Substance Y, then Person X can dispose Substance Y.",
  "FOL": "Receive(Person X, Substance Y) => CanDispose(Person X, Substance Y)"
 },
 "5": {
  "NL": "If Person X has resources for Substance Y, then Person X can produce Substance Y.",
  "FOL": "HasResources(Person X, Substance Y) => CanProduce(Person X, Substance Y)"
 },
 "6": {
  "NL": "If Person X is trained in making Substance Y, then Person X can produce Substance Y.",
  "FOL": "TrainedIn(Person X, Substance Y) => CanProduce(Person X, Substance Y)"
 },
 "7": {
  "NL": "If Person X is allergic to Substance Y, then Person X can react to Substance Y.",
  "FOL": "Allergic(Person X, Substance Y) => CanReactTo(Person X, Substance Y)"
 },
 "8": {
  "NL": "If Person X can eat Substance Y, then Person X can absorb Substance Y.",
  "FOL": "Eat(Person X, Substance Y) => CanAbsorb(Person X, Substance Y)"
 },
 "9": {
  "NL": "If Person X works with Substance Y, then Person X can be exposed to Substance Y.",
  "FOL": "WorksWith(Person X, Substance Y) => CanBeExposedTo(Person X, Substance Y)"
 },
 "10": {
  "NL": "If Person X owns Furniture Y, then Person X can use Furniture Y.",
  "FOL": "Own(Person X, Furniture Y) => CanUse(Person X, Furniture Y)"
 },
 "11": {
  "NL": "If Person X has help to move Furniture Y, then Person X can move Furniture Y.",
  "FOL": "HasHelp(Person X, Furniture Y) => CanMove(Person X, Furniture Y)"
 },
 "12": {
  "NL": "If Person X owns Plant Y, then Person X can water Plant Y.",
  "FOL": "Own(Person X, Plant Y) => CanWater(Person X, Plant Y)"
 },
 "13": {
  "NL": "If Person X rents Furniture Y, then Person X can store with Furniture Y.",
  "FOL": "Rent(Person X, Furniture Y) => CanStoreWith(Person X, Furniture Y)"
 },
 "14": {
  "NL": "If Person X qualifies for Organization Y, then Person X can join Organization Y.",
  "FOL": "Qualify(Person X, Organization Y) => CanJoin(Person X, Organization Y)"
 },
 "15": {
  "NL": "If Person X is the CEO of Organization Y, then Person X can lead Organization Y.",
  "FOL": "IsCEO(Person X, Organization Y) => CanLead(Person X, Organization Y)"
 },
 "16": {
  "NL": "If Person X is a member of Organization Y, then Person X can collaborate with Organization Y.",
  "FOL": "Member(Person X, Organization Y) => CanCollaborate(Person X, Organization Y)"
 },
 "17": {
  "NL": "If Person X is affiliated with Organization Y, then Person X can donate to Organization Y.",
  "FOL": "Affiliated(Person X, Organization Y) => CanDonate(Person X, Organization Y)"
 },
 "18": {
  "NL": "If Person X has excess Y, then Person X can donate Y to Organization Y.",
  "FOL": "HasExcess(Person X, Organization Y) => CanDonate(Person X, Organization Y)"
 },
 "19": {
  "NL": "If Person X has transport to Natural Place Y, then Person X can visit Natural Place Y.",
  "FOL": "HasTransport(Person X, Natural Place Y) => CanVisit(Person X, Natural Place Y)"
 },
 "20": {
  "NL": "If Person X has camping gear for Natural Place Y, then Person X can camp in Natural Place Y.",
  "FOL": "HasCampingGear(Person X, Natural Place Y) => CanCamp(Person X, Natural Place Y)"
 },
 "21": {
  "NL": "If Person X is responsible for Event Y, then Person X can organize Event Y.",
  "FOL": "Responsible(Person X, Event Y) => CanOrganize(Person X, Event Y)"
 },
 "22": {
  "NL": "If Person X organizes Event Y, then Person X can attend Event Y.",
  "FOL": "Organize(Person X, Event Y) => CanAttend(Person X, Event Y)"
 },
 "23": {
  "NL": "If Person X studied Plant Y, then Person X can identify Plant Y.",
  "FOL": "Studied(Person X, Plant Y) => CanIdentify(Person X, Plant Y)"
 },
 "24": {
  "NL": "If Person X is the organizer of Event Y, then Person X can speak at Event Y.",
  "FOL": "Organizer(Person X, Event Y) => CanSpeakAt(Person X, Event Y)"
 },
 "25": {
  "NL": "If Person X lives near Event Y, then Person X can volunteer at Event Y.",
  "FOL": "LivesNear(Person X, Event Y) => CanVolunteerAt(Person X, Event Y)"
 },
 "26": {
  "NL": "If Person X subscribes to Show Y, then Person X can watch Show Y.",
  "FOL": "Subscribe(Person X, Show Y) => CanWatch(Person X, Show Y)"
 },
 "27": {
  "NL": "If Person X is cast in Show Y, then Person X can perform in Show Y.",
  "FOL": "Cast(Person X, Show Y) => CanPerformIn(Person X, Show Y)"
 },
 "28": {
  "NL": "If Person X funds Show Y, then Person X can produce Show Y.",
  "FOL": "Fund(Person X, Show Y) => CanProduce(Person X, Show Y)"
 },
 "29": {
  "NL": "If Person X created Show Y, then Person X can write for Show Y.",
  "FOL": "Created(Person X, Show Y) => CanWriteFor(Person X, Show Y)"
 },
 "30": {
  "NL": "If Person X buys Artwork Y, then Person X can collect Artwork Y.",
  "FOL": "Buy(Person X, Artwork Y) => CanCollect(Person X, Artwork Y)"
 },
 "31": {
  "NL": "If Person X owns Artwork Y, then Person X can display Artwork Y.",
  "FOL": "Own(Person X, Artwork Y) => CanDisplay(Person X, Artwork Y)"
 },
 "32": {
  "NL": "If Person X practiced Artwork Y, then Person X can imitate Artwork Y.",
  "FOL": "Practiced(Person X, Artwork Y) => CanImitate(Person X, Artwork Y)"
 },
 "33": {
  "NL": "If Person X has the required skills for Job Y, then Person X can apply for Job Y.",
  "FOL": "HaveRequiredSkills(Person X, Job Y) => CanApplyFor(Person X, Job Y)"
 },
 "34": {
  "NL": "If Person X is trained for Job Y, then Person X can perform Job Y.",
  "FOL": "Trained(Person X, Job Y) => CanPerform(Person X, Job Y)"
 },
 "35": {
  "NL": "If Person X is employed in Job Y, then Person X can earn from Job Y.",
  "FOL": "Employed(Person X, Job Y) => CanEarnFrom(Person X, Job Y)"
 },
 "36": {
  "NL": "If Person X likes Food Y, then Person X can eat Food Y.",
  "FOL": "Likes(Person X, Food Y) => CanEat(Person X, Food Y)"
 },
 "37": {
  "NL": "If Person X has experience in Y, then Person X can specialize in Job Y.",
  "FOL": "HaveExperienceIn(Person X, Job Y) => CanSpecializeIn(Person X, Job Y)"
 },
 "38": {
  "NL": "If Person X has experience with Game Y, then Person X can play Game Y.",
  "FOL": "HaveExperience(Person X, Game Y) => CanPlay(Person X, Game Y)"
 },
 "39": {
  "NL": "If Person X plays Game Y, then Person X can lose Game Y.",
  "FOL": "Play(Person X, Game Y) => CanLose(Person X, Game Y)"
 },
 "40": {
  "NL": "If Person X wants Game Y, then Person X can buy Game Y.",
  "FOL": "Want(Person X, Game Y) => CanBuy(Person X, Game Y)"
 },
 "41": {
  "NL": "If Game Y is available to Person X, then Person X can buy Game Y.",
  "FOL": "Available(Game Y, Person X) => CanBuy(Person X, Game Y)"
 },
 "42": {
  "NL": "If Person X is an expert in Game Y, then Person X can compete in Game Y.",
  "FOL": "Expert(Person X, Game Y) => CanCompete(Person X, Game Y)"
 },
 "43": {
  "NL": "If Person X knows the rules of Game Y, then Person X can compete in Game Y.",
  "FOL": "KnowRules(Person X, Game Y) => CanCompete(Person X, Game Y)"
 },
 "44": {
  "NL": "If Person X has a license for Vehicle Y, then Person X can drive Vehicle Y.",
  "FOL": "HasLicense(Person X, Vehicle Y) => CanDrive(Person X, Vehicle Y)"
 },
 "45": {
  "NL": "If Person X owns Vehicle Y, then Person X can ride Vehicle Y.",
  "FOL": "Own(Person X, Vehicle Y) => CanRide(Person X, Vehicle Y)"
 },
 "46": {
  "NL": "If Person X has money Y, then Person X can buy Food Y.",
  "FOL": "HaveMoney(Person X, Food Y) => CanBuy(Person X, Food Y)"
 },
 "47": {
  "NL": "If Person X is experienced with Tool Y, then Person X can repair Tool Y.",
  "FOL": "Experienced(Person X, Tool Y) => CanRepair(Person X, Tool Y)"
 },
 "48": {
  "NL": "If it is forbidden for Person X to feed Animal Y, then Person X cannot feed Animal Y.",
  "FOL": "Forbidden(Person X, Animal Y) => CanNotFeed(Person X, Animal Y)"
 },
 "49": {
  "NL": "If Person X is afraid of Animal Y, then Person X cannot ride Animal Y.",
  "FOL": "AfraidOf(Person X, Animal Y) => CanNotRide(Person X, Animal Y)"
 },
 "50": {
  "NL": "If Person X lacks the skill to manipulate Material Y, then Person X cannot manipulate Material Y.",
  "FOL": "LackSkill(Person X, Material Y) => CanNotManipulate(Person X, Material Y)"
 },
 "51": {
  "NL": "If Person X is prohibited from manipulating Material Y, then Person X cannot manipulate Material Y.",
  "FOL": "Prohibited(Person X, Material Y) => CanNotManipulate(Person X, Material Y)"
 },
 "52": {
  "NL": "If Person X lacks knowledge about Substance Y, then Person X cannot produce Substance Y.",
  "FOL": "LackKnowledge(Person X, Substance Y) => CanNotProduce(Person X, Substance Y)"
 },
 "53": {
  "NL": "If Person X lacks the enzyme to process Substance Y, then Person X cannot absorb Substance Y.",
  "FOL": "LackEnzyme(Person X, Substance Y) => CanNotAbsorb(Person X, Substance Y)"
 },
 "54": {
  "NL": "If Person X lacks the necessary tool to repair Furniture Y, then Person X cannot repair Furniture Y.",
  "FOL": "LackTool(Person X, Furniture Y) => CanNotRepair(Person X, Furniture Y)"
 },
 "55": {
  "NL": "If Person X is allergic to Furniture Y, then Person X cannot sleep on Furniture Y.",
  "FOL": "IsAllergic(Person X, Furniture Y) => CanNotSleepOn(Person X, Furniture Y)"
 },
 "56": {
  "NL": "If Furniture Y is too small for Person X, then Person X cannot sleep on Furniture Y.",
  "FOL": "IsTooSmall(Person X, Furniture Y) => CanNotSleepOn(Person X, Furniture Y)"
 },
 "57": {
  "NL": "If Person X is banned from Organization Y, then Person X cannot join Organization Y.",
  "FOL": "Banned(Person X, Organization Y) => CanNotJoin(Person X, Organization Y)"
 },
 "58": {
  "NL": "If Person X lacks leadership skills for Organization Y, then Person X cannot lead Organization Y.",
  "FOL": "LackLeadershipSkills(Person X, Organization Y) => CanNotLead(Person X, Organization Y)"
 },
 "59": {
  "NL": "If Person X was fired from Organization Y, then Person X cannot work for Organization Y.",
  "FOL": "FiredFrom(Person X, Organization Y) => CanNotWorkFor(Person X, Organization Y)"
 },
 "60": {
  "NL": "If Person X lacks the knowledge to prune Plant Y, then Person X cannot prune Plant Y.",
  "FOL": "LackKnowledge(Person X, Plant Y) => CanNotPrune(Person X, Plant Y)"
 },
 "61": {
  "NL": "If Person X does not have proper equipment for Natural Place Y, then Person X cannot hike Natural Place Y.",
  "FOL": "NoProperEquipment(Person X, Natural Place Y) => CanNotHike(Person X, Natural Place Y)"
 },
 "62": {
  "NL": "If Person X is physically unable to prune Plant Y, then Person X cannot prune Plant Y.",
  "FOL": "PhysicallyUnable(Person X, Plant Y) => CanNotPrune(Person X, Plant Y)"
 },
 "63": {
  "NL": "If Person X lacks funds for Event Y, then Person X cannot sponsor Event Y.",
  "FOL": "LackFunds(Person X, Event Y) => CanNotSponsor(Person X, Event Y)"
 },
 "64": {
  "NL": "If there are legal restrictions preventing Person X from sponsoring Event Y, then Person X cannot sponsor Event Y.",
  "FOL": "LegalRestrictions(Person X, Event Y) => CanNotSponsor(Person X, Event Y)"
 },
 "65": {
  "NL": "If Person X is absent from Plant Y, then Person X cannot water Plant Y.",
  "FOL": "Absent(Person X, Plant Y) => CanNotWater(Person X, Plant Y)"
 },
 "66": {
  "NL": "If Person X has no recording device, then Person X cannot record Show Y.",
  "FOL": "NoRecordingDevice(Person X, Show Y) => CanNotRecord(Person X, Show Y)"
 },
 "67": {
  "NL": "If Person X does not have access to Plant Y, then Person X cannot plant Plant Y.",
  "FOL": "NoAccess(Person X, Plant Y) => CanNotPlant(Person X, Plant Y)"
 },
 "68": {
  "NL": "If Person X has no space for Artwork Y, then Person X cannot display Artwork Y.",
  "FOL": "NoSpace(Person X, Artwork Y) => CanNotDisplay(Person X, Artwork Y)"
 },
 "69": {
  "NL": "If Person X lacks the skills for Job Y, then Person X cannot perform Job Y.",
  "FOL": "LackSkill(Person X, Job Y) => CanNotPerform(Person X, Job Y)"
 },
 "70": {
  "NL": "If Game Y is too expensive for Person X, then Person X cannot buy Game Y.",
  "FOL": "TooExpensive(Game Y, Person X) => CanNotBuy(Person X, Game Y)"
 },
 "71": {
  "NL": "If Person X is disqualified from Game Y, then Person X cannot compete in Game Y.",
  "FOL": "Disqualified(Person X, Game Y) => CanNotCompete(Person X, Game Y)"
 },
 "72": {
  "NL": "If Person X does not have a license for Vehicle Y, then Person X cannot park Vehicle Y.",
  "FOL": "NoLicense(Person X, Vehicle Y) => CanNotPark(Person X, Vehicle Y)"
 },
 "73": {
  "NL": "If Tool Y is broken for Person X, then Person X cannot use Tool Y.",
  "FOL": "ToolIsBroken(Person X, Tool Y) => CanNotUse(Person X, Tool Y)"
 },
 "74": {
  "NL": "If Person X lacks money for Tool Y, then Person X cannot buy Tool Y.",
  "FOL": "LackMoney(Person X, Tool Y) => CanNotBuy(Person X, Tool Y)"
 },
 "75": {
  "NL": "If Tool Y is unavailable to Person X, then Person X cannot buy Tool Y.",
  "FOL": "ToolUnavailable(Person X, Tool Y) => CanNotBuy(Person X, Tool Y)"
 },
 "76": {
  "NL": "If Plant Y is toxic to Person X, then Person X cannot use Plant Y for medicine.",
  "FOL": "Toxic(Plant Y, Person X) => CanNotUseForMedicine(Person X, Plant Y)"
 },
 "77": {
  "NL": "If Person X lacks the resources to create Tool Y, then Person X cannot invent Tool Y.",
  "FOL": "LackResources(Person X, Tool Y) => CanNotInvent(Person X, Tool Y)"
 },
 "78": {
  "NL": "If Person X has no access to Tool Y, then Person X cannot improve Tool Y.",
  "FOL": "NoAccess(Person X, Tool Y) => CanNotImprove(Person X, Tool Y)"
 },
 "79": {
  "NL": "If Person X has a physical inability to handle Technology Y, then Person X cannot install Technology Y.",
  "FOL": "PhysicalInability(Person X, Technology Y) => CanNotInstall(Person X, Technology Y)"
 },
 "80": {
  "NL": "If Person X lacks experience with Technology Y, then Person X cannot troubleshoot Technology Y.",
  "FOL": "LackExperience(Person X, Technology Y) => CanNotTroubleshoot(Person X, Technology Y)"
 },
 "81": {
  "NL": "If Person X lacks resources for Technology Y, then Person X cannot upgrade Technology Y.",
  "FOL": "LackResources(Person X, Technology Y) => CanNotUpgrade(Person X, Technology Y)"
 },
 "82": {
  "NL": "If Person X cares for Animal Y, then Person X can access Animal Y.",
  "FOL": "Care(Person X, Animal Y) => CanAccess(Person X, Animal Y)"
 },
 "83": {
  "NL": "If Person X receives Alcohol Y, then Person X can access Alcohol Y.",
  "FOL": "Receive(Person X, Alcohol Y) => CanAccess(Person X, Alcohol Y)"
 },
 "84": {
  "NL": "If Organization X rents Facility Y, then Organization X can access Facility Y.",
  "FOL": "Rent(Organization X, Facility Y) => CanAccess(Organization X, Facility Y)"
 },
 "85": {
  "NL": "If Organization X owns Natural Place Y, then Organization X can access Natural Place Y.",
  "FOL": "Own(Organization X, Natural Place Y) => CanAccess(Organization X, Natural Place Y)"
 },
 "86": {
  "NL": "If Organization X leases Material Y, then Organization X can access Material Y.",
  "FOL": "Lease(Organization X, Material Y) => CanAccess(Organization X, Material Y)"
 },
 "87": {
  "NL": "If Organization X subscribes to Platform Y, then Organization X can access Platform Y.",
  "FOL": "Subscribes(Organization X, Platform Y) => CanAccess(Organization X, Platform Y)"
 },
 "88": {
  "NL": "If Organization X treats Disease Y, then Organization X can access Disease Y.",
  "FOL": "Treat(Organization X, Disease Y) => CanAccess(Organization X, Disease Y)"
 },
 "89": {
  "NL": "If Organization X has Artwork Y on loan, then Organization X can access Artwork Y.",
  "FOL": "Loan(Organization X, Artwork Y) => CanAccess(Organization X, Artwork Y)"
 },
 "90": {
  "NL": "If Organization X exhibits Artwork Y, then Organization X can access Artwork Y.",
  "FOL": "Exhibit(Organization X, Artwork Y) => CanAccess(Organization X, Artwork Y)"
 },
 "91": {
  "NL": "If Organization X posted Job Y, then Organization X can access Job Y.",
  "FOL": "Posted(Organization X, Job Y) => CanAccess(Organization X, Job Y)"
 },
 "92": {
  "NL": "If Organization X sells Alcohol Y, then Organization X can access Alcohol Y.",
  "FOL": "Sell(Organization X, Alcohol Y) => CanAccess(Organization X, Alcohol Y)"
 },
 "93": {
  "NL": "If Organization X publishes Publication Y, then Organization X can access Publication Y.",
  "FOL": "Publish(Organization X, Publication Y) => CanAccess(Organization X, Publication Y)"
 },
 "94": {
  "NL": "If Financial Product Y is sold to Organization X, then Organization X can access Financial Product Y.",
  "FOL": "Sell(Financial Product Y, Organization X) => CanAccess(Organization X, Financial Product Y)"
 },
 "95": {
  "NL": "If Organization X is a partner with Financial Product Y, then Organization X can access Financial Product Y.",
  "FOL": "Partner(Organization X, Financial Product Y) => CanAccess(Organization X, Financial Product Y)"
 },
 "96": {
  "NL": "If Organization X has a license for Financial Product Y, then Organization X can access Financial Product Y.",
  "FOL": "License(Organization X, Financial Product Y) => CanAccess(Organization X, Financial Product Y)"
 },
 "97": {
  "NL": "If Organization X is authorized for Legislation Y, then Organization X can access Legislation Y.",
  "FOL": "Authorized(Organization X, Legislation Y) => CanAccess(Organization X, Legislation Y)"
 },
 "98": {
  "NL": "If Organization X buys Food Y, then Organization X can access Food Y.",
  "FOL": "Buy(Organization X, Food Y) => CanAccess(Organization X, Food Y)"
 },
 "99": {
  "NL": "If Vehicle X is registered for Event Y, then Vehicle X can access Event Y.",
  "FOL": "Registered(Vehicle X, Event Y) => CanAccess(Vehicle X, Event Y)"
 },
 "100": {
  "NL": "If Person X is prescribed Drug Y, then Person X can access Drug Y.",
  "FOL": "Prescribed(Person X, Drug Y) => CanAccess(Person X, Drug Y)"
 },
 "101": {
  "NL": "If Vehicle X can transport Animal Y, then Vehicle X can access Animal Y.",
  "FOL": "Transport(Vehicle X, Animal Y) => CanAccess(Vehicle X, Animal Y)"
 },
 "102": {
  "NL": "If Vehicle X is upgraded with Technology Y, then Vehicle X can access Technology Y.",
  "FOL": "Upgraded(Vehicle X, Technology Y) => CanAccess(Vehicle X, Technology Y)"
 },
 "103": {
  "NL": "If Technology Y is installed in Vehicle X, then Vehicle X can access Technology Y.",
  "FOL": "Installed(Vehicle X, Technology Y) => CanAccess(Vehicle X, Technology Y)"
 },
 "104": {
  "NL": "If Vehicle X transports Drug Y, then Vehicle X can access Drug Y.",
  "FOL": "Transport(Vehicle X, Drug Y) => CanAccess(Vehicle X, Drug Y)"
 },
 "105": {
  "NL": "If Electronic Device Y is integrated into Vehicle X, then Vehicle X can access Electronic Device Y.",
  "FOL": "Integrated(Vehicle X, Electronic Device Y) => CanAccess(Vehicle X, Electronic Device Y)"
 },
 "106": {
  "NL": "If Vehicle X is allowed in Plant Y, then Vehicle X can access Plant Y.",
  "FOL": "Allowed(Vehicle X, Plant Y) => CanAccess(Vehicle X, Plant Y)"
 },
 "107": {
  "NL": "If Vehicle X can load Material Y, then Vehicle X can access Material Y.",
  "FOL": "Load(Vehicle X, Material Y) => CanAccess(Vehicle X, Material Y)"
 },
 "108": {
  "NL": "If Vehicle X is adapted to Natural Phenomenon Y, then Vehicle X can access Natural Phenomenon Y.",
  "FOL": "AdaptedTo(Vehicle X, Natural Phenomenon Y) => CanAccess(Vehicle X, Natural Phenomenon Y)"
 },
 "109": {
  "NL": "If Vehicle X stores Alcohol Y, then Vehicle X can access Alcohol Y.",
  "FOL": "Store(Vehicle X, Alcohol Y) => CanAccess(Vehicle X, Alcohol Y)"
 },
 "110": {
  "NL": "If Vehicle X can store Food Y, then Vehicle X can access Food Y.",
  "FOL": "Store(Vehicle X, Food Y) => CanAccess(Vehicle X, Food Y)"
 },
 "111": {
  "NL": "If Animal Y participates in Event X, then Animal Y can access Event X.",
  "FOL": "Participate(Animal Y, Event X) => CanAccess(Event X, Animal Y)"
 },
 "112": {
  "NL": "If Technology Y is featured at Event X, then Event X can access Technology Y.",
  "FOL": "Featured(Event X, Technology Y) => CanAccess(Event X, Technology Y)"
 },
 "113": {
  "NL": "If Event X is organized at Plant Y, then Event X can access Plant Y.",
  "FOL": "Organized(Event X, Plant Y) => CanAccess(Event X, Plant Y)"
 },
 "114": {
  "NL": "If Event X booked Facility Y, then Event X can access Facility Y.",
  "FOL": "Booked(Event X, Facility Y) => CanAccess(Event X, Facility Y)"
 },
 "115": {
  "NL": "If Plant Y is forbidden to Person X, then Person X cannot access Plant Y.",
  "FOL": "Forbidden(Person X, Plant Y) => CanNotAccess(Person X, Plant Y)"
 },
 "116": {
  "NL": "If Drug Y is unavailable to Animal X, then Animal X cannot access Drug Y.",
  "FOL": "Unavailable(Animal X, Drug Y) => CanNotAccess(Animal X, Drug Y)"
 },
 "117": {
  "NL": "If Material Y is prohibited for Animal X, then Animal X cannot access Material Y.",
  "FOL": "IsProhibited(Material Y, Animal X) => CanNotAccess(Animal X, Material Y)"
 },
 "118": {
  "NL": "If Technology X is restricted from Game Y, then Technology X cannot access Game Y.",
  "FOL": "Restricted(Technology X, Game Y) => CanNotAccess(Technology X, Game Y)"
 },
 "119": {
  "NL": "If Technology X is unavailable in Job Y, then Technology X cannot be accessed for Job Y.",
  "FOL": "Unavailable(Technology X, Job Y) => CanNotAccess(Technology X, Job Y)"
 },
 "120": {
  "NL": "If Legislation Y prohibits Technology X, then Technology X cannot be accessed due to Legislation Y.",
  "FOL": "Prohibits(Legislation Y, Technology X) => CanNotAccess(Technology X, Legislation Y)"
 },
 "121": {
  "NL": "If Drug X is prohibited by Legislation Y, then Drug X cannot be accessed under Legislation Y.",
  "FOL": "Prohibited(Drug X, Legislation Y) => CanNotAccess(Drug X, Legislation Y)"
 },
 "122": {
  "NL": "If Tool X is prohibited from accessing Substance Y, then Tool X cannot access Substance Y.",
  "FOL": "Prohibited(Tool X, Substance Y) => CanNotAccess(Tool X, Substance Y)"
 },
 "123": {
  "NL": "If Artwork Y is sold by Person X, then Person X cannot access Artwork Y.",
  "FOL": "Sold(Artwork Y, Person X) => CanNotAccess(Person X, Artwork Y)"
 },
 "124": {
  "NL": "If Electronic Device X is blocked from Electronic Device Y, then Electronic Device X cannot access Electronic Device Y.",
  "FOL": "Blocked(Electronic Device X, Electronic Device Y) => CanNotAccess(Electronic Device X, Electronic Device Y)"
 },
 "125": {
  "NL": "If Person X lost Artwork Y, then Person X cannot access Artwork Y.",
  "FOL": "Lost(Person X, Artwork Y) => CanNotAccess(Person X, Artwork Y)"
 },
 "126": {
  "NL": "If Substance X is restricted in Facility Y, then Substance X cannot be accessed in Facility Y.",
  "FOL": "Restricted(Substance X, Facility Y) => CanNotAccess(Substance X, Facility Y)"
 },
 "127": {
  "NL": "If Material Y is impermeable to Substance X, then Substance X cannot access Material Y.",
  "FOL": "IsImpermeable(Material Y, Substance X) => CanNotAccess(Substance X, Material Y)"
 },
 "128": {
  "NL": "If Plant X is separated by a wall from Plant Y, then Plant X cannot access Plant Y.",
  "FOL": "SeparatedByWall(Plant X, Plant Y) => CanNotAccess(Plant X, Plant Y)"
 },
 "129": {
  "NL": "If Plant X is isolated from Natural Phenomenon Y, then Plant X cannot access Natural Phenomenon Y.",
  "FOL": "Isolated(Plant X, Natural Phenomenon Y) => CanNotAccess(Plant X, Natural Phenomenon Y)"
 },
 "130": {
  "NL": "If Authorization Y is revoked from Person X, then Person X cannot access Authorization Y.",
  "FOL": "Revoked(Person X, Authorization Y) => CanNotAccess(Person X, Authorization Y)"
 },
 "131": {
  "NL": "If Material Y is depleted in Facility X, then Facility X cannot access Material Y.",
  "FOL": "Depleted(Facility X, Material Y) => CanNotAccess(Facility X, Material Y)"
 },
 "132": {
  "NL": "If Facility X lacks the equipment for Game Y, then Facility X cannot access Game Y.",
  "FOL": "LackEquipment(Facility X, Game Y) => CanNotAccess(Facility X, Game Y)"
 },
 "133": {
  "NL": "If Facility X is unavailable for Job Y, then Job Y cannot access Facility X.",
  "FOL": "Unavailable(Facility X, Job Y) => CanNotAccess(Facility X, Job Y)"
 },
 "134": {
  "NL": "If Facility X is alcohol-free, then Facility X cannot access Alcohol Y.",
  "FOL": "AlcoholFree(Facility X, Alcohol Y) => CanNotAccess(Facility X, Alcohol Y)"
 },
 "135": {
  "NL": "If Facility X is closed during Show Y, then Facility X cannot access Show Y.",
  "FOL": "Closed(Facility X, Show Y) => CanNotAccess(Facility X, Show Y)"
 },
 "136": {
  "NL": "If Facility X prohibits Food Y, then Food Y cannot be accessed at Facility X.",
  "FOL": "Prohibit(Facility X, Food Y) => CanNotAccess(Facility X, Food Y)"
 },
 "137": {
  "NL": "If Natural Place X lacks Material Y, then Material Y cannot be accessed in Natural Place X.",
  "FOL": "Lack(Natural Place X, Material Y) => CanNotAccess(Natural Place X, Material Y)"
 },
 "138": {
  "NL": "If Material Y is prohibited in Natural Place X, then Material Y cannot be accessed in Natural Place X.",
  "FOL": "Prohibit(Natural Place X, Material Y) => CanNotAccess(Natural Place X, Material Y)"
 },
 "139": {
  "NL": "If Natural Place X is blocked by Natural Phenomenon Y, then Natural Place X cannot be accessed due to Natural Phenomenon Y.",
  "FOL": "BlockedBy(Natural Place X, Natural Phenomenon Y) => CanNotAccess(Natural Place X, Natural Phenomenon Y)"
 },
 "140": {
  "NL": "If Animal Y is protected from Organization X, then Organization X cannot access Animal Y.",
  "FOL": "Protect(Animal Y, Organization X) => CanNotAccess(Organization X, Animal Y)"
 },
 "141": {
  "NL": "If Artwork X is removed from Publication Y, then Artwork X cannot be accessed in Publication Y.",
  "FOL": "Removed(Artwork X, Publication Y) => CanNotAccess(Artwork X, Publication Y)"
 },
 "142": {
  "NL": "If Alcohol Y is prohibited in Job X, then Job X cannot access Alcohol Y.",
  "FOL": "Prohibited(Job X, Alcohol Y) => CanNotAccess(Job X, Alcohol Y)"
 },
 "143": {
  "NL": "If Organization X lacks funds for Food Y, then Organization X cannot access Food Y.",
  "FOL": "LackOfFunds(Organization X, Food Y) => CanNotAccess(Organization X, Food Y)"
 },
 "144": {
  "NL": "If Food Y is forbidden for Job X, then Job X cannot access Food Y.",
  "FOL": "Forbidden(Job X, Food Y) => CanNotAccess(Job X, Food Y)"
 },
 "145": {
  "NL": "If Show Y is alcohol-free, then Alcohol X cannot be accessed at Show Y.",
  "FOL": "AlcoholFree(Show Y, Alcohol X) => CanNotAccess(Alcohol X, Show Y)"
 },
 "146": {
  "NL": "If Person X moved to Region Y, then Person X lives in Region Y.",
  "FOL": "MovedTo(Person X, Region Y) => LivesIn(Person X, Region Y)"
 },
 "147": {
  "NL": "If Animal X migrated to Region Y, then Animal X can be found in Region Y.",
  "FOL": "Migrated(Animal X, Region Y) => FoundIn(Animal X, Region Y)"
 },
 "148": {
  "NL": "If Publication X is published in Region Y, then Publication X is accessible in Region Y.",
  "FOL": "PublishedIn(Publication X, Region Y) => AccessibleIn(Publication X, Region Y)"
 },
 "149": {
  "NL": "If Organization X has a branch in Region Y, then Organization X operates in Region Y.",
  "FOL": "HasBranchIn(Organization X, Region Y) => OperatesIn(Organization X, Region Y)"
 },
 "150": {
  "NL": "If Organization X was established in Region Y, then Organization X was founded in Region Y.",
  "FOL": "Established(Organization X, Region Y) => FoundedIn(Organization X, Region Y)"
 },
 "151": {
  "NL": "If Organization X expanded to Region Y, then Organization X provides services in Region Y.",
  "FOL": "ExpandedTo(Organization X, Region Y) => ProvidesServicesIn(Organization X, Region Y)"
 },
 "152": {
  "NL": "If Event X is located in Region Y, then Event X is held in Region Y.",
  "FOL": "LocatedIn(Event X, Region Y) => HeldIn(Event X, Region Y)"
 },
 "153": {
  "NL": "If Animal X has no habitat in Region Y, then Animal X is extinct in Region Y.",
  "FOL": "NoHabitatIn(Animal X, Region Y) => ExtinctIn(Animal X, Region Y)"
 },
 "154": {
  "NL": "If Show X is popular in Region Y, then Show X is broadcast in Region Y.",
  "FOL": "PopularIn(Show X, Region Y) => BroadcastIn(Show X, Region Y)"
 },
 "155": {
  "NL": "If Artwork X was made in Region Y, then Artwork X was created in Region Y.",
  "FOL": "MadeIn(Artwork X, Region Y) => CreatedIn(Artwork X, Region Y)"
 },
 "156": {
  "NL": "If Plant X is native to Region Y, then Plant X grows in Region Y.",
  "FOL": "NativeTo(Plant X, Region Y) => GrowsIn(Plant X, Region Y)"
 },
 "157": {
  "NL": "If Game X is illegal in Region Y, then Game X is banned in Region Y.",
  "FOL": "Illegal(Game X, Region Y) => BannedIn(Game X, Region Y)"
 },
 "158": {
  "NL": "If Vehicle X is built in Region Y, then Vehicle X is manufactured in Region Y.",
  "FOL": "BuiltIn(Vehicle X, Region Y) => ManufacturedIn(Vehicle X, Region Y)"
 },
 "159": {
  "NL": "If Vehicle X is sold to Region Y, then Vehicle X is imported to Region Y.",
  "FOL": "Sold(Vehicle X, Region Y) => ImportedTo(Vehicle X, Region Y)"
 },
 "160": {
  "NL": "If Technology X is not approved in Region Y, then Technology X is restricted in Region Y.",
  "FOL": "NotApproved(Technology X, Region Y) => RestrictedIn(Technology X, Region Y)"
 },
 "161": {
  "NL": "If Electronic Device X is shipped from Region Y, then Electronic Device X is exported from Region Y.",
  "FOL": "ShippedFrom(Electronic Device X, Region Y) => ExportedFrom(Electronic Device X, Region Y)"
 },
 "162": {
  "NL": "If Alcohol X is produced in Region Y, then Alcohol X is brewed in Region Y.",
  "FOL": "Produced(Alcohol X, Region Y) => BrewedIn(Alcohol X, Region Y)"
 },
 "163": {
  "NL": "If Person X is an exchange student in Region Y, then Person X studies in Region Y.",
  "FOL": "ExchangeStudent(Person X, Region Y) => StudiesIn(Person X, Region Y)"
 },
 "164": {
  "NL": "If Natural Phenomenon X is common in Region Y, then Natural Phenomenon X occurs in Region Y.",
  "FOL": "CommonIn(Natural Phenomenon X, Region Y) => OccursIn(Natural Phenomenon X, Region Y)"
 },
 "165": {
  "NL": "If Natural Phenomenon X impacts Region Y, then Natural Phenomenon X affects Region Y.",
  "FOL": "Impacts(Natural Phenomenon X, Region Y) => Affects(Natural Phenomenon X, Region Y)"
 },
 "166": {
  "NL": "If Facility X provides service in Region Y, then Facility X operates in Region Y.",
  "FOL": "ProvidesServiceIn(Facility X, Region Y) => OperatesIn(Facility X, Region Y)"
 },
 "167": {
  "NL": "If Person X owns Facility Y, then Person X needs to maintain Facility Y.",
  "FOL": "Own(Person X, Facility Y) => NeedToMaintain(Person X, Facility Y)"
 },
 "168": {
  "NL": "If Person X writes about Natural Place Y, then Person X needs to study Natural Place Y.",
  "FOL": "WriteAbout(Person X, Natural Place Y) => NeedToStudy(Person X, Natural Place Y)"
 },
 "169": {
  "NL": "If Person X works on Natural Place Y, then Person X needs to visit Natural Place Y.",
  "FOL": "Work(Person X, Natural Place Y) => NeedToVisit(Person X, Natural Place Y)"
 },
 "170": {
  "NL": "If Person X is the host of Event Y, then Person X needs to organize Event Y.",
  "FOL": "IsHost(Person X, Event Y) => NeedToOrganize(Person X, Event Y)"
 },
 "171": {
  "NL": "If Person X is invited to Event Y, then Person X needs to prepare for Event Y.",
  "FOL": "Invited(Person X, Event Y) => NeedToPrepareFor(Person X, Event Y)"
 },
 "172": {
  "NL": "If Person X hosts Event Y, then Person X needs to invite others to Event Y.",
  "FOL": "Host(Person X, Event Y) => NeedToInviteOthersTo(Person X, Event Y)"
 },
 "173": {
  "NL": "If Person X wants to grow Plant Y, then Person X needs to plant Plant Y.",
  "FOL": "WantToGrow(Person X, Plant Y) => NeedToPlant(Person X, Plant Y)"
 },
 "174": {
  "NL": "If Person X is commissioned for Artwork Y, then Person X needs to create Artwork Y.",
  "FOL": "Commissioned(Person X, Artwork Y) => NeedToCreate(Person X, Artwork Y)"
 },
 "175": {
  "NL": "If Person X applies for Job Y, then Person X needs to interview for Job Y.",
  "FOL": "Apply(Person X, Job Y) => NeedToInterviewFor(Person X, Job Y)"
 },
 "176": {
  "NL": "If Person X practices Game Y, then Person X needs to play Game Y.",
  "FOL": "Practice(Person X, Game Y) => NeedToPlay(Person X, Game Y)"
 },
 "177": {
  "NL": "If Person X drives Vehicle Y, then Person X needs to refuel Vehicle Y.",
  "FOL": "Drive(Person X, Vehicle Y) => NeedToRefuel(Person X, Vehicle Y)"
 },
 "178": {
  "NL": "If Person X's job requires Tool Y, then Person X needs to use Tool Y.",
  "FOL": "JobRequires(Person X, Tool Y) => NeedToUse(Person X, Tool Y)"
 },
 "179": {
  "NL": "If Person X works with Electronic Device Y, then Person X needs to use Electronic Device Y.",
  "FOL": "WorkWith(Person X, Electronic Device Y) => NeedToUse(Person X, Electronic Device Y)"
 },
 "180": {
  "NL": "If Person X studies on Platform Y, then Person X needs to use Platform Y.",
  "FOL": "StudyOn(Person X, Platform Y) => NeedToUse(Person X, Platform Y)"
 },
 "181": {
  "NL": "If Person X is learning Skill Y, then Person X needs to practice Skill Y.",
  "FOL": "Learning(Person X, Skill Y) => NeedToPractice(Person X, Skill Y)"
 },
 "182": {
  "NL": "If Person X's task requires Skill Y, then Person X needs to apply Skill Y.",
  "FOL": "TaskRequires(Person X, Skill Y) => NeedToApply(Person X, Skill Y)"
 },
 "183": {
  "NL": "If Authorization Y of Person X is expired, then Person X needs to renew Authorization Y.",
  "FOL": "Expired(Person X, Authorization Y) => NeedToRenew(Person X, Authorization Y)"
 },
 "184": {
  "NL": "If Person X requests Authorization Y, then Person X needs to verify Authorization Y.",
  "FOL": "Request(Person X, Authorization Y) => NeedToVerify(Person X, Authorization Y)"
 },
 "185": {
  "NL": "If Authorization Y is required by Person X, then Person X needs to submit Authorization Y.",
  "FOL": "Require(Person X, Authorization Y) => NeedToSubmit(Person X, Authorization Y)"
 },
 "186": {
  "NL": "If Person X is a citizen under Legislation Y, then Person X needs to obey Legislation Y.",
  "FOL": "Citizen(Person X, Legislation Y) => NeedToObey(Person X, Legislation Y)"
 },
 "187": {
  "NL": "If Person X is allergic to Alcohol Y, then Person X needs to avoid Alcohol Y.",
  "FOL": "Allergic(Person X, Alcohol Y) => NeedToAvoid(Person X, Alcohol Y)"
 },
 "188": {
  "NL": "If Person X is at risk of Disease Y, then Person X needs to prevent Disease Y.",
  "FOL": "AtRisk(Person X, Disease Y) => NeedToPrevent(Person X, Disease Y)"
 },
 "189": {
  "NL": "If Person X has a family history of Disease Y, then Person X needs to prevent Disease Y.",
  "FOL": "FamilyHistory(Person X, Disease Y) => NeedToPrevent(Person X, Disease Y)"
 },
 "190": {
  "NL": "If Drug Y is expired for Person X, then Person X needs to dispose Drug Y.",
  "FOL": "Expired(Drug Y, Person X) => NeedToDispose(Person X, Drug Y)"
 },
 "191": {
  "NL": "If Person X develops Drug Y, then Person X needs to research Drug Y.",
  "FOL": "Develop(Person X, Drug Y) => NeedToResearch(Person X, Drug Y)"
 },
 "192": {
  "NL": "If Person X has a phobia of Natural Phenomenon Y, then Person X needs to protect from Natural Phenomenon Y.",
  "FOL": "HavePhobia(Person X, Natural Phenomenon Y) => NeedToProtectFrom(Person X, Natural Phenomenon Y)"
 },
 "193": {
  "NL": "If Person X moves to Condition Y, then Person X needs to adapt to Condition Y.",
  "FOL": "Move(Person X, Condition Y) => NeedToAdapt(Person X, Condition Y)"
 },
 "194": {
  "NL": "If Person X produces Material Y, then Person X needs to store Material Y.",
  "FOL": "Produce(Person X, Material Y) => NeedToStore(Person X, Material Y)"
 },
 "195": {
  "NL": "If Substance Y is harmful to Person X, then Person X needs to avoid Substance Y.",
  "FOL": "Harmful(Person X, Substance Y) => NeedToAvoid(Person X, Substance Y)"
 },
 "196": {
  "NL": "If Person X is addicted to Substance Y, then Person X needs to use Substance Y.",
  "FOL": "Addicted(Person X, Substance Y) => NeedToUse(Person X, Substance Y)"
 },
 "197": {
  "NL": "If Person X rents Furniture Y, then Person X needs to clean Furniture Y.",
  "FOL": "Rent(Person X, Furniture Y) => NeedToClean(Person X, Furniture Y)"
 },
 "198": {
  "NL": "If Person X is a member of Organization Y, then Person X needs to support Organization Y.",
  "FOL": "Member(Person X, Organization Y) => NeedToSupport(Person X, Organization Y)"
 },
 "199": {
  "NL": "If Artwork X is inspired by Legislation Y, then Artwork X can reflect Legislation Y.",
  "FOL": "InspiredBy(Artwork X, Legislation Y) => CanReflect(Artwork X, Legislation Y)"
 },
 "215": {
  "NL": "If Game X is designed for Disease Y, then Game X can help cope with Disease Y.",
  "FOL": "DesignedFor(Game X, Disease Y) => CanHelpCopeWith(Game X, Disease Y)"
 },
 "231": {
  "NL": "If Game X is winning with Alcohol Y, then Game X can be celebrated with Alcohol Y.",
  "FOL": "IsWinning(Game X, Alcohol Y) => CanBeCelebratedWith(Game X, Alcohol Y)"
 },
 "237": {
  "NL": "If Game X is governed by Legislation Y, then Game X can be modified by Legislation Y.",
  "FOL": "Governed(Game X, Legislation Y) => CanBeModifiedBy(Game X, Legislation Y)"
 },
 "240": {
  "NL": "If Tool X is suitable for Plant Y, then Tool X can prune Plant Y.",
  "FOL": "DesignedFor(Tool X, Plant Y) => CanPlant(Tool X, Plant Y)"
 },
 "251": {
  "NL": "If Game X simulates Job Y, then Game X can be based on Job Y.",
  "FOL": "Simulate(Game X, Job Y) => CanBeBasedOn(Game X, Job Y)"
 },
 "254": {
  "NL": "If Person X cooks Food Z1 and Animal Y eats Food Z1, then Person X can feed Animal Y.",
  "FOL": "Cooks(Person X, Food Z1) ^ Eats(Animal Y, Food Z1) => CanFeed(Person X, Animal Y)"
 },
 "255": {
  "NL": "If Person X has Skill Z1 and Skill Z1 is used for tasting Alcohol Y, then Person X can evaluate Alcohol Y.",
  "FOL": "Have(Person X, Skill Z1) ^ Taste(Skill Z1, Alcohol Y) => CanEvaluate(Person X, Alcohol Y)"
 },
 "256": {
  "NL": "If Person X has Job Z1 and Job Z1 specializes in treating Disease Y, then Person X can treat Disease Y.",
  "FOL": "Is(Person X, Job Z1) ^ Specialize(Job Z1, Disease Y) => CanTreat(Person X, Disease Y)"
 },
 "257": {
  "NL": "If Person X has Job Z1 and Job Z1 involves treating Disease Y, then Person X has knowledge of Disease Y.",
  "FOL": "Is(Person X, Job Z1) ^ Treat(Job Z1, Disease Y) => HasKnowledgeOf(Person X, Disease Y)"
 },
 "258": {
  "NL": "If Person X has Authorization Z1 and Authorization Z1 allows the study of Disease Y, then Person X can research Disease Y.",
  "FOL": "Have(Person X, Authorization Z1) ^ Study(Authorization Z1, Disease Y) => CanResearch(Person X, Disease Y)"
 },
 "259": {
  "NL": "If Person X has Job Z1 and Job Z1 is a doctor who can prescribe Drug Y, then Person X can prescribe Drug Y.",
  "FOL": "Is(Person X, Job Z1) ^ IsDoctor(Job Z1, Drug Y) => CanPrescribe(Person X, Drug Y)"
 },
 "260": {
  "NL": "If Person X has Condition Z1 and Drug Y treats Condition Z1, then Person X can consume Drug Y.",
  "FOL": "Contract(Person X, Condition Z1) ^ Treat(Drug Y, Condition Z1) => CanConsume(Person X, Drug Y)"
 },
 "261": {
  "NL": "If Person X uses Tool Z2 and Tool Z2 is designed for predicting Natural Phenomenon Y, then Person X can predict Natural Phenomenon Y.",
  "FOL": "Use(Person X, Tool Z2) ^ DesignedFor(Tool Z2, Natural Phenomenon Y) => CanPredict(Person X, Natural Phenomenon Y)"
 },
 "262": {
  "NL": "If Person X has Tool Z and Tool Z is used in experiments involving Natural Phenomenon Y, then Person X can study Natural Phenomenon Y.",
  "FOL": "Have(Person X, Tool Z) ^ UsedInExperiment(Tool Z, Natural Phenomenon Y) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "263": {
  "NL": "If Person X has Tool Z1 and Tool Z1 is designed for measuring Natural Phenomenon Y, then Person X can measure Natural Phenomenon Y.",
  "FOL": "Have(Person X, Tool Z1) ^ DesignedFor(Tool Z1, Natural Phenomenon Y) => CanMeasure(Person X, Natural Phenomenon Y)"
 },
 "264": {
  "NL": "If Person X has Skill Z2 and Skill Z2 is required for measuring Natural Phenomenon Y, then Person X can study Natural Phenomenon Y.",
  "FOL": "Have(Person X, Skill Z2) ^ RequiredForMeasuring(Skill Z2, Natural Phenomenon Y) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "265": {
  "NL": "If Person X owns Electronic Device Z1 and Electronic Device Z1 is suitable for recording Natural Phenomenon Y, then Person X can study Natural Phenomenon Y.",
  "FOL": "Own(Person X, Electronic Device Z1) ^ SuitableForRecording(Electronic Device Z1, Natural Phenomenon Y) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "266": {
  "NL": "If Person X has Age Z1 and Age Z1 is a risk factor for Condition Y, then Person X can experience Condition Y.",
  "FOL": "Have(Person X, Age Z1) ^ RiskFactor(Age Z1, Condition Y) => CanExperience(Person X, Condition Y)"
 },
 "267": {
  "NL": "If Person X has Age Z1 and Condition Y is common in Age Z1, then Person X is susceptible to Condition Y.",
  "FOL": "Have(Person X, Age Z1) ^ CommonIn(Age Z1, Condition Y) => SusceptibleTo(Person X, Condition Y)"
 },
 "268": {
  "NL": "If Person X is of Age Z1 and the prevalence of Condition Y is associated with Age Z1, then Person X can develop symptoms of Condition Y.",
  "FOL": "Have(Person X, Age Z1) ^ Prevalence(Age Z1, Condition Y) => CanDevelopSymptoms(Person X, Condition Y)"
 },
 "269": {
  "NL": "If Person X has Job Z1 and Job Z1 is capable of managing Condition Y, then Person X can treat Condition Y.",
  "FOL": "Is(Person X, Job Z1) ^ Manage(Job Z1, Condition Y) => CanTreat(Person X, Condition Y)"
 },
 "270": {
  "NL": "If Person X has studied Skill Z2 and Skill Z2 is effective for recycling Material Y, then Person X can recycle Material Y.",
  "FOL": "Study(Person X, Skill Z2) ^ EffectiveFor(Skill Z2, Material Y) => CanRecycle(Person X, Material Y)"
 },
 "271": {
  "NL": "If Person X has studied Skill Z1 and Skill Z1 is suitable for disposing Material Y, then Person X can dispose Material Y.",
  "FOL": "Study(Person X, Skill Z1) ^ SuitableFor(Material Y, Skill Z1) => CanDispose(Person X, Material Y)"
 },
 "272": {
  "NL": "If Person X buys Tool Z1 and Tool Z1 is suitable for manipulating Material Y, then Person X can manipulate Material Y.",
  "FOL": "Buy(Person X, Tool Z1) ^ SuitableFor(Tool Z1, Material Y) => CanManipulate(Person X, Material Y)"
 },
 "273": {
  "NL": "If Person X has Skill Z2 and Skill Z2 is used in manipulating Material Y, then Person X can manipulate Material Y.",
  "FOL": "Have(Person X, Skill Z2) ^ UsedIn(Skill Z2, Material Y) => CanManipulate(Person X, Material Y)"
 },
 "274": {
  "NL": "If Person X has mastered Skill Z2 and Skill Z2 is necessary for shaping Material Y, then Person X can shape Material Y.",
  "FOL": "Master(Person X, Skill Z2) ^ NecessaryFor(Skill Z2, Material Y) => CanShape(Person X, Material Y)"
 },
 "275": {
  "NL": "If Person X has developed Strength Z2 and Strength Z2 is required to cut Material Y, then Person X can cut Material Y.",
  "FOL": "Develop(Person X, Strength Z2) ^ RequireStrength(Material Y, Strength Z2) => CanCut(Person X, Material Y)"
 },
 "276": {
  "NL": "If Person X has Tool Z2 and Tool Z2 is designed for disposing Substance Y, then Person X can dispose Substance Y.",
  "FOL": "Have(Person X, Tool Z2) ^ DesignedFor(Tool Z2, Substance Y) => CanDispose(Person X, Substance Y)"
 },
 "277": {
  "NL": "If Person X consumes Food Z2 and Substance Y is added to Food Z2, then Person X can absorb Substance Y.",
  "FOL": "Consume(Person X, Food Z2) ^ Added(Food Z2, Substance Y) => CanAbsorb(Person X, Substance Y)"
 },
 "278": {
  "NL": "If Person X has Condition Z1 and Substance Y is not harmful to Condition Z1, then Person X can be exposed to Substance Y.",
  "FOL": "Contract(Person X, Condition Z1) ^ NotHarmful(Substance Y, Condition Z1) => CanBeExposedTo(Person X, Substance Y)"
 },
 "279": {
  "NL": "If Person X works in Condition Z2 and Substance Y is required for Condition Z2, then Person X can be exposed to Substance Y.",
  "FOL": "WorkIn(Person X, Condition Z2) ^ Required(Substance Y, Condition Z2) => CanBeExposedTo(Person X, Substance Y)"
 },
 "280": {
  "NL": "If Person X has Tool Z and Tool Z can lift Furniture Y, then Person X can move Furniture Y.",
  "FOL": "Have(Person X, Tool Z) ^ CanLift(Tool Z, Furniture Y) => CanMove(Person X, Furniture Y)"
 },
 "281": {
  "NL": "If Person X knows Skill Z2 and Skill Z2 is needed to repair the damaged Furniture Y, then Person X can repair Furniture Y.",
  "FOL": "Know(Person X, Skill Z2) ^ Damaged(Furniture Y, Skill Z2) => CanRepair(Person X, Furniture Y)"
 },
 "282": {
  "NL": "If Person X practices Skill Z1 and Publication Y is written in Skill Z1, then Person X can quote Publication Y.",
  "FOL": "Practice(Person X, Skill Z1) ^ WrittenIn(Publication Y, Skill Z1) => CanQuote(Person X, Publication Y)"
 },
 "283": {
  "NL": "If Person X has been taught Skill Z1 and Skill Z1 is required by Organization Y, then Person X can work for Organization Y.",
  "FOL": "Taught(Person X, Skill Z1) ^ Require(Skill Z1, Organization Y) => CanWorkFor(Person X, Organization Y)"
 },
 "284": {
  "NL": "If Person X has studied Skill Z1 and Organization Y requires Skill Z1, then Person X can work for Organization Y.",
  "FOL": "Studied(Person X, Skill Z1) ^ Require(Skill Z1, Organization Y) => CanWorkFor(Person X, Organization Y)"
 },
 "285": {
  "NL": "If Person X has been taught Skill Z1 and Organization Y values Skill Z1, then Person X is a potential employee for Organization Y.",
  "FOL": "Taught(Person X, Skill Z1) ^ Value(Organization Y, Skill Z1) => PotentialEmployee(Person X, Organization Y)"
 },
 "286": {
  "NL": "If Person X has Authorization Z2 and Authorization Z2 is required by Organization Y, then Person X is a potential employee for Organization Y.",
  "FOL": "Have(Person X, Authorization Z2) ^ Require(Authorization Z2, Organization Y) => PotentialEmployee(Person X, Organization Y)"
 },
 "287": {
  "NL": "If Person X has borrowed Tool Z1 and Tool Z1 is suitable for pruning Plant Y, then Person X can prune Plant Y.",
  "FOL": "Borrow(Person X, Tool Z1) ^ SuitableFor(Tool Z1, Plant Y) => CanPrune(Person X, Plant Y)"
 },
 "288": {
  "NL": "If Person X has Skill Z2 and Organization Y has a project that requires Skill Z2, then Person X can collaborate with Organization Y.",
  "FOL": "Have(Person X, Skill Z2) ^ Project(Organization Y, Skill Z2) => CanCollaborate(Person X, Organization Y)"
 },
 "289": {
  "NL": "If Person X has Authorization Z1 and Facility Y accepts Authorization Z1, then Person X is authorized in Facility Y.",
  "FOL": "Have(Person X, Authorization Z1) ^ Accept(Authorization Z1, Facility Y) => AuthorizedIn(Person X, Facility Y)"
 },
 "290": {
  "NL": "If Person X has Authorization Z1 and Authorization Z1 is required for entry to Facility Y, then Person X has access to Facility Y.",
  "FOL": "Have(Person X, Authorization Z1) ^ RequiredForEntry(Authorization Z1, Facility Y) => HasAccessTo(Person X, Facility Y)"
 },
 "291": {
  "NL": "If Person X has studied Skill Z1 and Skill Z1 is required for creating Artwork Y, then Person X can build Artwork Y.",
  "FOL": "Studied(Person X, Skill Z1) ^ RequiredForArtwork(Skill Z1, Artwork Y) => CanBuild(Person X, Artwork Y)"
 },
 "292": {
  "NL": "If Person X knows Skill Z2 and Skill Z2 is needed for survival in Natural Place Y, then Person X can camp in Natural Place Y.",
  "FOL": "Know(Person X, Skill Z2) ^ NeededForSurvival(Skill Z2, Natural Place Y) => CanCamp(Person X, Natural Place Y)"
 },
 "293": {
  "NL": "If Person X knows Skill Z2 and Skill Z2 is essential for pruning Plant Y, then Person X can prune Plant Y.",
  "FOL": "Knows(Person X, Skill Z2) ^ EssentialFor(Skill Z2, Plant Y) => CanPrune(Person X, Plant Y)"
 },
 "294": {
  "NL": "If Person X has studied Skill Z2 and Skill Z2 is needed for the care of Plant Y, then Person X knows how to care for Plant Y.",
  "FOL": "Studied(Person X, Skill Z2) ^ NeededFor(Skill Z2, Plant Y) => KnowsPlantCare(Person X, Plant Y)"
 },
 "295": {
  "NL": "If Person X has bought Space Z1 and Space Z1 is suitable for displaying Artwork Y, then Person X can display Artwork Y.",
  "FOL": "Buy(Person X, Space Z1) ^ SuitableFor(Space Z1, Artwork Y) => CanDisplay(Person X, Artwork Y)"
 },
 "296": {
  "NL": "If Person X has Skill Z1 and Artwork Y is damaged in a way that requires Skill Z1 to restore, then Person X can restore Artwork Y.",
  "FOL": "Have(Person X, Skill Z1) ^ Damaged(Artwork Y, Skill Z1) => CanRestore(Person X, Artwork Y)"
 },
 "297": {
  "NL": "If Person X has been taught Skill Z2 and Skill Z2 is needed for Plant Y, then Person X has gardening skills for Plant Y.",
  "FOL": "Taught(Person X, Skill Z2) ^ NeededFor(Skill Z2, Plant Y) => HasGardeningSkills(Person X, Plant Y)"
 },
 "298": {
  "NL": "If Person X has studied Skill Z1 and Skill Z1 is needed to understand the complexity of Artwork Y, then Person X can evaluate Artwork Y.",
  "FOL": "Studied(Person X, Skill Z1) ^ Complex(Artwork Y, Skill Z1) => CanEvaluateArtwork(Person X, Artwork Y)"
 },
 "299": {
  "NL": "If Person X has practiced Skill Z2 and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "FOL": "Practiced(Person X, Skill Z2) ^ NeededFor(Skill Z2, Plant Y) => CanMaintainPlant(Person X, Plant Y)"
 },
 "300": {
  "NL": "If Person X has Authorization Z1 and Job Y needs Authorization Z1, then Person X can specialize in Job Y.",
  "FOL": "Have(Person X, Authorization Z1) ^ Need(Job Y, Authorization Z1) => CanSpecializeIn(Person X, Job Y)"
 },
 "301": {
  "NL": "If Person X has been granted Authorization Z1 and the job Y requires Authorization Z1 according to the law, then Job Y is a potential career for Person X.",
  "FOL": "Granted(Person X, Authorization Z1) ^ Law(Job Y, Authorization Z1) => PotentialCareer(Person X, Job Y)"
 },
 "302": {
  "NL": "If Person X has bought Electronic Device Z1 and Electronic Device Z1 is required for playing Game Y, then Person X can play Game Y.",
  "FOL": "Buy(Person X, Electronic Device Z1) ^ RequiredForGame(Electronic Device Z1, Game Y) => CanPlay(Person X, Game Y)"
 },
 "303": {
  "NL": "If Person X has bought Tool Z2 and Tool Z2 is needed for harvesting Plant Y, then Person X can harvest Plant Y.",
  "FOL": "Buy(Person X, Tool Z2) ^ NeededFor(Tool Z2, Plant Y) => CanHarvest(Person X, Plant Y)"
 },
 "304": {
  "NL": "If Person X has mastered Skill Z1 and the rules of Game Y specify Skill Z1, then Person X can compete in Game Y.",
  "FOL": "Master(Person X, Skill Z1) ^ RulesSpecify(Skill Z1, Game Y) => CanCompete(Person X, Game Y)"
 },
 "305": {
  "NL": "If Person X has inherited Tool Z2 and Tool Z2 is required for Game Y, then Person X can compete in Game Y.",
  "FOL": "Inherit(Person X, Tool Z2) ^ RequiredForGame(Tool Z2, Game Y) => CanCompete(Person X, Game Y)"
 },
 "306": {
  "NL": "If Person X knows Skill Z1 and Skill Z1 is needed to drive Vehicle Y, then Person X can navigate Vehicle Y.",
  "FOL": "Know(Person X, Skill Z1) ^ Drive(Skill Z1, Vehicle Y) => CanNavigate(Person X, Vehicle Y)"
 },
 "307": {
  "NL": "If Person X rents Space Z2 and Space Z2 is suitable for Vehicle Y, then Person X can park Vehicle Y.",
  "FOL": "Rent(Person X, Space Z2) ^ SuitableFor(Space Z2, Vehicle Y) => CanPark(Person X, Vehicle Y)"
 },
 "308": {
  "NL": "If Person X finds Material Z2 and Material Z2 can enhance Tool Y, then Person X can improve Tool Y.",
  "FOL": "Find(Person X, Material Z2) ^ Enhance(Tool Y, Material Z2) => CanImproveTool(Person X, Tool Y)"
 },
 "309": {
  "NL": "If Person X has been taught Skill Z1 and Skill Z1 is needed to operate Technology Y, then Person X is qualified for the job involving Technology Y.",
  "FOL": "Taught(Person X, Skill Z1) ^ OperateWith(Skill Z1, Technology Y) => QualifiedForJob(Person X, Technology Y)"
 },
 "310": {
  "NL": "If Person X knows Skill Z1 and Skill Z1 improves Technology Y, then Person X can upgrade Technology Y.",
  "FOL": "Knows(Person X, Skill Z1) ^ Improves(Skill Z1, Technology Y) => CanUpgrade(Person X, Technology Y)"
 },
 "311": {
  "NL": "If Person X has mastered Skill Z2 and Skill Z2 is needed for fixing Electronic Device Y, then Person X can repair Electronic Device Y.",
  "FOL": "Master(Person X, Skill Z2) ^ NeededForFixing(Skill Z2, Electronic Device Y) => CanRepair(Person X, Electronic Device Y)"
 },
 "312": {
  "NL": "If Person X has studied Technology Z1 and Technology Z1 is required to use Platform Y, then Person X can use Platform Y.",
  "FOL": "Studied(Person X, Technology Z1) ^ PlatformRequires(Technology Z1, Platform Y) => CanUse(Person X, Platform Y)"
 },
 "313": {
  "NL": "If Person X works with Technology Z1 and Platform Y requires Technology Z1, then Person X can use Platform Y.",
  "FOL": "Works_With(Person X, Technology Z1) ^ PlatformRequires(Technology Z1, Platform Y) => CanUse(Person X, Platform Y)"
 },
 "314": {
  "NL": "If Person X has bought Electronic Device Z2 and Platform Y supports Electronic Device Z2, then Person X can use Platform Y.",
  "FOL": "Bought(Person X, Electronic Device Z2) ^ PlatformSupports(Electronic Device Z2, Platform Y) => CanUse(Person X, Platform Y)"
 },
 "315": {
  "NL": "If Person X has an Electronic Device Z and Platform Y supports Electronic Device Z, then Person X can interact with the community on Platform Y.",
  "FOL": "Have(Person X, Electronic Device Z) ^ Supports(Platform Y, Electronic Device Z) => CanInteractWithCommunity(Person X, Platform Y)"
 },
 "316": {
  "NL": "If Person X has been taught Skill Z2 and Platform Y requires Skill Z2, then Person X can communicate on Platform Y.",
  "FOL": "Taught(Person X, Skill Z2) ^ Require(Platform Y, Skill Z2) => CanCommunicateOn(Person X, Platform Y)"
 },
 "317": {
  "NL": "If Person X has practiced Skill Z2 and Skill Z2 is required to maintain Platform Y, then Person X knows how to use Platform Y.",
  "FOL": "Practice(Person X, Skill Z2) ^ Maintain(Platform Y, Skill Z2) => KnowsHowToUse(Person X, Platform Y)"
 },
 "318": {
  "NL": "If Person X knows Skill Z1 and Skill Z1 is required for Platform Y, then Person X has the skills for Platform Y.",
  "FOL": "Knows(Person X, Skill Z1) ^ RequiredForPlatform(Skill Z1, Platform Y) => HasSkills(Person X, Platform Y)"
 },
 "319": {
  "NL": "If Person X has Electronic Device Z1 and Platform Y supports Electronic Device Z1, then Person X has access to Platform Y.",
  "FOL": "Have(Person X, Electronic Device Z1) ^ Support(Platform Y, Electronic Device Z1) => HasAccessTo(Person X, Platform Y)"
 },
 "320": {
  "NL": "If Person X has studied Skill Z and Skill Z is required for cooking Food Y, then Person X can cook Food Y.",
  "FOL": "Studied(Person X, Skill Z) ^ RequiredFor(Skill Z, Food Y) => CanCook(Person X, Food Y)"
 },
 "321": {
  "NL": "If Person X has Authorization Z2 and the company mandates Authorization Z2 for selling Financial Product Y, then Person X can sell Financial Product Y.",
  "FOL": "Have(Person X, Authorization Z2) ^ MandatedByCompany(Authorization Z2, Financial Product Y) => CanSell(Person X, Financial Product Y)"
 },
 "322": {
  "NL": "If Person X has obtained Skill Z and Skill Z is needed for Authorization Y, then Person X can use Authorization Y.",
  "FOL": "Obtain(Person X, Skill Z) ^ NeededFor(Skill Z, Authorization Y) => CanUse(Person X, Authorization Y)"
 },
 "323": {
  "NL": "If Person X knows Skill Z and Skill Z is needed to prepare Food Y, then Person X can cook Food Y.",
  "FOL": "Knows(Person X, Skill Z) ^ Prepare(Skill Z, Food Y) => CanCook(Person X, Food Y)"
 },
 "324": {
  "NL": "If Person X has practiced Skill Z1 and Skill Z1 is required for reading Publication Y, then Person X can discuss Publication Y.",
  "FOL": "Practiced(Person X, Skill Z1) ^ RequiredForReading(Skill Z1, Publication Y) => CanDiscuss(Person X, Publication Y)"
 },
 "325": {
  "NL": "If Person X has bought Tool Z2 and Tool Z2 is required for writing Publication Y, then Person X can compose Publication Y.",
  "FOL": "Buy(Person X, Tool Z2) ^ RequiredForWriting(Tool Z2, Publication Y) => CanCompose(Person X, Publication Y)"
 },
 "326": {
  "NL": "If Person X owns Space Z2 and Space Z2 is enough for storing Food Y, then Person X can store Food Y.",
  "FOL": "Own(Person X, Space Z2) ^ EnoughFor(Space Z2, Food Y) => CanStore(Person X, Food Y)"
 },
 "327": {
  "NL": "If Person X has Space Z2 and Food Y can fit into Space Z2, then Person X can store Food Y.",
  "FOL": "Have(Person X, Space Z2) ^ Fit(Space Z2, Food Y) => CanStore(Person X, Food Y)"
 },
 "328": {
  "NL": "If Person X does not have Condition Z and Alcohol Y worsens Condition Z, then Person X can drink Alcohol Y.",
  "FOL": "NotHave(Person X, Condition Z) ^ Worsen(Alcohol Y, Condition Z) => CanDrink(Person X, Alcohol Y)"
 },
 "329": {
  "NL": "If Person X knows Skill Z1 and Skill Z1 is used to brew Alcohol Y, then Person X can produce Alcohol Y.",
  "FOL": "Knows(Person X, Skill Z1) ^ Brew(Skill Z1, Alcohol Y) => CanProduce(Person X, Alcohol Y)"
 },
 "330": {
  "NL": "If Person X has studied Skill Z1 and Skill Z1 is used to ferment Alcohol Y, then Person X has the skill to make Alcohol Y.",
  "FOL": "Studied(Person X, Skill Z1) ^ Ferment(Skill Z1, Alcohol Y) => HasSkill(Person X, Alcohol Y)"
 },
 "331": {
  "NL": "If Person X lives in Region Z and Plant Y is planted in Region Z, then Person X can access Plant Y.",
  "FOL": "LiveIn(Person X, Region Z) ^ PlantedIn(Plant Y, Region Z) => CanAccess(Person X, Plant Y)"
 },
 "332": {
  "NL": "If Person X is not sensitive to Material Z and Furniture Y is made of Material Z, then Person X can use Furniture Y.",
  "FOL": "NotSensitiveTo(Person X, Material Z) ^ MadeOf(Furniture Y, Material Z) => CanUse(Person X, Furniture Y)"
 },
 "333": {
  "NL": "If Person X has moved to Region Z1 and Publication Y is available in Region Z1, then Person X can access Publication Y.",
  "FOL": "MovedTo(Person X, Region Z1) ^ AvailableIn(Publication Y, Region Z1) => CanAccess(Person X, Publication Y)"
 },
 "334": {
  "NL": "If Person X exists during Time Period Z1 and Plant Y blooms in Time Period Z1, then Person X can access Plant Y.",
  "FOL": "Exist(Person X, Time Period Z1) ^ BloomIn(Plant Y, Time Period Z1) => CanAccess(Person X, Plant Y)"
 },
 "335": {
  "NL": "If Person X is trained in Skill Z and Job Y requires Skill Z, then Person X can access Job Y.",
  "FOL": "Trained(Person X, Skill Z) ^ Requires(Job Y, Skill Z) => CanAccess(Person X, Job Y)"
 },
 "336": {
  "NL": "If Person X has Skill Z and Job Y requires Skill Z, then Person X is a potential candidate for Job Y.",
  "FOL": "HasSkill(Person X, Skill Z) ^ Requires(Job Y, Skill Z) => PotentialCandidate(Person X, Job Y)"
 },
 "337": {
  "NL": "If Person X earns Authorization Z2 and Job Y requires Authorization Z2, then Person X can access Job Y.",
  "FOL": "Earns(Person X, Authorization Z2) ^ Requires(Job Y, Authorization Z2) => CanAccess(Person X, Job Y)"
 },
 "338": {
  "NL": "If Person X has Authorization Z2 and Authorization Z2 is the industry standard for Job Y, then Person X can access Job Y.",
  "FOL": "HasAuthorization(Person X, Authorization Z2) ^ IndustryStandard(Job Y, Authorization Z2) => CanAccess(Person X, Job Y)"
 },
 "339": {
  "NL": "If Person X has bought Electronic Device Z and Game Y is compatible with Electronic Device Z, then Person X can access Game Y.",
  "FOL": "Bought(Person X, Electronic Device Z) ^ CompatibleWith(Game Y, Electronic Device Z) => CanAccess(Person X, Game Y)"
 },
 "340": {
  "NL": "If Person X owns Electronic Device Z and Electronic Device Z supports Game Y, then Person X can access Game Y.",
  "FOL": "Owns(Person X, Electronic Device Z) ^ Supports(Electronic Device Z, Game Y) => CanAccess(Person X, Game Y)"
 },
 "341": {
  "NL": "If Person X has received Electronic Device Z and Game Y is updated for Electronic Device Z, then Person X can play Game Y.",
  "FOL": "Received(Person X, Electronic Device Z) ^ UpdatedFor(Game Y, Electronic Device Z) => CanPlay(Person X, Game Y)"
 },
 "342": {
  "NL": "If Person X moves to Region Z1 and Game Y is released in Region Z1, then Person X can play Game Y.",
  "FOL": "MoveTo(Person X, Region Z1) ^ ReleasedIn(Game Y, Region Z1) => CanPlay(Person X, Game Y)"
 },
 "343": {
  "NL": "If Person X is located in Region Z1 and Tool Y is also placed in Region Z1, then Person X can access Tool Y.",
  "FOL": "LocatedIn(Person X, Region Z1) ^ PlacedIn(Tool Y, Region Z1) => CanAccess(Person X, Tool Y)"
 },
 "344": {
  "NL": "If Person X has studied Technology Z, and Platform Y requires knowledge of Technology Z, then Person X can access Platform Y.",
  "FOL": "Studied(Person X, Technology Z) ^ Requires(Platform Y, Technology Z) => CanAccess(Person X, Platform Y)"
 },
 "345": {
  "NL": "If Person X knows how to use Technology Z and Platform Y operates with Technology Z, then Person X can access Platform Y.",
  "FOL": "KnowsHowToUse(Person X, Technology Z) ^ Operates_With(Platform Y, Technology Z) => CanAccess(Person X, Platform Y)"
 },
 "346": {
  "NL": "If Person X is employed at Organization Z1 and Financial Product Y is distributed by Organization Z1, then Person X can access Financial Product Y.",
  "FOL": "EmployedAt(Person X, Organization Z1) ^ DistributedBy(Organization Z1, Financial Product Y) => CanAccess(Person X, Financial Product Y)"
 },
 "347": {
  "NL": "If Person X was born in Region Z and Legislation Y was enacted in Region Z, then Person X can access Legislation Y.",
  "FOL": "BornIn(Person X, Region Z) ^ EnactedIn(Legislation Y, Region Z) => CanAccess(Person X, Legislation Y)"
 },
 "348": {
  "NL": "If Person X lives in Region Z and Disease Y is prevalent in Region Z, then Person X is at risk of Disease Y.",
  "FOL": "LiveIn(Person X, Region Z) ^ PrevalentIn(Disease Y, Region Z) => AtRisk(Person X, Disease Y)"
 },
 "349": {
  "NL": "If Person X is located in Region Z and Natural Phenomenon Y occurs in Region Z, then Person X can study Natural Phenomenon Y.",
  "FOL": "LocatedIn(Person X, Region Z) ^ OccurIn(Natural Phenomenon Y, Region Z) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "350": {
  "NL": "If Person X lives in Time Period Z1 and Natural Phenomenon Y occurs during Time Period Z1, then Person X can experience Natural Phenomenon Y.",
  "FOL": "LiveIn(Person X, Time Period Z1) ^ OccurDuring(Natural Phenomenon Y, Time Period Z1) => CanExperience(Person X, Natural Phenomenon Y)"
 },
 "351": {
  "NL": "If Person X moves to Region Z and Animal Y is born in Region Z, then Person X can observe Animal Y.",
  "FOL": "MoveTo(Person X, Region Z) ^ Born(Animal Y, Region Z) => CanObserve(Person X, Animal Y)"
 },
 "352": {
  "NL": "If Person X lives in Region Z1 and Material Y is a natural resource in Region Z1, then Person X can access Material Y.",
  "FOL": "LiveIn(Person X, Region Z1) ^ NaturalResource(Material Y, Region Z1) => CanAccess(Person X, Material Y)"
 },
 "353": {
  "NL": "If Person X is immune to Substance Z1 and Substance Y is derived from Substance Z1, then Person X can use Substance Y.",
  "FOL": "Immune(Person X, Substance Z1) ^ Derived(Substance Z1, Substance Z1) => CanUse(Person X, Substance Y)"
 },
 "354": {
  "NL": "If Organization X is registered in Region Z and Financial Product Y is sold in Region Z, then Organization X can access Financial Product Y.",
  "FOL": "RegisteredIn(Organization X, Region Z) ^ SoldIn(Financial Product Y, Region Z) => CanAccess(Organization X, Financial Product Y)"
 },
 "355": {
  "NL": "If Organization X operates in Region Z and Legislation Y has been passed in Region Z, then Organization X can access Legislation Y.",
  "FOL": "OperateIn(Organization X, Region Z) ^ PassedIn(Legislation Y, Region Z) => CanAccess(Organization X, Legislation Y)"
 },
 "356": {
  "NL": "If Organization X operates in Region Z and Legislation Y is enforced in Region Z, then Organization X must comply with Legislation Y.",
  "FOL": "OperateIn(Organization X, Region Z) ^ EnforcedIn(Legislation Y, Region Z) => MustComply(Organization X, Legislation Y)"
 },
 "357": {
  "NL": "If Organization X is not banned from using Technology Z and Technology Y has evolved from Technology Z, then Organization X can access Technology Y.",
  "FOL": "NotBanned(Organization X, Technology Z) ^ EvolvedFrom(Technology Z, Technology Z) => CanAccess(Organization X, Technology Y)"
 },
 "358": {
  "NL": "If Organization X sponsors Event Z and Event Z is organized by Show Y, then Organization X can access Show Y.",
  "FOL": "Sponsor(Organization X, Event Z) ^ OrganizedBy(Event Z, Show Y) => CanAccess(Organization X, Show Y)"
 },
 "359": {
  "NL": "If Organization X is located in Region Z and Food Y is native to Region Z, then Organization X can access Food Y.",
  "FOL": "LocatedIn(Organization X, Region Z) ^ NativeTo(Food Y, Region Z) => CanAccess(Organization X, Food Y)"
 },
 "360": {
  "NL": "If Vehicle X is equipped with Technology Z and Electronic Device Y is designed for Technology Z, then Vehicle X can access Electronic Device Y.",
  "FOL": "EquippedWith(Vehicle X, Technology Z) ^ DesignedFor(Electronic Device Y, Technology Z) => CanAccess(Vehicle X, Electronic Device Y)"
 },
 "361": {
  "NL": "If Vehicle X is adapted to Condition Z1 and Natural Place Y has Condition Z1, then Vehicle X can access Natural Place Y.",
  "FOL": "AdaptedTo(Vehicle X, Condition Z1) ^ HasCondition(Natural Place Y, Condition Z1) => CanAccess(Vehicle X, Natural Place Y)"
 },
 "362": {
  "NL": "If Organization X has a branch in Region Z and Drug Y is legal in Region Z, then Organization X can access Drug Y.",
  "FOL": "HaveBranchIn(Organization X, Region Z) ^ LegalIn(Drug Y, Region Z) => CanAccess(Organization X, Drug Y)"
 },
 "363": {
  "NL": "If Vehicle X does not exceed Weight Z1 and Platform Y has been tested for Weight Z1, then Vehicle X can access Platform Y.",
  "FOL": "NotExceed(Vehicle X, Weight Z1) ^ TestedFor(Platform Y, Weight Z1) => CanAccess(Vehicle X, Platform Y)"
 },
 "364": {
  "NL": "If Vehicle X operates in Region Z1 and Food Y is cultivated in Region Z1, then Vehicle X can access Food Y.",
  "FOL": "OperateIn(Vehicle X, Region Z1) ^ CultivatedIn(Food Y, Region Z1) => CanAccess(Vehicle X, Food Y)"
 },
 "365": {
  "NL": "If Event X is held in Region Z1 and Material Y is imported to Region Z1, then Event X can access Material Y.",
  "FOL": "HeldIn(Event X, Region Z1) ^ ImportedTo(Material Y, Region Z1) => CanAccess(Event X, Material Y)"
 },
 "366": {
  "NL": "If Animal Z attends Event X and Animal Z is a carrier of Disease Y, then Disease Y can be accessed at Event X.",
  "FOL": "Attend(Animal Z, Event X) ^ Carrier(Animal Z, Disease Y) => CanAccess(Event X, Disease Y)"
 },
 "367": {
  "NL": "If Event X is scheduled for Time Period Z1 and Food Y matures in Time Period Z1, then Food Y can be eaten at Event X.",
  "FOL": "ScheduledFor(Event X, Time Period Z1) ^ MatureIn(Food Y, Time Period Z1) => CanEat(Event X, Food Y)"
 },
 "368": {
  "NL": "If Animal X is adapted to Natural Place Z and Animal Y lives in Natural Place Z, then Animal X can access Animal Y.",
  "FOL": "AdaptedTo(Animal X, Natural Place Z) ^ LiveIn(Animal Y, Natural Place Z) => CanAccess(Animal X, Animal Y)"
 },
 "369": {
  "NL": "If Organization X has bought Facility Z and Tool Y is stored in Facility Z, then Organization X can access Tool Y.",
  "FOL": "Bought(Organization X, Facility Z) ^ StoredIn(Tool Y, Facility Z) => CanAccess(Organization X, Tool Y)"
 },
 "370": {
  "NL": "If Animal X has migrated to Region Z and Substance Y is found in Region Z, then Animal X can access Substance Y.",
  "FOL": "MigratedTo(Animal X, Region Z) ^ FoundIn(Substance Y, Region Z) => CanAccess(Animal X, Substance Y)"
 },
 "371": {
  "NL": "If Animal X tolerates Substance Z and Substance Y is composed of Substance Z, then Animal X can touch Substance Y.",
  "FOL": "Tolerate(Animal X, Substance Z) ^ Composed(Substance Z, Substance Z) => CanTouch(Animal X, Substance Y)"
 },
 "372": {
  "NL": "If Animal X is active during Time Period Z1 and Plant Y is adapted to Time Period Z1, then Animal X can access Plant Y.",
  "FOL": "ActiveDuring(Animal X, Time Period Z1) ^ AdaptedTo(Plant Y, Time Period Z1) => CanAccess(Animal X, Plant Y)"
 },
 "373": {
  "NL": "If Animal X has migrated to Region Z and Natural Phenomenon Y is common in Region Z, then Animal X experiences Natural Phenomenon Y.",
  "FOL": "MigratedTo(Animal X, Region Z) ^ CommonIn(Natural Phenomenon Y, Region Z) => Experiences(Animal X, Natural Phenomenon Y)"
 },
 "374": {
  "NL": "If Organization X has a branch in Region Z1 and Tool Y is available in Region Z1, then Organization X can access Tool Y.",
  "FOL": "HasBranchIn(Organization X, Region Z1) ^ AvailableIn(Tool Y, Region Z1) => CanAccess(Organization X, Tool Y)"
 },
 "375": {
  "NL": "If Animal X eats Food Z and Food Z has been exposed to Disease Y, then Animal X can potentially access Disease Y.",
  "FOL": "Eat(Animal X, Food Z) ^ ExposedTo(Food Z, Disease Y) => CanAccess(Animal X, Disease Y)"
 },
 "376": {
  "NL": "If Animal X forages for Food Z and Food Z is infected by Disease Y, then Animal X can contract Disease Y.",
  "FOL": "Forage(Animal X, Food Z) ^ InfectedBy(Food Z, Disease Y) => CanContract(Animal X, Disease Y)"
 },
 "377": {
  "NL": "If Animal X eats Food Z, and Food Z is contaminated with Disease Y, then Animal X is at risk of Disease Y.",
  "FOL": "Eat(Animal X, Food Z) ^ ContaminatedWith(Food Z, Disease Y) => AtRisk(Animal X, Disease Y)"
 },
 "378": {
  "NL": "If Animal X has been fed Food Z and Food Z has been touched by Disease Y, then Animal X is at risk of Disease Y.",
  "FOL": "Fed(Animal X, Food Z) ^ TouchedBy(Food Z, Disease Y) => AtRisk(Animal X, Disease Y)"
 },
 "379": {
  "NL": "If Technology X is updated for Platform Z and Electronic Device Y runs on Platform Z, then Technology X can access Electronic Device Y.",
  "FOL": "UpdatedFor(Technology X, Platform Z) ^ RunOn(Electronic Device Y, Platform Z) => CanAccess(Technology X, Electronic Device Y)"
 },
 "380": {
  "NL": "If Organization X has received Artwork Z as a donation and Artwork Z is stored in Electronic Device Y, then Organization X can access Electronic Device Y.",
  "FOL": "Donated_to(Organization X, Artwork Z) ^ StoredIn(Electronic Device Y, Artwork Z) => CanAccess(Organization X, Electronic Device Y)"
 },
 "381": {
  "NL": "If Organization X is established in Region Z1 and Electronic Device Y is sold in Region Z1, then Organization X can access Electronic Device Y.",
  "FOL": "EstablishedIn(Organization X, Region Z1) ^ SoldIn(Electronic Device Y, Region Z1) => CanAccess(Organization X, Electronic Device Y)"
 },
 "382": {
  "NL": "If Organization X has organized Event Z2 and Facility Y is required for Event Z2, then Organization X can access Facility Y.",
  "FOL": "Organized(Organization X, Event Z2) ^ RequiredFor(Facility Y, Event Z2) => CanAccess(Organization X, Facility Y)"
 },
 "383": {
  "NL": "If Organization X operates during Time Period Z2 and Natural Place Y is safe during Time Period Z2, then Organization X can access Natural Place Y.",
  "FOL": "OperateDuring(Organization X, Time Period Z2) ^ SafeDuring(Natural Place Y, Time Period Z2) => CanAccess(Organization X, Natural Place Y)"
 },
 "384": {
  "NL": "If Organization X legally has Material Z and Material Z is derived from Material Y, then Organization X has knowledge of Material Y.",
  "FOL": "Legal(Organization X, Material Z) ^ Derived(Material Z, Material Z) => HasKnowledgeOf(Organization X, Material Y)"
 },
 "385": {
  "NL": "If Organization X is not banned from using Material Z and Material Y is made of Material Z, then Organization X can use Material Y.",
  "FOL": "NotBanned(Organization X, Material Z) ^ MadeOf(Material Y, Material Z) => CanUse(Organization X, Material Y)"
 },
 "386": {
  "NL": "If Organization X was founded in Region Z and Technology Y was imported to Region Z, then Organization X can access Technology Y.",
  "FOL": "FoundedIn(Organization X, Region Z) ^ ImportedTo(Technology Y, Region Z) => CanAccess(Organization X, Technology Y)"
 },
 "387": {
  "NL": "If Organization X uses Technology Z and Platform Y is compatible with Technology Z, then Organization X can access Platform Y.",
  "FOL": "UseTechnology(Organization X, Technology Z) ^ Compatible(Platform Y, Technology Z) => CanAccess(Organization X, Platform Y)"
 },
 "388": {
  "NL": "If Organization X studies Disease Z1 and Disease Y is caused by Disease Z1, then Organization X can access information about Disease Y.",
  "FOL": "Study(Organization X, Disease Z1) ^ CausedBy(Disease Y, Disease Z1) => CanAccess(Organization X, Disease Y)"
 },
 "389": {
  "NL": "If Technology X is designed for Material Z and Material Y is made of Material Z, then Technology X can be used with Material Y.",
  "FOL": "DesignedFor(Technology X, Material Z) ^ MadeOf(Material Y, Material Z) => CanUse(Technology X, Material Y)"
 },
 "390": {
  "NL": "If Technology X supports Platform Z and Game Y is ported to Platform Z, then Technology X can access Game Y.",
  "FOL": "Supports(Technology X, Platform Z) ^ PortedTo(Game Y, Platform Z) => CanAccess(Technology X, Game Y)"
 },
 "391": {
  "NL": "If Game Y is compatible with Platform Z and Electronic Device X can run on Platform Z, then Electronic Device X can play Game Y.",
  "FOL": "CompatibleWith(Game Y, Platform Z) ^ RunOn(Electronic Device X, Platform Z) => CanPlay(Electronic Device X, Game Y)"
 },
 "392": {
  "NL": "If Electronic Device X is equipped with Technology Z and Technology Z is updated for Disease Y, then Electronic Device X can access information about Disease Y.",
  "FOL": "EquippedWith(Electronic Device X, Technology Z) ^ UpdatedFor(Technology Z, Disease Y) => CanAccess(Electronic Device X, Disease Y)"
 },
 "393": {
  "NL": "If Electronic Device X has been upgraded with Technology Z and Artwork Y requires Technology Z, then Electronic Device X can access Artwork Y.",
  "FOL": "UpgradedWith(Electronic Device X, Technology Z) ^ RequiredBy(Artwork Y, Technology Z) => CanAccess(Electronic Device X, Artwork Y)"
 },
 "394": {
  "NL": "If Electronic Device X is installed with Technology Z and Technology Z is required by Artwork Y, then Electronic Device X can access Artwork Y.",
  "FOL": "InstalledWith(Electronic Device X, Technology Z) ^ RequiredBy(Artwork Y, Technology Z) => CanAccess(Electronic Device X, Artwork Y)"
 },
 "395": {
  "NL": "If Electronic Device X supports Platform Z and Financial Product Y is offered on Platform Z, then Electronic Device X can access Financial Product Y.",
  "FOL": "Supports(Electronic Device X, Platform Z) ^ OfferedOn(Platform Z, Financial Product Y) => CanAccess(Electronic Device X, Financial Product Y)"
 },
 "396": {
  "NL": "If Substance X is grown in Region Z1 and Region Z1 is able to transport to Facility Y, then Substance X can access Facility Y.",
  "FOL": "GrownIn(Substance X, Region Z1) ^ TransportTo(Region Z1, Facility Y) => CanAccess(Substance X, Facility Y)"
 },
 "397": {
  "NL": "If Drug X is delivered to Facility Z1 and Facility Y is located in Facility Z1, then Drug X can be accessed at Facility Y.",
  "FOL": "DeliveredTo(Drug X, Facility Z1) ^ LocatedIn(Facility Y, Facility Z1) => CanAccess(Drug X, Facility Y)"
 },
 "398": {
  "NL": "If Substance X is legal under Material Z and Material Z is regulated by Legislation Y, then Substance X can be accessed under Legislation Y.",
  "FOL": "Legal(Substance X, Material Z) ^ Regulate(Material Z, Legislation Y) => CanAccess(Substance X, Legislation Y)"
 },
 "399": {
  "NL": "If Facility X is located in Region Z and Natural Place Y is formed in Region Z, then Facility X can access Natural Place Y.",
  "FOL": "LocatedIn(Facility X, Region Z) ^ FormedIn(Natural Place Y, Region Z) => CanAccess(Facility X, Natural Place Y)"
 },
 "400": {
  "NL": "If Facility X is located in Region Z and Material Y is imported to Region Z, then Facility X can use Material Y.",
  "FOL": "LocatedIn(Facility X, Region Z) ^ ImportedTo(Material Y, Region Z) => CanUse(Facility X, Material Y)"
 },
 "401": {
  "NL": "If Facility X has no ban on Substance Z and Material Y contains Substance Z, then Facility X can access Material Y.",
  "FOL": "NoBan(Facility X, Substance Z) ^ Contain(Material Y, Substance Z) => CanAccess(Facility X, Material Y)"
 },
 "402": {
  "NL": "If Facility X is permitted to handle Substance Z and Material Y contains Substance Z, then Facility X can access Material Y.",
  "FOL": "Permitted(Facility X, Substance Z) ^ Contain(Material Y, Substance Z) => CanAccess(Facility X, Material Y)"
 },
 "403": {
  "NL": "If Facility X operates in Time Period Z1 and Alcohol Y is not banned during Time Period Z1, then Facility X can access Alcohol Y.",
  "FOL": "OperateIn(Facility X, Time Period Z1) ^ NotBannedDuring(Alcohol Y, Time Period Z1) => CanAccess(Facility X, Alcohol Y)"
 },
 "404": {
  "NL": "If Animal Z lives in Natural Place X and Animal Z is a carrier of Disease Y, then Disease Y can access Natural Place X.",
  "FOL": "LiveIn(Animal Z, Natural Place X) ^ CarrierOf(Animal Z, Disease Y) => CanAccess(Natural Place X, Disease Y)"
 },
 "405": {
  "NL": "If Natural Place X is the location of Event Z and Job Y requires participation in Event Z, then Job Y can access Natural Place X.",
  "FOL": "LocatedIn(Natural Place X, Event Z) ^ RequiredIn(Job Y, Event Z) => CanAccess(Natural Place X, Job Y)"
 },
 "406": {
  "NL": "If Natural Place X has features that can host Event Z and Event Z is organized by Job Y, then Job Y can work in Natural Place X.",
  "FOL": "HasFeatures(Natural Place X, Event Z) ^ Organize(Event Z, Job Y) => CanWorkIn(Job Y, Natural Place X)"
 },
 "407": {
  "NL": "If Material X is safe for Condition Z2 and Condition Z2 is required in Job Y, then Material X can be used for Job Y.",
  "FOL": "SafeFor(Material X, Condition Z2) ^ RequiredIn(Job Y, Condition Z2) => CanUse(Material X, Job Y)"
 },
 "408": {
  "NL": "If Material X is located in Region Z and Legislation Y is adopted from Region Z, then Material X is governed by Legislation Y.",
  "FOL": "LocatedIn(Material X, Region Z) ^ AdoptedFrom(Region Z, Legislation Y) => GovernedBy(Material X, Legislation Y)"
 },
 "409": {
  "NL": "If Natural Phenomenon X occurs in Region Z and Food Y is cultivated in Region Z, then Natural Phenomenon X affects the growth of Food Y.",
  "FOL": "CausedBy(Natural Phenomenon X, Region Z) ^ CultivatedIn(Food Y, Region Z) => AffectsGrowth(Natural Phenomenon X, Food Y)"
 },
 "410": {
  "NL": "If Game Y has been updated for Platform Z and Platform X is a version of Platform Z, then Platform X can access Game Y.",
  "FOL": "UpdatedFor(Game Y, Platform Z) ^ VersionOf(Platform X, Platform Z) => CanAccess(Platform X, Game Y)"
 },
 "411": {
  "NL": "If Tool X is resistant to Condition Z and Natural Place Y has Condition Z, then Tool X can be used to explore Natural Place Y.",
  "FOL": "ResistantTo(Tool X, Condition Z) ^ HasCondition(Natural Place Y, Condition Z) => CanExplore(Tool X, Natural Place Y)"
 },
 "412": {
  "NL": "If Platform X is established in Region Z2 and Show Y is broadcasted in Region Z2, then Platform X can access Show Y.",
  "FOL": "Established(Platform X, Region Z2) ^ BroadcastIn(Show Y, Region Z2) => CanAccess(Platform X, Show Y)"
 },
 "413": {
  "NL": "If Disease X is caused by Substance Z and Food Y contains Substance Z, then there is a risk of Disease X from Food Y.",
  "FOL": "CausedBy(Disease X, Substance Z) ^ Contain(Food Y, Substance Z) => RiskOfDisease(Disease X, Food Y)"
 },
 "414": {
  "NL": "If Disease X is caused by Substance Z and Food Y contains Substance Z, then individuals with Disease X should avoid Food Y.",
  "FOL": "CausedBy(Disease X, Substance Z) ^ Contain(Food Y, Substance Z) => AvoidFood(Disease X, Food Y)"
 },
 "415": {
  "NL": "If Tool X is not damaged by Material Z and Material Y is made of Material Z, then Tool X can work with Material Y.",
  "FOL": "NotDamagedBy(Tool X, Material Z) ^ MadeOf(Material Y, Material Z) => CanWorkWith(Tool X, Material Y)"
 },
 "416": {
  "NL": "If Job X is located in Region Z1 and Alcohol Y is popular in Region Z1, then individuals with Job X can access Alcohol Y.",
  "FOL": "JobIn(Job X, Region Z1) ^ Popular(Alcohol Y, Region Z1) => CanAccess(Job X, Alcohol Y)"
 },
 "417": {
  "NL": "If Tool X is updated for Technology Z and Technology Z is supported by Platform Y, then Tool X can access Platform Y.",
  "FOL": "UpdatedFor(Tool X, Technology Z) ^ Support(Technology Z, Platform Y) => CanAccess(Tool X, Platform Y)"
 },
 "418": {
  "NL": "If Job X starts during Time Period Z1 and Food Y is available during Time Period Z1, then someone with Job X can access Food Y.",
  "FOL": "Start(Job X, Time Period Z1) ^ FoodAvailableDuring(Food Y, Time Period Z1) => CanAccess(Job X, Food Y)"
 },
 "419": {
  "NL": "If Job X is not restricted from accessing Food Z and Food Y is derived from Food Z, then Job X can access Food Y.",
  "FOL": "JobNotRestricted(Job X, Food Z) ^ DerivedFrom(Food Z, Food Y) => CanAccess(Job X, Food Y)"
 },
 "420": {
  "NL": "If Tool X is designed for Technology Z and Technology Z is developed for Platform Y, then Tool X is compatible with Platform Y.",
  "FOL": "DesignedFor(Tool X, Technology Z) ^ Developed_For(Technology Z, Platform Y) => CompatibleWith(Tool X, Platform Y)"
 },
 "421": {
  "NL": "If Tool X is designed for Condition Z1 and Job Y is conducted in Condition Z1, then Tool X can access Job Y.",
  "FOL": "DesignedFor(Tool X, Condition Z1) ^ ConductIn(Job Y, Condition Z1) => CanAccess(Tool X, Job Y)"
 },
 "422": {
  "NL": "If Tool X is designed for Food Z and Food Z is composed of Food Y, then Tool X can access Food Y.",
  "FOL": "DesignedFor(Tool X, Food Z) ^ ComposedOf(Food Z, Food Z) => CanAccess(Tool X, Food Y)"
 },
 "423": {
  "NL": "If Tool X is approved for Material Z and Food Y is packaged in Material Z, then Tool X can access Food Y.",
  "FOL": "ApprovedFor(Tool X, Material Z) ^ PackagedIn(Food Y, Material Z) => CanAccess(Tool X, Food Y)"
 },
 "424": {
  "NL": "If Person X was born at Facility Z and Facility Z was built in Region Y, then Person X was born in Region Y.",
  "FOL": "BornAt(Person X, Facility Z) ^ BuiltIn(Facility Z, Region Y) => BornIn(Person X, Region Y)"
 },
 "425": {
  "NL": "If Animal X has migrated to Natural Place Z and Natural Place Z exists in Region Y, then Animal X can be found in Region Y.",
  "FOL": "MigratedTo(Animal X, Natural Place Z) ^ ExistsIn(Natural Place Z, Region Y) => FoundIn(Animal X, Region Y)"
 },
 "426": {
  "NL": "If Drug X is shipped from Facility Z and Facility Z is located in Region Y, then the origin of Drug X is Region Y.",
  "FOL": "ShippedFrom(Drug X, Facility Z) ^ LocatedIn(Facility Z, Region Y) => OriginOfDrug(Drug X, Region Y)"
 },
 "427": {
  "NL": "If Drug X is sold in Facility Z and Facility Z is built in Region Y, then Drug X is available in Region Y.",
  "FOL": "SoldIn(Drug X, Facility Z) ^ BuiltIn(Facility Z, Region Y) => AvailableIn(Drug X, Region Y)"
 },
 "428": {
  "NL": "If Drug X is prescribed at Facility Z and Facility Z is established in Region Y, then Drug X can be purchased in Region Y.",
  "FOL": "PrescribedAt(Drug X, Facility Z) ^ EstablishedIn(Facility Z, Region Y) => CanPurchase(Drug X, Region Y)"
 },
 "429": {
  "NL": "If Animal X inhabits Natural Place Z and Natural Place Z is located in Region Y, then Animal X is adapted to Region Y.",
  "FOL": "HabitatsIn(Animal X, Natural Place Z) ^ LocatedIn(Natural Place Z, Region Y) => AdaptedTo(Animal X, Region Y)"
 },
 "430": {
  "NL": "If Condition X occurs in Natural Place Z and Natural Place Z is part of Region Y, then Condition X is observed in Region Y.",
  "FOL": "Occur(Condition X, Natural Place Z) ^ PartOf(Natural Place Z, Region Y) => ObservedIn(Condition X, Region Y)"
 },
 "431": {
  "NL": "If Material X is extracted from Natural Place Z and Natural Place Z exists in Region Y, then Material X is produced in Region Y.",
  "FOL": "ExtractedFrom(Material X, Natural Place Z) ^ ExistsIn(Natural Place Z, Region Y) => ProducedIn(Material X, Region Y)"
 },
 "432": {
  "NL": "If Substance X is mined from Natural Place Z and Natural Place Z is located in Region Y, then Substance X can be found in Region Y.",
  "FOL": "Mined(Substance X, Natural Place Z) ^ LocatedIn(Natural Place Z, Region Y) => FoundIn(Substance X, Region Y)"
 },
 "433": {
  "NL": "If Substance X is extracted in Facility Z and Facility Z is moved to Region Y, then Substance X is available in Region Y.",
  "FOL": "ExtractedIn(Substance X, Facility Z) ^ MovedTo(Facility Z, Region Y) => AvailableIn(Substance X, Region Y)"
 },
 "434": {
  "NL": "If Substance X grows in Natural Place Z and Natural Place Z is formed in Region Y, then Region Y has Resource Substance X.",
  "FOL": "Grows(Substance X, Natural Place Z) ^ FormedIn(Natural Place Z, Region Y) => HasResource(Region Y, Substance X)"
 },
 "435": {
  "NL": "If Furniture X is sold by Organization Z and Organization Z operates in Region Y, then Furniture X is sold in Region Y.",
  "FOL": "SoldBy(Organization Z, Furniture X) ^ OperatesIn(Organization Z, Region Y) => SoldIn(Furniture X, Region Y)"
 },
 "436": {
  "NL": "If Event X is organized at Facility Z and Facility Z is located in Region Y, then Event X is held in Region Y.",
  "FOL": "OrganizedAt(Event X, Facility Z) ^ LocatedIn(Facility Z, Region Y) => HeldIn(Event X, Region Y)"
 },
 "437": {
  "NL": "If Show X is aired on Platform Z and Platform Z is supported in Region Y, then Show X can be broadcasted in Region Y.",
  "FOL": "AiredOn(Show X, Platform Z) ^ SupportedIn(Platform Z, Region Y) => BroadcastIn(Show X, Region Y)"
 },
 "438": {
  "NL": "If Show X is licensed to Platform Z and Platform Z is available in Region Y, then Show X can be shown in Region Y.",
  "FOL": "LicensedTo(Show X, Platform Z) ^ AvailableIn(Platform Z, Region Y) => ShownIn(Show X, Region Y)"
 },
 "439": {
  "NL": "If Artwork X has been exhibited at Facility Z and Facility Z is established in Region Y, then Artwork X is known in Region Y.",
  "FOL": "ExhibitedAt(Artwork X, Facility Z) ^ EstablishedIn(Facility Z, Region Y) => KnownInRegion(Artwork X, Region Y)"
 },
 "440": {
  "NL": "If Job X requires Skill Z and Skill Z is not practiced in Region Y, then Job X is scarce in Region Y.",
  "FOL": "RequiresSkill(Job X, Skill Z) ^ NotPracticed(Skill Z, Region Y) => ScarceIn(Job X, Region Y)"
 },
 "441": {
  "NL": "If Game X violates Legislation Z and Legislation Z is enforced in Region Y, then Game X cannot be played in Region Y.",
  "FOL": "ViolatesLegislation(Game X, Legislation Z) ^ EnforcedIn(Legislation Z, Region Y) => CannotPlay(Game X, Region Y)"
 },
 "442": {
  "NL": "If Technology X was invented in Facility Z and Facility Z is located in Region Y, then Technology X originates from Region Y.",
  "FOL": "InventedIn(Technology X, Facility Z) ^ LocatedIn(Facility Z, Region Y) => OriginatesFrom(Technology X, Region Y)"
 },
 "443": {
  "NL": "If Technology X is required by Organization Z and Organization Z is located in Region Y, then Technology X is accessible in Region Y.",
  "FOL": "RequiredBy(Technology X, Organization Z) ^ LocatedIn(Organization Z, Region Y) => AccessibleIn(Technology X, Region Y)"
 },
 "444": {
  "NL": "If Alcohol X is distilled in Facility Z and Facility Z is located in Region Y, then Alcohol X is brewed in Region Y.",
  "FOL": "DistilledIn(Alcohol X, Facility Z) ^ LocatedIn(Facility Z, Region Y) => BrewedIn(Alcohol X, Region Y)"
 },
 "445": {
  "NL": "If Alcohol X is illegal in Region Z1 and Region Z1 is part of Region Y, then Alcohol X is restricted in Region Y.",
  "FOL": "Illegal(Substance X, Region Z1) ^ PartOf(Region Z1, Region Y) => RestrictedIn(Alcohol X, Region Y)"
 },
 "446": {
  "NL": "If Alcohol X is illegal in Region Z1 and Region Y is a subregion of Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "FOL": "Illegal(Substance X, Region Z1) ^ Subregion(Region Z1, Region Y) => CannotPurchase(Alcohol X, Region Y)"
 },
 "447": {
  "NL": "If Plant X is planted in Facility Z and Facility Z is located in Region Y, then Plant X grows in Region Y.",
  "FOL": "PlantedIn(Plant X, Facility Z) ^ LocatedIn(Facility Z, Region Y) => GrowsIn(Plant X, Region Y)"
 },
 "448": {
  "NL": "If Region Y has a SocioEconomic Condition Z and this Condition Z leads to Natural Phenomenon X, then the Region Y is familiar with Natural Phenomenon X.",
  "FOL": "SocioEconomicCondition(Region Y, Condition Z) ^ LeadsTo(Condition Z, Natural Phenomenon X) => FamiliarWith(Natural Phenomenon X, Region Y)"
 },
 "449": {
  "NL": "If Facility X has moved to Region Z and Region Z belongs to Region Y, then Facility X operates in Region Y.",
  "FOL": "MovedTo(Facility X, Region Z) ^ BelongsTo(Region Z, Region Y) => OperatesIn(Facility X, Region Y)"
 },
 "450": {
  "NL": "If Facility X is located in Region Z and Region Z belongs to Region Y, then Facility X is subject to the laws of Region Y.",
  "FOL": "LocatedIn(Facility X, Region Z) ^ BelongsTo(Region Z, Region Y) => SubjectToLaws(Facility X, Region Y)"
 },
 "451": {
  "NL": "If Platform X operates in Region Z and Region Z is governed by Region Y, then Platform X must follow the laws of Region Y.",
  "FOL": "OperatesIn(Platform X, Region Z) ^ GovernedBy(Region Z, Region Y) => MustFollowLaws(Platform X, Region Y)"
 },
 "452": {
  "NL": "If Financial Product X is provided by Facility Z and Facility Z operates in Region Y, then Financial Product X is available in Region Y.",
  "FOL": "ProvidedBy(Facility Z, Financial Product X) ^ OperatesIn(Facility Z, Region Y) => AvailableIn(Financial Product X, Region Y)"
 },
 "453": {
  "NL": "If Skill X is necessary for Job Z and Job Z is popular in Region Y, then Skill X is valued in Region Y.",
  "FOL": "NecessaryFor(Job Z, Skill X) ^ PopularIn(Job Z, Region Y) => ValuedIn(Skill X, Region Y)"
 },
 "454": {
  "NL": "If Authorization X is issued in Region Z and Region Y is a territory of Region Z, then Authorization X is legal in Region Y.",
  "FOL": "IssuedIn(Authorization X, Region Z) ^ IsTerritory(Region Z, Region Y) => LegalInRegion(Authorization X, Region Y)"
 },
 "455": {
  "NL": "If Region Y controls Event Z and Event Z requires Authorization X, then Authorization X is valid in Region Y.",
  "FOL": "Controls(Region Y, Event Z) ^ Requires(Event Z, Authorization X) => ValidInRegion(Authorization X, Region Y)"
 },
 "456": {
  "NL": "If Legislation Z1 is adopted by Region Y and Legislation Z1 mandates Authorization X, then Authorization X is required in Region Y.",
  "FOL": "AdoptedBy(Legislation Z1, Region Y) ^ Mandates(Legislation Z1, Authorization X) => RequiredIn(Authorization X, Region Y)"
 },
 "457": {
  "NL": "If Authorization X is valid in Region Z1 and Region Z1 belongs to Region Y, then Authorization X is recognized in Region Y.",
  "FOL": "ValidIn(Authorization X, Region Z1) ^ BelongsTo(Region Z1, Region Y) => RecognizedIn(Authorization X, Region Y)"
 },
 "458": {
  "NL": "If Plant X is grown in Facility Z and Facility Z is built in Region Y, then Plant X can be found in Region Y.",
  "FOL": "GrownIn(Plant X, Facility Z) ^ BuiltIn(Facility Z, Region Y) => FoundIn(Plant X, Region Y)"
 },
 "459": {
  "NL": "If Legislation X is enforced by Facility Z and Facility Z provides service in Region Y, then Region Y must follow Legislation X.",
  "FOL": "EnforcedBy(Legislation X, Facility Z) ^ ProvidesServiceIn(Facility Z, Region Y) => MustFollow(Legislation X, Region Y)"
 },
 "460": {
  "NL": "If Legislation X is passed in Facility Z and Region Y governs Facility Z, then Legislation X influences the law in Region Y.",
  "FOL": "PassedIn(Legislation X, Facility Z) ^ Governs(Region Y, Facility Z) => InfluencesLaw(Legislation X, Region Y)"
 },
 "461": {
  "NL": "If Legislation X applies to Event Z and Event Z happened at Region Y, then Legislation X is regulated in Region Y.",
  "FOL": "AppliesTo(Legislation X, Event Z) ^ HappenedAt(Event Z, Region Y) => RegulatedIn(Legislation X, Region Y)"
 },
 "462": {
  "NL": "If Food X is grown in Facility Z and Facility Z is established in Region Y, then Food X is produced in Region Y.",
  "FOL": "GrownIn(Food X, Facility Z) ^ EstablishedIn(Facility Z, Region Y) => ProducedIn(Food X, Region Y)"
 },
 "463": {
  "NL": "If Food X is manufactured in Facility Z and Facility Z is located in Region Y, then Food X has its origin in Region Y.",
  "FOL": "ManufacturedIn(Food X, Facility Z) ^ LocatedIn(Facility Z, Region Y) => HasOrigin(Food X, Region Y)"
 },
 "464": {
  "NL": "If Food X is made of Substance Z and Substance Z is illegal in Region Y, then Food X is banned in Region Y.",
  "FOL": "MadeOf(Food X, Substance Z) ^ IllegalIn(Substance Z, Region Y) => BannedIn(Food X, Region Y)"
 },
 "465": {
  "NL": "If Food X contains Substance Z and Substance Z is prohibited in Region Y, then Food X cannot be sold in Region Y.",
  "FOL": "Added(Food X, Substance Z) ^ Prohibited(Substance Z, Region Y) => CannotSell(Food X, Region Y)"
 },
 "466": {
  "NL": "If Drug X is approved by Facility Z and Facility Z governs Region Y, then Drug X is legal in Region Y.",
  "FOL": "ApprovedBy(Drug X, Facility Z) ^ Governs(Facility Z, Region Y) => LegalIn(Drug X, Region Y)"
 },
 "467": {
  "NL": "If Person X has lost Tool Z1 and Tool Z1 is required to record Natural Phenomenon Y, then Person X cannot record Natural Phenomenon Y.",
  "FOL": "Lost(Person X, Tool Z1) ^ Require(Tool Z1, Natural Phenomenon Y) => CanNotRecord(Person X, Natural Phenomenon Y)"
 },
 "468": {
  "NL": "If Person X lacks Skill Z2 and Skill Z2 is required to recycle Material Y, then Person X cannot recycle Material Y.",
  "FOL": "Lack(Person X, Skill Z2) ^ Required(Material Y, Skill Z2) => CanNotRecycle(Person X, Material Y)"
 },
 "469": {
  "NL": "If Person X lacks Skill Z1 and Skill Z1 is used for shaping Material Y, then Person X cannot shape Material Y.",
  "FOL": "LackOf(Person X, Skill Z1) ^ Use(Skill Z1, Material Y) => CanNotShape(Person X, Material Y)"
 },
 "470": {
  "NL": "If Person X lacks Skill Z1 and Skill Z1 is needed to sculpt Material Y, then Person X is not a sculptor of Material Y.",
  "FOL": "LackOf(Person X, Skill Z1) ^ Need(Skill Z1, Material Y) => NotASculptor(Person X, Material Y)"
 },
 "471": {
  "NL": "If Person X lacks Tool Z2 and Tool Z2 is used to produce Substance Y, then Person X cannot produce Substance Y.",
  "FOL": "LackOf(Person X, Tool Z2) ^ Use(Tool Z2, Substance Y) => CanNotProduce(Person X, Substance Y)"
 },
 "472": {
  "NL": "If Person X has lost Tool Z1 and Furniture Y requires Tool Z1 for assembly, then Person X cannot assemble Furniture Y.",
  "FOL": "Lost(Person X, Tool Z1) ^ Require(Furniture Y, Tool Z1) => CanNotAssemble(Person X, Furniture Y)"
 },
 "473": {
  "NL": "If Person X lacks Tool Z1 and Furniture Y requires Tool Z1, then Person X needs help with Furniture Y.",
  "FOL": "LackOf(Person X, Tool Z1) ^ Require(Furniture Y, Tool Z1) => NeedsHelp(Person X, Furniture Y)"
 },
 "474": {
  "NL": "If Person X has a fear of Animal Z and Animal Y is an offspring of Animal Z, then Person X cannot ride Animal Y.",
  "FOL": "FearOf(Person X, Animal Z) ^ OffspringOf(Animal Z, Animal Z) => CanNotRide(Person X, Animal Y)"
 },
 "475": {
  "NL": "If Person X is allergic to Substance Z1 and Plant Y produces Substance Z1, then Person X cannot eat Plant Y.",
  "FOL": "AllergicTo(Person X, Substance Z1) ^ Produce(Plant Y, Substance Z1) => CanNotEat(Person X, Plant Y)"
 },
 "476": {
  "NL": "If Show Y requires Skill Z1 and Person X lacks Skill Z1, then Person X cannot participate in Show Y.",
  "FOL": "SkillRequired(Show Y, Skill Z1) ^ Lack(Person X, Skill Z1) => NotInShow(Person X, Show Y)"
 },
 "477": {
  "NL": "If Person X has inherited an allergy to Substance Z1 and Plant Y produces Substance Z1, then Person X avoids food from Plant Y.",
  "FOL": "InheritedAllergy(Person X, Substance Z1) ^ Produce(Plant Y, Substance Z1) => AvoidsFood(Person X, Plant Y)"
 },
 "478": {
  "NL": "If Person X has an allergy to Food Z2 and Plant Y is a type of Food Z2, then Person X cannot eat Plant Y.",
  "FOL": "Allergy(Person X, Food Z2) ^ IsType(Plant Y, Food Z2) => CanNotEat(Person X, Plant Y)"
 },
 "479": {
  "NL": "If Person X lacks Skill Z1 and Tool Y is designed for Skill Z1, then Person X is not a repairman for Tool Y.",
  "FOL": "LackOfSkill(Person X, Skill Z1) ^ DesignedFor(Tool Y, Skill Z1) => NotARepairman(Person X, Tool Y)"
 },
 "480": {
  "NL": "If Person X has an allergy to Food Z2 and Plant Y grows as Food Z2, then Person X requires a special diet excluding Plant Y.",
  "FOL": "Allergy(Person X, Food Z2) ^ GrowsAs(Plant Y, Food Z2) => RequiresSpecialDiet(Person X, Plant Y)"
 },
 "481": {
  "NL": "If Person X has inherited Disease Z2 and Food Y should be avoided by those with Disease Z2, then Person X cannot eat Food Y.",
  "FOL": "Inherit(Person X, Disease Z2) ^ Avoid(Food Y, Disease Z2) => CanNotEat(Person X, Food Y)"
 },
 "482": {
  "NL": "If Person X has Disease Z2 and Food Y poses a risk for Disease Z2, then Person X cannot eat Food Y.",
  "FOL": "Have(Person X, Disease Z2) ^ Risk(Food Y, Disease Z2) => CanNotEat(Person X, Food Y)"
 },
 "483": {
  "NL": "If Person X has a physical condition Z2 and Skill Y is incompatible with Condition Z2, then Person X lacks Skill Y.",
  "FOL": "PhysicalCondition(Person X, Condition Z2) ^ Incompatible(Skill Y, Condition Z2) => LacksSkill(Person X, Skill Y)"
 },
 "484": {
  "NL": "If Person X lacks Skill Z1 and Skill Z1 is needed to cook Food Y, then Person X avoids making Food Y.",
  "FOL": "LackOf(Person X, Skill Z1) ^ Cook(Food Y, Skill Z1) => AvoidsMaking(Person X, Food Y)"
 },
 "485": {
  "NL": "If Person X has a fear of Animal Z1 and Animal Y is of type Animal Z1, then Person X is not an animal trainer for Animal Y.",
  "FOL": "FearOf(Person X, Animal Z1) ^ IsType(Animal Y, Animal Z1) => NotAnimalTrainer(Person X, Animal Y)"
 },
 "486": {
  "NL": "If Person X is denied Authorization Z1 and Disease Y requires Authorization Z1 for research, then Person X cannot research Disease Y.",
  "FOL": "Denied(Person X, Authorization Z1) ^ Require(Disease Y, Authorization Z1) => CanNotResearch(Person X, Disease Y)"
 },
 "487": {
  "NL": "If Person X has lost Tool Z2 and Tool Z2 is required for researching Drug Y, then Person X cannot research Drug Y.",
  "FOL": "Lost(Person X, Tool Z2) ^ Require(Drug Y, Tool Z2) => CanNotResearch(Person X, Drug Y)"
 },
 "488": {
  "NL": "If Person X works in Region Z1 and Drug Y is restricted in Region Z1, then it is illegal for Person X to have Drug Y.",
  "FOL": "WorksIn(Person X, Region Z1) ^ Restricted(Drug Y, Region Z1) => IllegalFor(Person X, Drug Y)"
 },
 "489": {
  "NL": "If Person X is younger than Age Z2 and Drug Y is age-restricted to Age Z2, then Person X cannot access Drug Y.",
  "FOL": "YoungerThan(Person X, Age Z2) ^ AgeRestricted(Drug Y, Age Z2) => CanNotAccess(Person X, Drug Y)"
 },
 "490": {
  "NL": "If Person X is under the age of Z2 and Drug Y is age-restricted to Age Z2, then it is illegal for Person X to use Drug Y.",
  "FOL": "UnderAge(Person X, Age Z2) ^ AgeRestricted(Drug Y, Age Z2) => IllegalFor(Person X, Drug Y)"
 },
 "491": {
  "NL": "If Condition Y is managed by Skill Z and Person X lacks Skill Z, then Person X has restrictions due to Condition Y.",
  "FOL": "Manage(Condition Y, Skill Z) ^ Lack(Person X, Skill Z) => HasRestrictions(Person X, Condition Y)"
 },
 "492": {
  "NL": "If Condition Y requires Skill Z and Person X lacks Skill Z, then Person X needs assistance with Condition Y.",
  "FOL": "Require(Condition Y, Skill Z) ^ Lack(Person X, Skill Z) => NeedsAssistance(Person X, Condition Y)"
 },
 "493": {
  "NL": "If Person X lacks Skill Z which is needed to solve Condition Y, then Person X needs assistance with Condition Y.",
  "FOL": "Solve(Condition Y, Skill Z) ^ Lack(Person X, Skill Z) => NeedsAssistance(Person X, Condition Y)"
 },
 "494": {
  "NL": "If Condition Y requires Time Period Z2 and Person X is busy at Time Period Z2, then Person X cannot access Condition Y.",
  "FOL": "Requires(Condition Y, Time Period Z2) ^ BusyAt(Person X, Time Period Z2) => CanNotAccess(Person X, Condition Y)"
 },
 "495": {
  "NL": "If Person X lives in Region Z1 and Substance Y is banned in Region Z1, then Substance Y is an illegal substance for Person X.",
  "FOL": "LiveIn(Person X, Region Z1) ^ BannedIn(Substance Y, Region Z1) => IllegalSubstance(Person X, Substance Y)"
 },
 "496": {
  "NL": "If Person X has inherited Condition Z and Drug Y can cause Condition Z, then Drug Y is contraindicated for Person X.",
  "FOL": "Inherit(Person X, Condition Z) ^ Cause(Drug Y, Condition Z) => Contraindicated(Person X, Drug Y)"
 },
 "497": {
  "NL": "If Facility Y is available during Time Period Z1 and Person X is unavailable during Time Period Z1, then Person X cannot access Facility Y.",
  "FOL": "Available(Facility Y, Time Period Z1) ^ Unavailable(Person X, Time Period Z1) => CanNotAccess(Person X, Facility Y)"
 },
 "498": {
  "NL": "If Facility Y operates with Skill Z and Person X lacks Skill Z, then Person X lacks permission to operate Facility Y.",
  "FOL": "Operate(Facility Y, Skill Z) ^ Lack(Person X, Skill Z) => LacksPermission(Person X, Facility Y)"
 },
 "499": {
  "NL": "If Person X lacks Skill Z and Skill Z is a standard requirement for Job Y, then Person X cannot access Job Y.",
  "FOL": "Lack(Person X, Skill Z) ^ Standard(Job Y, Skill Z) => CanNotAccess(Person X, Job Y)"
 },
 "500": {
  "NL": "If Person X lacks Skill Z and Skill Z is required for Job Y, then Person X is not employed in Job Y.",
  "FOL": "Lack(Person X, Skill Z) ^ Require(Job Y, Skill Z) => NotEmployedIn(Person X, Job Y)"
 },
 "501": {
  "NL": "If Person X lacks Skill Z and Job Y requires Skill Z, then Person X is ineligible for the position of Job Y.",
  "FOL": "Lack(Person X, Skill Z) ^ Require(Job Y, Skill Z) => IneligibleForPosition(Person X, Job Y)"
 },
 "502": {
  "NL": "If Person X was born with Condition Z and Job Y excludes individuals with Condition Z, then Person X cannot access Job Y.",
  "FOL": "BornWith(Person X, Condition Z) ^ Exclude(Job Y, Condition Z) => CanNotAccess(Person X, Job Y)"
 },
 "503": {
  "NL": "If Person X has developed Condition Z and Condition Z excludes them from Job Y, then Person X cannot access Job Y.",
  "FOL": "Develop(Person X, Condition Z) ^ Exclude(Job Y, Condition Z) => CanNotAccess(Person X, Job Y)"
 },
 "504": {
  "NL": "If Person X has Condition Z and Job Y excludes individuals with Condition Z, then Person X is not employed in Job Y.",
  "FOL": "Have(Person X, Condition Z) ^ Exclude(Job Y, Condition Z) => NotEmployedIn(Person X, Job Y)"
 },
 "506": {
  "NL": "If Person X has inherited Disease Z and Disease Z restricts access to Vehicle Y, then Person X cannot access Vehicle Y.",
  "FOL": "Inherit(Person X, Disease Z) ^ Restrict(Disease Z, Vehicle Y) => CanNotAccess(Person X, Vehicle Y)"
 },
 "507": {
  "NL": "If Person X lacks Skill Z and Skill Z is required to operate Technology Y, then Person X needs training in Technology Y.",
  "FOL": "LackSkill(Person X, Skill Z) ^ Operate(Technology Y, Skill Z) => NeedsTraining(Person X, Technology Y)"
 },
 "508": {
  "NL": "If Person X works in Region Z1 and Platform Y is banned in Region Z1, then Person X cannot access Platform Y.",
  "FOL": "WorksIn(Person X, Region Z1) ^ BannedIn(Platform Y, Region Z1) => CanNotAccess(Person X, Platform Y)"
 },
 "509": {
  "NL": "If Person X rents Electronic Device Z2 and Platform Y is incompatible with Electronic Device Z2, then Person X cannot access Platform Y.",
  "FOL": "Rent(Person X, Electronic Device Z2) ^ IncompatibleWith(Platform Y, Electronic Device Z2) => CanNotAccess(Person X, Platform Y)"
 },
 "510": {
  "NL": "If Person X uses Electronic Device Z2 and Platform Y requires hardware that Electronic Device Z2 lacks, then Person X cannot access Platform Y.",
  "FOL": "Use(Person X, Electronic Device Z2) ^ LacksRequiredHardware(Platform Y, Electronic Device Z2) => CanNotAccess(Person X, Platform Y)"
 },
 "511": {
  "NL": "If Person X lacks Skill Z1 and Skill Z1 is required for accessing Platform Y, then Person X cannot access Platform Y.",
  "FOL": "Lack(Person X, Skill Z1) ^ DevelopedFor(Platform Y, Skill Z1) => CanNotAccess(Person X, Platform Y)"
 },
 "512": {
  "NL": "If Person X lacks Skill Z1 and Skill Z1 is required by Platform Y, then Person X has a restriction on Platform Y.",
  "FOL": "Lack(Person X, Skill Z1) ^ RequiredBy(Platform Y, Skill Z1) => HasRestriction(Person X, Platform Y)"
 },
 "513": {
  "NL": "If Organization X follows Legislation Z2 and Legislation Z2 prohibits Drug Y, then Organization X is not a supplier of Drug Y.",
  "FOL": "Follows(Organization X, Legislation Z2) ^ Prohibits(Legislation Z2, Drug Y) => NotSupplier(Organization X, Drug Y)"
 },
 "514": {
  "NL": "If Vehicle X requires Material Z1 and Platform Y lacks Material Z1, then Vehicle X is not compatible with Platform Y.",
  "FOL": "Require(Vehicle X, Material Z1) ^ Lack(Platform Y, Material Z1) => NotCompatible(Vehicle X, Platform Y)"
 },
 "515": {
  "NL": "If Vehicle X is damaged by Substance Z and Substance Z contains Alcohol Y, then Alcohol Y is not for fueling Vehicle X.",
  "FOL": "Damages(Vehicle X, Substance Z) ^ Contains(Substance Z, Alcohol Y) => NotForFuel(Vehicle X, Alcohol Y)"
 },
 "516": {
  "NL": "If Organization X requires Legislation Z and Substance Y is prohibited by Legislation Z, then Organization X cannot access Substance Y.",
  "FOL": "Required(Organization X, Legislation Z) ^ ProhibitedBy(Substance Y, Legislation Z) => CanNotAccess(Organization X, Substance Y)"
 },
 "517": {
  "NL": "If Event X requires Skill Z and Animal Y lacks Skill Z, then Animal Y is not involved in Event X.",
  "FOL": "Requires(Event X, Skill Z) ^ Lacks(Animal Y, Skill Z) => NotInvolvedIn(Event X, Animal Y)"
 },
 "518": {
  "NL": "If Event X is held in Region Z1 and Drug Y is illegal in Region Z1, then Drug Y cannot be accessed at Event X.",
  "FOL": "HeldIn(Event X, Region Z1) ^ Illegal(Drug Y, Region Z1) => CanNotAccess(Event X, Drug Y)"
 },
 "519": {
  "NL": "If Drug Y requires Authorization Z and Event X lacks Authorization Z, then Event X cannot access Drug Y.",
  "FOL": "Prescription(Drug Y, Authorization Z) ^ Lack(Event X, Authorization Z) => CanNotAccess(Event X, Drug Y)"
 },
 "520": {
  "NL": "If Event X depends on Technology Z and Electronic Device Y lacks Technology Z, then Event X cannot access Electronic Device Y.",
  "FOL": "Depend(Event X, Technology Z) ^ Lack(Electronic Device Y, Technology Z) => CanNotAccess(Event X, Electronic Device Y)"
 },
 "521": {
  "NL": "If Event X requires Condition Z and Substance Y is incompatible with Condition Z, then Event X lacks Substance Y.",
  "FOL": "Requires(Event X, Condition Z) ^ IncompatibleWith(Substance Y, Condition Z) => LacksSubstance(Event X, Substance Y)"
 },
 "522": {
  "NL": "If Condition Z2 facilitates Event X and Plant Y lacks Condition Z2, then Plant Y is not in charge of Event X.",
  "FOL": "Facilitates(Condition Z2, Event X) ^ Lacks(Plant Y, Condition Z2) => NotInCharge(Event X, Plant Y)"
 },
 "523": {
  "NL": "If Event X requires Tool Z and Facility Y lacks Tool Z, then Facility Y is not eligible for Event X.",
  "FOL": "Require(Event X, Tool Z) ^ LackOf(Facility Y, Tool Z) => NotEligibleFor(Event X, Facility Y)"
 },
 "524": {
  "NL": "If Event X is hosted in Facility Z and Natural Place Y lacks Facility Z, then Event X cannot be accessed at Natural Place Y.",
  "FOL": "HostedIn(Event X, Facility Z) ^ LackOf(Natural Place Y, Facility Z) => CanNotAccess(Event X, Natural Place Y)"
 },
 "525": {
  "NL": "If Organization X adopts Legislation Z and Substance Y is banned under Legislation Z, then Organization X lacks permission to use Substance Y.",
  "FOL": "Adopts(Organization X, Legislation Z) ^ Banned(Substance Y, Legislation Z) => LacksPermission(Organization X, Substance Y)"
 },
 "526": {
  "NL": "If Event X happens in Region Z1 and Natural Phenomenon Y is absent in Region Z1, then Event X cannot access Natural Phenomenon Y.",
  "FOL": "HappenIn(Event X, Region Z1) ^ AbsentIn(Natural Phenomenon Y, Region Z1) => CanNotAccess(Event X, Natural Phenomenon Y)"
 },
 "527": {
  "NL": "If Event X is scheduled during Time Period Z2 and Platform Y is offline during Time Period Z2, then Event X cannot be accessed on Platform Y.",
  "FOL": "Scheduled(Event X, Time Period Z2) ^ OfflineDuring(Platform Y, Time Period Z2) => CanNotAccess(Event X, Platform Y)"
 },
 "528": {
  "NL": "If Skill Z1 is necessary for Event X and Job Y lacks Skill Z1, then Job Y is not qualified for Event X.",
  "FOL": "Necessary(Event X, Skill Z1) ^ Lacks(Job Y, Skill Z1) => NotQualifiedFor(Event X, Job Y)"
 },
 "529": {
  "NL": "If Event X happened at Time Period Z2 and Publication Y was written after Time Period Z2, then Event X cannot access Publication Y.",
  "FOL": "HappenedAt(Event X, Time Period Z2) ^ WrittenAfter(Publication Y, Time Period Z2) => CanNotAccess(Event X, Publication Y)"
 },
 "530": {
  "NL": "If Facility Y operates in Time Period Z2 and Organization X is closed during Time Period Z2, then Organization X cannot access Facility Y.",
  "FOL": "OperateIn(Facility Y, Time Period Z2) ^ Closed(Organization X, Time Period Z2) => CanNotAccess(Organization X, Facility Y)"
 },
 "531": {
  "NL": "If Animal X is afraid of Animal Z and Animal Y is the same as Animal Z, then Animal Y is not prey to Animal X.",
  "FOL": "AfraidOf(Animal X, Animal Z) ^ Same(Animal Y, Animal Z) => NotPrey(Animal Y, Animal X)"
 },
 "532": {
  "NL": "If Animal X has migrated to Region Z1 and Drug Y is unavailable in Region Z1, then Animal X cannot access Drug Y.",
  "FOL": "MigratedTo(Animal X, Region Z1) ^ UnavailableIn(Drug Y, Region Z1) => CanNotAccess(Animal X, Drug Y)"
 },
 "533": {
  "NL": "If Drug Y requires Condition Z2 and Animal X lacks Condition Z2, then Animal X is not medicated with Drug Y.",
  "FOL": "Require(Drug Y, Condition Z2) ^ Lack(Animal X, Condition Z2) => NotMedicated(Animal X, Drug Y)"
 },
 "534": {
  "NL": "If Animal X inhabits Region Z1 and Region Z1 is separated from Natural Place Y, then Animal X cannot access Natural Place Y.",
  "FOL": "Inhabit(Animal X, Region Z1) ^ SeparatedBy(Region Z1, Natural Place Y) => CanNotAccess(Animal X, Natural Place Y)"
 },
 "535": {
  "NL": "If Material Y is restricted in Region Z and Organization X is registered in the same Region Z, then Organization X cannot access Material Y.",
  "FOL": "Restricted(Material Y, Region Z) ^ RegisteredIn(Organization X, Region Z) => CanNotAccess(Organization X, Material Y)"
 },
 "536": {
  "NL": "If Animal X is afraid of Event Z and Natural Phenomenon Y triggers Event Z, then Animal X cannot access Natural Phenomenon Y.",
  "FOL": "AfraidOf(Animal X, Event Z) ^ Trigger(Natural Phenomenon Y, Event Z) => CanNotAccess(Animal X, Natural Phenomenon Y)"
 },
 "537": {
  "NL": "If Animal X avoids Substance Z and Substance Z is present in Platform Y, then Animal X cannot access Platform Y.",
  "FOL": "Avoid(Animal X, Substance Z) ^ PresentIn(Platform Y, Substance Z) => CanNotAccess(Animal X, Platform Y)"
 },
 "538": {
  "NL": "If Animal X fears Substance Z and Substance Z has been added to Platform Y, then Animal X cannot access Platform Y.",
  "FOL": "Fear(Animal X, Substance Z) ^ AddedTo(Platform Y, Substance Z) => CanNotAccess(Animal X, Platform Y)"
 },
 "539": {
  "NL": "If Animal X hibernates during Time Period Z1 and Game Y is only playable at Time Period Z1, then Animal X cannot access Game Y.",
  "FOL": "Hibernate(Animal X, Time Period Z1) ^ OnlyPlayableAt(Game Y, Time Period Z1) => CanNotAccess(Animal X, Game Y)"
 },
 "540": {
  "NL": "If Animal X is immune to Disease Z1 and Disease Y is caused by Disease Z1, then Animal X is safe from Disease Y.",
  "FOL": "ImmuneTo(Animal X, Disease Z1) ^ CausedBy(Disease Y, Disease Z1) => SafeFromDisease(Animal X, Disease Y)"
 },
 "541": {
  "NL": "If Animal X has migrated to Region Z2 and Disease Y is absent in Region Z2, then Animal X cannot access Disease Y.",
  "FOL": "MigratedTo(Animal X, Region Z2) ^ AbsentIn(Disease Y, Region Z2) => CanNotAccess(Animal X, Disease Y)"
 },
 "542": {
  "NL": "If Job Y requires Skill Z as a standard and Animal X lacks Skill Z, then Animal X cannot access Job Y.",
  "FOL": "Standard(Job Y, Skill Z) ^ Lack(Animal X, Skill Z) => CanNotAccess(Animal X, Job Y)"
 },
 "543": {
  "NL": "If Animal X existed in Time Period Z2 and Publication Y was published after Time Period Z2, then Animal X cannot access Publication Y.",
  "FOL": "ExistedIn(Animal X, Time Period Z2) ^ PublishedAfter(Publication Y, Time Period Z2) => CanNotAccess(Animal X, Publication Y)"
 },
 "544": {
  "NL": "If Technology X damages Substance Z and Drug Y is made of Substance Z, then Technology X is not compatible with Drug Y.",
  "FOL": "Damages(Technology X, Substance Z) ^ MadeOf(Drug Y, Substance Z) => NotCompatible(Technology X, Drug Y)"
 },
 "545": {
  "NL": "If Organization X is active during Time Period Z2 and Platform Y is unavailable during the same Time Period Z2, then Organization X cannot access Platform Y.",
  "FOL": "ActiveIn(Organization X, Time Period Z2) ^ UnavailableDuring(Platform Y, Time Period Z2) => CanNotAccess(Organization X, Platform Y)"
 },
 "546": {
  "NL": "If Technology X is designed for Condition Z2 and Tool Y damages Condition Z2, then Technology X is incompatible with Tool Y.",
  "FOL": "DesignedFor(Technology X, Condition Z2) ^ Damages(Tool Y, Condition Z2) => Incompatible(Technology X, Tool Y)"
 },
 "547": {
  "NL": "If Technology X operates in Condition Z and Substance Y interferes with Condition Z, then Technology X cannot access Substance Y.",
  "FOL": "OperateIn(Technology X, Condition Z) ^ InterfereWith(Substance Y, Condition Z) => CanNotAccess(Technology X, Substance Y)"
 },
 "548": {
  "NL": "If Technology X is made of Material Z1 and Substance Y removes Material Z1, then Technology X is incompatible with Substance Y.",
  "FOL": "MadeOf(Technology X, Material Z1) ^ Removed(Substance Y, Material Z1) => IncompatibleWith(Technology X, Substance Y)"
 },
 "549": {
  "NL": "If Technology X requires Condition Z1 and Plant Y is deprived of Condition Z1, then Technology X cannot access Plant Y.",
  "FOL": "Require(Technology X, Condition Z1) ^ Deprived(Plant Y, Condition Z1) => CanNotAccess(Technology X, Plant Y)"
 },
 "550": {
  "NL": "If Technology X requires Condition Z and Material Y has an expired Condition Z, then Technology X cannot access Material Y.",
  "FOL": "Require(Technology X, Condition Z) ^ Expired(Material Y, Condition Z) => CanNotAccess(Technology X, Material Y)"
 },
 "551": {
  "NL": "If Technology X is designed for Condition Z1 and Condition Z1 is absent during Natural Phenomenon Y, then Technology X cannot access Natural Phenomenon Y.",
  "FOL": "DesignedFor(Technology X, Condition Z1) ^ AbsentDuring(Natural Phenomenon Y, Condition Z1) => CanNotAccess(Technology X, Natural Phenomenon Y)"
 },
 "552": {
  "NL": "If Technology X operates in Condition Z1 and Natural Phenomenon Y prevents Condition Z1, then Technology X cannot access Natural Phenomenon Y.",
  "FOL": "OperateIn(Technology X, Condition Z1) ^ Prevents(Natural Phenomenon Y, Condition Z1) => CanNotAccess(Technology X, Natural Phenomenon Y)"
 },
 "553": {
  "NL": "If Artwork Y requires Material Z1 and Technology X lacks Material Z1, then Artwork Y is not digitized by Technology X.",
  "FOL": "Require(Artwork Y, Material Z1) ^ Lack(Material Z1, Technology X) => NotDigitized(Artwork Y, Technology X)"
 },
 "554": {
  "NL": "If Job Y is adapted to Condition Z1 and Technology X causes an error under Condition Z1, then Technology X is limited in Job Y.",
  "FOL": "Adapted(Job Y, Condition Z1) ^ CausesError(Technology X, Condition Z1) => LimitedInJob(Technology X, Job Y)"
 },
 "555": {
  "NL": "If Technology X functions with Natural Phenomenon Z and Publication Y lacks Natural Phenomenon Z, then Technology X cannot access Publication Y.",
  "FOL": "FunctionWith(Technology X, Natural Phenomenon Z) ^ Lack(Publication Y, Natural Phenomenon Z) => CanNotAccess(Technology X, Publication Y)"
 },
 "556": {
  "NL": "If Organization X adheres to Legislation Z and Game Y is illegal under Legislation Z, then Organization X cannot access Game Y.",
  "FOL": "AdheresTo(Organization X, Legislation Z) ^ Illegal(Game Y, Legislation Z) => CanNotAccess(Organization X, Game Y)"
 },
 "557": {
  "NL": "If Plant Y is native to Region Z2 and Drug X is unavailable in Region Z2, then Drug X cannot be accessed from Plant Y.",
  "FOL": "NativeTo(Plant Y, Region Z2) ^ UnavailableIn(Region Z2, Drug X) => CanNotAccess(Drug X, Plant Y)"
 },
 "558": {
  "NL": "If Drug X requires Tool Z and Facility Y has lost Tool Z, then Facility Y cannot access Drug X.",
  "FOL": "Requires(Drug X, Tool Z) ^ Lost(Facility Y, Tool Z) => CanNotAccess(Drug X, Facility Y)"
 },
 "559": {
  "NL": "If Drug X requires Tool Z and Facility Y lacks Tool Z, then Drug X is not available at Facility Y.",
  "FOL": "Requires(Drug X, Tool Z) ^ Lacks(Facility Y, Tool Z) => NotAvailable(Drug X, Facility Y)"
 },
 "560": {
  "NL": "If Drug X grows in Region Z1 and Natural Place Y is in a different region than Region Z1, then Drug X is not local to Natural Place Y.",
  "FOL": "GrowsIn(Drug X, Region Z1) ^ DifferentRegion(Natural Place Y, Region Z1) => NotLocal(Drug X, Natural Place Y)"
 },
 "561": {
  "NL": "If Drug X requires Condition Z2 and Material Y is absent in Condition Z2, then Drug X is not produced from Material Y.",
  "FOL": "Require(Drug X, Condition Z2) ^ Absent(Material Y, Condition Z2) => NotProducedFrom(Drug X, Material Y)"
 },
 "562": {
  "NL": "If Drug X is distributed through Technology Z and Platform Y lacks Technology Z, then Platform Y cannot access Drug X.",
  "FOL": "Distribute(Drug X, Technology Z) ^ Lack(Platform Y, Technology Z) => CanNotAccess(Drug X, Platform Y)"
 },
 "563": {
  "NL": "If Drug X is illegal in Region Z2 and Disease Y is prevalent in Region Z2, then Drug X cannot be accessed for Disease Y.",
  "FOL": "Illegal(Drug X, Region Z2) ^ PrevalentIn(Disease Y, Region Z2) => CanNotAccess(Drug X, Disease Y)"
 },
 "564": {
  "NL": "If Financial Product Y has a legal requirement of Authorization Z and Organization X lacks Authorization Z, then Organization X cannot access Financial Product Y.",
  "FOL": "LegalRequirement(Financial Product Y, Authorization Z) ^ Lack(Organization X, Authorization Z) => CanNotAccess(Organization X, Financial Product Y)"
 },
 "565": {
  "NL": "If Drug X treats Disease Z1 and Alcohol Y aggravates Disease Z1, then Drug X cannot be accessed with Alcohol Y.",
  "FOL": "Treats(Drug X, Disease Z1) ^ Aggravate(Alcohol Y, Disease Z1) => CanNotAccess(Drug X, Alcohol Y)"
 },
 "566": {
  "NL": "If Organization X requires Legislation Z2 and Legislation Z2 prohibits Drug Y, then Organization X cannot access Drug Y.",
  "FOL": "Required(Organization X, Legislation Z2) ^ Prohibits(Legislation Z2, Drug Y) => CanNotAccess(Organization X, Drug Y)"
 },
 "567": {
  "NL": "If Financial Product Y requires Authorization Z and Organization X lacks Authorization Z, then Organization X is not eligible for Financial Product Y.",
  "FOL": "Require(Financial Product Y, Authorization Z) ^ Lack(Organization X, Authorization Z) => NotEligible(Organization X, Financial Product Y)"
 },
 "568": {
  "NL": "If Vehicle X operates in Condition Z1 and Tool Y is unsafe in Condition Z1, then Tool Y cannot access Vehicle X.",
  "FOL": "OperateIn(Vehicle X, Condition Z1) ^ Unsafe(Tool Y, Condition Z1) => CanNotAccess(Vehicle X, Tool Y)"
 },
 "569": {
  "NL": "If Vehicle X exceeds Size Z1 and Facility Y is smaller than Size Z1, then Vehicle X cannot access Facility Y.",
  "FOL": "ExceedsLimit(Vehicle X, Size Z1) ^ SmallerThan(Facility Y, Size Z1) => CanNotAccess(Vehicle X, Facility Y)"
 },
 "570": {
  "NL": "If Vehicle X requires Condition Z1 and Material Y damages Condition Z1, then Vehicle X is not fueled by Material Y.",
  "FOL": "Require(Vehicle X, Condition Z1) ^ Damage(Material Y, Condition Z1) => NotFueledBy(Vehicle X, Material Y)"
 },
 "571": {
  "NL": "If Job Y requires Condition Z and Natural Phenomenon X lacks Condition Z, then Natural Phenomenon X is not required in Job Y.",
  "FOL": "Necessary(Job Y, Condition Z) ^ Lack(Natural Phenomenon X, Condition Z) => NotRequiredInJob(Natural Phenomenon X, Job Y)"
 },
 "572": {
  "NL": "If Platform X is built with Technology Z2 and Game Y lacks Technology Z2, then Game Y cannot be accessed on Platform X.",
  "FOL": "Built_With(Platform X, Technology Z2) ^ LackIn(Game Y, Technology Z2) => CanNotAccess(Platform X, Game Y)"
 },
 "573": {
  "NL": "If Job Y is assigned to Region Z1 and Platform X is unavailable in Region Z1, then Job Y cannot access Platform X.",
  "FOL": "Assigned(Job Y, Region Z1) ^ UnavailableIn(Platform X, Region Z1) => CanNotAccess(Platform X, Job Y)"
 },
 "574": {
  "NL": "If Platform X is secured by Authorization Z and Alcohol Y lacks Authorization Z, then Alcohol Y cannot be accessed on Platform X.",
  "FOL": "Secure(Platform X, Authorization Z) ^ Lack(Alcohol Y, Authorization Z) => CanNotAccess(Platform X, Alcohol Y)"
 },
 "575": {
  "NL": "If Game Y needs Skill Z2 and Game X lacks Skill Z2, then Game X is not compatible with Game Y.",
  "FOL": "Needs(Game Y, Skill Z2) ^ Lacks(Game X, Skill Z2) => NotCompatible(Game X, Game Y)"
 },
 "576": {
  "NL": "If Game X requires Skill Z and Disease Y impairs Skill Z, then Game X is not suitable for someone with Disease Y.",
  "FOL": "Requires(Game X, Skill Z) ^ ImpairedBy(Disease Y, Skill Z) => NotSuitableFor(Game X, Disease Y)"
 },
 "577": {
  "NL": "If Game X requires Tool Z1 and Tool Z1 is unavailable for Job Y, then Job Y cannot access Game X.",
  "FOL": "Require(Game X, Tool Z1) ^ Unavailable(Job Y, Tool Z1) => CanNotAccess(Game X, Job Y)"
 },
 "578": {
  "NL": "If Game X is played with Tool Z and Food Y lacks Tool Z, then Game X is not designed for Food Y.",
  "FOL": "Plays(Game X, Tool Z) ^ Lacks(Food Y, Tool Z) => NotDesignedFor(Game X, Food Y)"
 },
 "579": {
  "NL": "If Job X lacks Authorization Z2 and Authorization Z2 is required to govern Job Y, then Job X cannot access Job Y.",
  "FOL": "Governed(Job Y, Authorization Z2) ^ Lacks(Job X, Authorization Z2) => CanNotAccess(Job X, Job Y)"
 },
 "580": {
  "NL": "If Food Y is ordered for Event Z1 and Alcohol X is prohibited at Event Z1, then Alcohol X cannot be accessed with Food Y.",
  "FOL": "OrderedFor(Food Y, Event Z1) ^ ProhibitedAt(Alcohol X, Event Z1) => CanNotAccess(Alcohol X, Food Y)"
 },
 "581": {
  "NL": "If Show X prohibits Food Z1 and Food Y is made from Food Z1, then Food Y cannot be accessed in Show X.",
  "FOL": "ProhibitedIn(Show X, Food Z1) ^ MadeFrom(Food Z1, Food Z1) => CanNotAccess(Show X, Food Y)"
 },
 "582": {
  "NL": "If Tool X is used under Condition Z1 and Material Y lacks Condition Z1, then Tool X cannot access Material Y.",
  "FOL": "Use(Tool X, Condition Z1) ^ Lack(Material Y, Condition Z1) => CanNotAccess(Tool X, Material Y)"
 },
 "583": {
  "NL": "If Tool X requires Condition Z1 and Condition Z1 is depleted in Material Y, then Tool X cannot access Material Y.",
  "FOL": "Require(Tool X, Condition Z1) ^ Depleted(Material Y, Condition Z1) => CanNotAccess(Tool X, Material Y)"
 },
 "584": {
  "NL": "If Tool X requires Condition Z1 and Material Y lacks Condition Z1, then Tool X is not suitable for the job on Material Y.",
  "FOL": "Require(Tool X, Condition Z1) ^ Lack(Material Y, Condition Z1) => NotSuitableForJob(Tool X, Material Y)"
 },
 "585": {
  "NL": "If Tool X is used under Condition Z2 and Condition Z2 is absent in Natural Phenomenon Y, then Tool X cannot access Natural Phenomenon Y.",
  "FOL": "Use(Tool X, Condition Z2) ^ AbsentIn(Natural Phenomenon Y, Condition Z2) => CanNotAccess(Tool X, Natural Phenomenon Y)"
 },
 "586": {
  "NL": "If Platform Y is built with Technology Z1 and Tool X lacks Technology Z1, then Tool X cannot access Platform Y.",
  "FOL": "Built_With(Platform Y, Technology Z1) ^ Lack(Tool X, Technology Z1) => CanNotAccess(Tool X, Platform Y)"
 },
 "587": {
  "NL": "If Tool X is illegal in Region Z and Financial Product Y is only available in Region Z, then Tool X cannot access Financial Product Y.",
  "FOL": "Illegal(Tool X, Region Z) ^ OnlyAvailableIn(Financial Product Y, Region Z) => CanNotAccess(Tool X, Financial Product Y)"
 },
 "588": {
  "NL": "If Tool X requires Condition Z1 and Food Y lacks Condition Z1, then Tool X is not used for the preparation of Food Y.",
  "FOL": "Requires(Tool X, Condition Z1) ^ Lacks(Food Y, Condition Z1) => NotUsedForPreparation(Tool X, Food Y)"
 },
 "589": {
  "NL": "If Substance Y is harmful to Material Z and Electronic Device X is made of Material Z, then Electronic Device X is incompatible with Substance Y.",
  "FOL": "HarmfulTo(Substance Y, Material Z) ^ MadeOf(Electronic Device X, Material Z) => IncompatibleWith(Electronic Device X, Substance Y)"
 },
 "590": {
  "NL": "If Electronic Device X needs Condition Z1 for power and Plant Y is deprived of Condition Z1, then Electronic Device X is not compatible with Plant Y.",
  "FOL": "NeedPower(Electronic Device X, Condition Z1) ^ Deprived(Plant Y, Condition Z1) => NotCompatible(Electronic Device X, Plant Y)"
 },
 "591": {
  "NL": "If Electronic Device X is tuned to Frequency Z2 and Facility Y blocks Frequency Z2, then Electronic Device X cannot access Facility Y.",
  "FOL": "TunedTo(Electronic Device X, Frequency Z2) ^ Block(Facility Y, Frequency Z2) => CanNotAccess(Electronic Device X, Facility Y)"
 },
 "592": {
  "NL": "If Electronic Device X uses Condition Z1 and Condition Z1 is absent in Facility Y, then Electronic Device X cannot access Facility Y.",
  "FOL": "Use(Electronic Device X, Condition Z1) ^ AbsentIn(Facility Y, Condition Z1) => CanNotAccess(Electronic Device X, Facility Y)"
 },
 "593": {
  "NL": "If Electronic Device X needs Condition Z1 and Facility Y lacks Condition Z1, then Electronic Device X cannot access Facility Y.",
  "FOL": "Need(Electronic Device X, Condition Z1) ^ Lack(Facility Y, Condition Z1) => CanNotAccess(Electronic Device X, Facility Y)"
 },
 "594": {
  "NL": "If Electronic Device X operates in Condition Z1 and Condition Z1 is absent in Natural Place Y, then Electronic Device X is not suitable for Natural Place Y.",
  "FOL": "OperateIn(Electronic Device X, Condition Z1) ^ AbsentIn(Natural Place Y, Condition Z1) => NotSuitableFor(Electronic Device X, Natural Place Y)"
 },
 "595": {
  "NL": "If Game Y is designed for Platform Z and Electronic Device X lacks Platform Z, then Electronic Device X cannot access Game Y.",
  "FOL": "DesignedFor(Game Y, Platform Z) ^ Lacks(Electronic Device X, Platform Z) => CanNotAccess(Electronic Device X, Game Y)"
 },
 "596": {
  "NL": "If Electronic Device X requires Natural Phenomenon Z1 and Disease Y lacks Natural Phenomenon Z1, then Electronic Device X is not suitable for Disease Y.",
  "FOL": "Require(Electronic Device X, Natural Phenomenon Z1) ^ Lack(Disease Y, Natural Phenomenon Z1) => NotSuitable(Electronic Device X, Disease Y)"
 },
 "597": {
  "NL": "If Plant X needs Condition Z1 and Facility Y lacks Condition Z1, then Plant X requires an alternative to Facility Y.",
  "FOL": "Needs(Plant X, Condition Z1) ^ Lacks(Facility Y, Condition Z1) => RequiresAlternative(Plant X, Facility Y)"
 },
 "599": {
  "NL": "If Plant X requires Condition Z and Natural Phenomenon Y prevents Condition Z, then Plant X is vulnerable to Natural Phenomenon Y.",
  "FOL": "Requires(Plant X, Condition Z) ^ Prevents(Natural Phenomenon Y, Condition Z) => VulnerableTo(Plant X, Natural Phenomenon Y)"
 },
 "600": {
  "NL": "If Plant X grows in Condition Z and Platform Y lacks Condition Z, then Plant X cannot access Platform Y.",
  "FOL": "GrowsIn(Plant X, Condition Z) ^ Lacks(Platform Y, Condition Z) => CanNotAccess(Plant X, Platform Y)"
 },
 "601": {
  "NL": "If Plant X grows in Region Z1 and Disease Y is absent in Region Z1, then Plant X is safe from Disease Y.",
  "FOL": "GrowsIn(Plant X, Region Z1) ^ AbsentIn(Disease Y, Region Z1) => SafeFromDisease(Plant X, Disease Y)"
 },
 "602": {
  "NL": "If Plant X grows in Time Period Z2 and Disease Y is dormant during Time Period Z2, then Plant X is safe from Disease Y.",
  "FOL": "GrowsIn(Plant X, Time Period Z2) ^ Dormant(Disease Y, Time Period Z2) => SafeFromDisease(Plant X, Disease Y)"
 },
 "603": {
  "NL": "If Job Y has a standard skill Z and Plant X lacks Skill Z, then Plant X is not suitable for Job Y.",
  "FOL": "StandardIn(Job Y, Skill Z) ^ Lack(Plant X, Skill Z) => NotSuitable(Plant X, Job Y)"
 },
 "604": {
  "NL": "If Artwork Y is preserved under Condition Z and Facility X lacks Condition Z, then Facility X cannot access Artwork Y.",
  "FOL": "Preserved(Artwork Y, Condition Z) ^ Lack(Facility X, Condition Z) => CanNotAccess(Facility X, Artwork Y)"
 },
 "606": {
  "NL": "If Facility X requires Authorization Z and the Authorization Z for Financial Product Y has expired, then Facility X cannot access Financial Product Y.",
  "FOL": "Require(Facility X, Authorization Z) ^ Expired(Financial Product Y, Authorization Z) => CanNotAccess(Facility X, Financial Product Y)"
 },
 "607": {
  "NL": "If Show Y requires Technology Z and Natural Place X lacks Technology Z, then Show Y is not filmed at Natural Place X.",
  "FOL": "Require(Show Y, Technology Z) ^ Lack(Natural Place X, Technology Z) => NotFilmedAt(Show Y, Natural Place X)"
 },
 "608": {
  "NL": "If Material X requires Condition Z1 and Natural Phenomenon Y prevents Condition Z1, then Material X cannot be accessed during Natural Phenomenon Y.",
  "FOL": "Require(Material X, Condition Z1) ^ Prevents(Natural Phenomenon Y, Condition Z1) => CanNotAccess(Material X, Natural Phenomenon Y)"
 },
 "609": {
  "NL": "If Material X is grown in Region Z1 and Disease Y is absent in Region Z1, then Disease Y cannot access Material X.",
  "FOL": "GrownIn(Material X, Region Z1) ^ AbsentIn(Disease Y, Region Z1) => CanNotAccess(Material X, Disease Y)"
 },
 "610": {
  "NL": "If Material X is harmful to Material Z1 and Artwork Y is made of Material Z1, then Material X is not used in Artwork Y.",
  "FOL": "HarmfulTo(Material X, Material Z1) ^ MadeOf(Artwork Y, Material Z1) => NotUsedIn(Material X, Artwork Y)"
 },
 "611": {
  "NL": "If Job Y uses Tool Z and Material X lacks Tool Z, then Material X is restricted for Job Y.",
  "FOL": "UsedIn(Job Y, Tool Z) ^ Lacks(Material X, Tool Z) => MaterialRestricted(Material X, Job Y)"
 },
 "612": {
  "NL": "If Job Y is in Region Z1 and Material X is illegal in Region Z1, then Material X cannot be accessed for Job Y.",
  "FOL": "JobIn(Job Y, Region Z1) ^ Illegal(Material X, Region Z1) => CanNotAccess(Material X, Job Y)"
 },
 "613": {
  "NL": "If Natural Phenomenon X exists in Region Z1 and Disease Y is absent in Region Z1, then Natural Phenomenon X is not affected by Disease Y.",
  "FOL": "ExistsIn(Natural Phenomenon X, Region Z1) ^ AbsentIn(Disease Y, Region Z1) => NotAffectedBy(Natural Phenomenon X, Disease Y)"
 },
 "614": {
  "NL": "If Show Y is sponsored by Organization A and Organization A prohibits Alcohol X, then Alcohol X cannot be accessed at Show Y.",
  "FOL": "SponsoredBy(Show Y, Organization A) ^ Prohibit(Organization A, Alcohol X) => CanNotAccess(Alcohol X, Show Y)"
 },
 "615": {
  "NL": "If Show Y is sponsored by Organization A and Organization A is against Alcohol X, then Alcohol X is a restricted item for Show Y.",
  "FOL": "SponsoredBy(Show Y, Organization A) ^ Against(Organization A, Alcohol X) => RestrictedItem(Alcohol X, Show Y)"
 },
 "616": {
  "NL": "If Person X has inherited Disease Z1 and Alcohol Y worsens Disease Z1, then Person X needs to avoid Alcohol Y.",
  "FOL": "Inherit(Person X, Disease Z1) ^ Worsen(Alcohol Y, Disease Z1) => NeedToAvoid(Person X, Alcohol Y)"
 },
 "617": {
  "NL": "If Person X is hired for Job Z and Job Z requires Platform Y, then Person X needs to use Platform Y.",
  "FOL": "Hired(Person X, Job Z) ^ Requires(Job Z, Platform Y) => NeedToUse(Person X, Platform Y)"
 },
 "618": {
  "NL": "If Person X has been promoted to Job Z and Job Z requires Platform Y, then Person X needs to access Platform Y.",
  "FOL": "Promoted(Person X, Job Z) ^ Requires(Job Z, Platform Y) => NeedToAccess(Person X, Platform Y)"
 },
 "619": {
  "NL": "If Person X is hired for Job Z and Skill Y is required for Job Z, then Person X needs to apply Skill Y.",
  "FOL": "Hired(Person X, Job Z) ^ Require(Job Z, Skill Y) => NeedToApply(Person X, Skill Y)"
 },
 "620": {
  "NL": "If Person X has been promoted to Job Z and Skill Y is a standard requirement for Job Z, then Person X can perform Job Z.",
  "FOL": "Promoted(Person X, Job Z) ^ Standard(Job Z, Skill Y) => CanPerformJob(Person X, Skill Y)"
 },
 "621": {
  "NL": "If Person X works in Job Z and Job Z mandates Authorization Y, then Person X needs to obtain Authorization Y.",
  "FOL": "WorksIn(Person X, Job Z) ^ Mandated(Job Z, Authorization Y) => NeedToObtain(Person X, Authorization Y)"
 },
 "622": {
  "NL": "If Person X works in Job Z and Job Z requires Authorization Y, then Person X applies for Authorization Y.",
  "FOL": "WorksIn(Person X, Job Z) ^ Requires(Job Z, Authorization Y) => AppliesFor(Person X, Authorization Y)"
 },
 "624": {
  "NL": "If Person X is promoted to Job Z and Job Z mandates Authorization Y, then Person X applies for Authorization Y.",
  "FOL": "PromotedTo(Person X, Job Z) ^ Mandated(Job Z, Authorization Y) => AppliesFor(Person X, Authorization Y)"
 },
 "625": {
  "NL": "If Person X wants to access Facility Z and Facility Z operates with Authorization Y, then Person X needs to obtain Authorization Y.",
  "FOL": "WantsToAccess(Person X, Facility Z) ^ Operates(Facility Z, Authorization Y) => NeedToObtain(Person X, Authorization Y)"
 },
 "627": {
  "NL": "If Person X moves to Region Z and Region Z is located in Natural Phenomenon Y, then Person X lives in a region with Natural Phenomenon Y.",
  "FOL": "MoveTo(Person X, Region Z) ^ Located(Region Z, Natural Phenomenon Y) => LivesInRegionWith(Person X, Natural Phenomenon Y)"
 },
 "628": {
  "NL": "If Person X lives in Region Z and Region Z requires Authorization Y, then Person X needs to present Authorization Y.",
  "FOL": "LivesIn(Person X, Region Z) ^ Requires(Region Z, Authorization Y) => NeedToPresent(Person X, Authorization Y)"
 },
 "629": {
  "NL": "If Person X wants to enter Region Z and Region Z requires Authorization Y, then Person X is responsible for Authorization Y.",
  "FOL": "WantsToEnter(Person X, Region Z) ^ Requires(Region Z, Authorization Y) => ResponsibleFor(Person X, Authorization Y)"
 },
 "630": {
  "NL": "If Person X visits Region Z1 and Region Z1 requires Authorization Y, then Person X needs to use Authorization Y.",
  "FOL": "Visits(Person X, Region Z1) ^ Requires(Region Z1, Authorization Y) => NeedToUse(Person X, Authorization Y)"
 },
 "631": {
  "NL": "If Person X works in Region Z1 and Region Z1 is protected by Authorization Y, then Person X has an obligation to Authorization Y.",
  "FOL": "Protected(Region Z1, Authorization Y) ^ Work(Person X, Region Z1) => HasObligation(Person X, Authorization Y)"
 },
 "632": {
  "NL": "If Person X moves to Region Z and Legislation Y applies to Region Z, then Person X needs to obey Legislation Y.",
  "FOL": "MoveTo(Person X, Region Z) ^ Apply(Legislation Y, Region Z) => NeedToObey(Person X, Legislation Y)"
 },
 "633": {
  "NL": "If Person X has Disease Z1 and Alcohol Y worsens Disease Z1, then Person X has a health risk with Alcohol Y.",
  "FOL": "Has(Person X, Disease Z1) ^ Worsen(Alcohol Y, Disease Z1) => HasHealthRisk(Person X, Alcohol Y)"
 },
 "635": {
  "NL": "If Person X has a guest Person Z1, and Person Z1 prefers Alcohol Y, then Person X needs to serve Alcohol Y.",
  "FOL": "HasGuest(Person X, Person Z1) ^ Prefers(Person Z1, Alcohol Y) => NeedToServe(Person X, Alcohol Y)"
 },
 "636": {
  "NL": "If Person X is susceptible to Disease Z1 and Disease Z1 can lead to Disease Y, then Person X needs to prevent Disease Y.",
  "FOL": "BeSusceptibleTo(Person X, Disease Z1) ^ CanLeadTo(Disease Z1, Disease Y) => NeedToPrevent(Person X, Disease Y)"
 },
 "637": {
  "NL": "If Person X predicts Event Z, and Event Z can cause Condition Y, then Person X needs to prepare for Condition Y.",
  "FOL": "Predict(Person X, Event Z) ^ Cause(Event Z, Condition Y) => NeedToPrepareFor(Person X, Condition Y)"
 },
 "638": {
  "NL": "If Person X has a business in Region Z1 and Region Z1 is prone to Natural Phenomenon Y, then Person X needs to survive Natural Phenomenon Y.",
  "FOL": "HaveBusiness(Person X, Region Z1) ^ ProneTo(Region Z1, Natural Phenomenon Y) => NeedToSurvive(Person X, Natural Phenomenon Y)"
 },
 "639": {
  "NL": "If Person X has a Job Z, and Job Z requires Material Y, then Person X needs to use Material Y.",
  "FOL": "Has(Person X, Job Z) ^ Require(Job Z, Material Y) => NeedToUse(Person X, Material Y)"
 },
 "640": {
  "NL": "If Person X has a Disease Z1, and Substance Y can worsen Disease Z1, then Person X needs to avoid Substance Y.",
  "FOL": "Has(Person X, Disease Z1) ^ CanWorsen(Substance Y, Disease Z1) => NeedToAvoid(Person X, Substance Y)"
 },
 "641": {
  "NL": "If Person X has a Job Z1, and Tool Y is required in Job Z1, then Person X needs to use Tool Y.",
  "FOL": "HasJob(Person X, Job Z1) ^ RequiredIn(Tool Y, Job Z1) => NeedToUse(Person X, Tool Y)"
 },
 "642": {
  "NL": "If Person X moves to Region Z and the climate in Region Z is Condition Y, then Person X can survive Condition Y.",
  "FOL": "MoveTo(Person X, Region Z) ^ Climate(Region Z, Condition Y) => CanSurvive(Person X, Condition Y)"
 },
 "643": {
  "NL": "If Person X develops Condition Z1 and Condition Z1 triggers Condition Y, then Person X has the potential for Condition Y.",
  "FOL": "Develop(Person X, Condition Z1) ^ Triggers(Condition Y, Condition Y) => HasPotential(Person X, Condition Y)"
 },
 "644": {
  "NL": "If Person X has Disease Z1 and Substance Y can worsen Disease Z1, then Substance Y is harmful to Person X's health.",
  "FOL": "Has(Person X, Disease Z1) ^ CanWorsen(Substance Y, Disease Z1) => HarmfulToHealth(Person X, Substance Y)"
 },
 "645": {
  "NL": "If Person X has Event Z and Furniture Y is required for Event Z, then Person X needs to use Furniture Y.",
  "FOL": "Has(Person X, Event Z) ^ RequiredFor(Furniture Y, Event Z) => NeedToUse(Person X, Furniture Y)"
 },
 "646": {
  "NL": "If Person X develops Disease Z1 and Alcohol Y worsens Disease Z1, then Person X cannot consume Alcohol Y.",
  "FOL": "Develop(Person X, Disease Z1) ^ Worsen(Alcohol Y, Disease Z1) => CannotConsume(Person X, Alcohol Y)"
 },
 "647": {
  "NL": "If Person X wants Job Z1 and Job Y is the same as Job Z1, then Person X is seeking employment in Job Y.",
  "FOL": "Wants(Person X, Job Z1) ^ Is(Job Y, Job Z1) => SeekingEmployment(Person X, Job Y)"
 },
 "648": {
  "NL": "If Person X has Job Z and Job Z requires transportation using Vehicle Y, then Person X needs to drive Vehicle Y.",
  "FOL": "Has(Person X, Job Z) ^ Transport(Job Z, Vehicle Y) => NeedToDrive(Person X, Vehicle Y)"
 },
 "649": {
  "NL": "If Person X has Job Z and Tool Y is used for Job Z, then Person X needs to operate Tool Y.",
  "FOL": "Has(Person X, Job Z) ^ Use(Job Z, Tool Y) => NeedToOperate(Person X, Tool Y)"
 },
 "650": {
  "NL": "If Person X has Job Z and Job Z requires Technology Y, then Person X is dependent on Technology Y.",
  "FOL": "HasJob(Person X, Job Z) ^ Requires(Job Z, Technology Y) => DependentOn(Person X, Technology Y)"
 },
 "651": {
  "NL": "If Furniture X is made of Material Z1, and Material Z1 is resistant to Alcohol Y, then Furniture X cannot be stained by Alcohol Y.",
  "FOL": "MaterialOf(Furniture X, Material Z1) ^ ResistantTo(Material Z1, Alcohol Y) => CanNotBeStainedBy(Furniture X, Alcohol Y)"
 },
 "652": {
  "NL": "If Furniture X is coated with Substance Z2, and Substance Z2 is resistant to Drug Y, then Furniture X cannot be discolored by Drug Y.",
  "FOL": "CoatedWith(Furniture X, Substance Z2) ^ ResistantTo(Substance Z2, Drug Y) => CanNotBeDiscoloredBy(Furniture X, Drug Y)"
 },
 "653": {
  "NL": "If Artwork X was created in Region Z1, and Organization Y has banned items from Region Z1, then Artwork X cannot be displayed by Organization Y.",
  "FOL": "CreatedIn(Artwork X, Region Z1) ^ BannedIn(Region Z1, Organization Y) => CanNotBeDisplayedBy(Artwork X, Organization Y)"
 },
 "654": {
  "NL": "If Furniture X is in Condition Z2, and Substance Y is ineffective on Condition Z2, then Furniture X cannot be painted with Substance Y.",
  "FOL": "FurnitureCondition(Furniture X, Condition Z2) ^ SubstanceIneffective(Condition Z2, Substance Y) => CanNotBePaintedWith(Furniture X, Substance Y)"
 },
 "655": {
  "NL": "If Furniture X is made of Material Z1, and Substance Y reacts with Material Z1, then Furniture X cannot be polished with Substance Y.",
  "FOL": "MaterialOf(Furniture X, Material Z1) ^ SubstanceReactsWith(Material Z1, Substance Y) => CanNotBePolishedWith(Furniture X, Substance Y)"
 },
 "656": {
  "NL": "If Artwork X is made of Material Z1 and Substance Y degrades Material Z1, then Substance Y cannot preserve Artwork X.",
  "FOL": "MaterialOf(Artwork X, Material Z1) ^ Degrades(Material Z1, Substance Y) => CanNotPreserve(Artwork X, Substance Y)"
 },
 "657": {
  "NL": "If Substance X contains Food Z1, and Food Z1 causes Disease Y, then Substance X cannot prevent Disease Y.",
  "FOL": "Contains(Substance X, Food Z1) ^ Causes(Food Z1, Disease Y) => CanNotPrevent(Substance X, Disease Y)"
 },
 "658": {
  "NL": "If Substance X lacks Food Z2, and Food Z2 is needed for the prevention of Disease Y, then Substance X cannot prevent Disease Y.",
  "FOL": "Lacks(Substance X, Food Z2) ^ NeededForPrevention(Food Z2, Disease Y) => CanNotPrevent(Substance X, Disease Y)"
 },
 "659": {
  "NL": "If Publication Y is made of Material Z1, and Material Z1 is resistant to Substance X, then Substance X cannot stain Publication Y.",
  "FOL": "MaterialOf(Publication Y, Material Z1) ^ ResistantTo(Material Z1, Substance X) => CanNotStain(Substance X, Publication Y)"
 },
 "660": {
  "NL": "If Tool X is stored in Region Z2, and Region Z2 is protected from Natural Phenomenon Y, then Tool X cannot be damaged by Natural Phenomenon Y.",
  "FOL": "StoredIn(Tool X, Region Z2) ^ ProtectedFrom(Region Z2, Natural Phenomenon Y) => CanNotBeDamagedBy(Tool X, Natural Phenomenon Y)"
 },
 "661": {
  "NL": "If Food Y aggravates Condition Z1, and Condition Z1 leads to Disease X, then Food Y cannot prevent Disease X.",
  "FOL": "Aggravates(Food Y, Condition Z1) ^ LeadsTo(Condition Z1, Disease X) => CanNotPrevent(Disease X, Food Y)"
 },
 "662": {
  "NL": "If Electronic Device X is coated with Substance Z2, and Substance Z2 is impermeable to Alcohol Y, then Electronic Device X cannot be damaged by Alcohol Y.",
  "FOL": "CoatedWith(Electronic Device X, Substance Z2) ^ Impermeable(Substance Z2, Alcohol Y) => CanNotBeDamagedBy(Electronic Device X, Alcohol Y)"
 },
 "663": {
  "NL": "If Electronic Device X is made of Material Z1, and Material Z1 reacts with Alcohol Y, then Electronic Device X cannot be cleaned with Alcohol Y.",
  "FOL": "MaterialOf(Electronic Device X, Material Z1) ^ ReactsWith(Material Z1, Alcohol Y) => CanNotBeCleanedWith(Electronic Device X, Alcohol Y)"
 },
 "664": {
  "NL": "If Electronic Device X requires Technology Z1, and Technology Z1 is incompatible with Technology Y, then Electronic Device X cannot be integrated with Technology Y.",
  "FOL": "Requires(Electronic Device X, Technology Z1) ^ IncompatibleWith(Technology Z1, Technology Y) => CanNotBeIntegratedWith(Electronic Device X, Technology Y)"
 },
 "665": {
  "NL": "If Technology X has an Age Z2, and Age Z2 is considered outdated for Financial Product Y, then Technology X cannot secure Financial Product Y.",
  "FOL": "TechnologyAge(Technology X, Age Z2) ^ Outdated(Age Z2, Financial Product Y) => CanNotSecure(Technology X, Financial Product Y)"
 },
 "666": {
  "NL": "If Natural Place X has a natural composition of Substance Z1, and Substance Z1 is incompatible with Substance Y, then Natural Place X cannot contain Substance Y.",
  "FOL": "NaturalComposition(Natural Place X, Substance Z1) ^ Incompatible(Substance Z1, Substance Y) => CanNotContain(Natural Place X, Substance Y)"
 },
 "667": {
  "NL": "If Organization X is located in Region Z2, and Region Z2 has a ban on Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "FOL": "LocatedIn(Organization X, Region Z2) ^ AlcoholBan(Region Z2, Alcohol Y) => CanNotProduce(Organization X, Alcohol Y)"
 },
 "668": {
  "NL": "If Natural Phenomenon X causes Condition Z1, and Condition Z1 leads to Disease Y, then Natural Phenomenon X cannot prevent Disease Y.",
  "FOL": "Causes(Natural Phenomenon X, Condition Z1) ^ LeadsTo(Condition Z1, Disease Y) => CanNotPrevent(Natural Phenomenon X, Disease Y)"
 },
 "669": {
  "NL": "If Natural Phenomenon X causes Condition Z2, and Condition Z2 inhibits the growth of Plant Y, then Natural Phenomenon X cannot cause the growth of Plant Y.",
  "FOL": "CausesCondition(Natural Phenomenon X, Condition Z2) ^ InhibitsGrowth(Condition Z2, Plant Y) => CanNotCauseGrowth(Natural Phenomenon X, Plant Y)"
 },
 "670": {
  "NL": "If Furniture Y is made of Material Z1, and Material Z1 is resistant to Natural Phenomenon X, then Furniture Y cannot be affected by Natural Phenomenon X.",
  "FOL": "MaterialOf(Furniture Y, Material Z1) ^ ResistantTo(Material Z1, Natural Phenomenon X) => CanNotBeAffectedBy(Natural Phenomenon X, Furniture Y)"
 },
 "671": {
  "NL": "If Alcohol X increases the risk of Condition Z2, and Condition Z2 leads to Disease Y, then Alcohol X cannot prevent Disease Y.",
  "FOL": "IncreasesRisk(Alcohol X, Condition Z2) ^ LeadsTo(Condition Z2, Disease Y) => CanNotPrevent(Alcohol X, Disease Y)"
 },
 "672": {
  "NL": "If Facility Y is of Facility Z1 type and Alcohol X is restricted in Facility Z1 type, then Alcohol X cannot be served in Facility Y.",
  "FOL": "FacilityType(Facility Y, Facility Z1) ^ AlcoholRestriction(Facility Z1, Alcohol X) => CanNotBeServedIn(Alcohol X, Facility Y)"
 },
 "673": {
  "NL": "If Drug X is stored in Tool Z2, and Tool Z2 is sealed with Material Y, then Drug X cannot contaminate Material Y.",
  "FOL": "StoredIn(Drug X, Tool Z2) ^ Sealed(Tool Z2, Material Y) => CanNotContaminate(Drug X, Material Y)"
 },
 "674": {
  "NL": "If Drug X is manufactured by Organization Z1, and Organization Z1 is banned by Organization Y, then Drug X cannot be distributed by Organization Y.",
  "FOL": "ManufacturedBy(Drug X, Organization Z1) ^ BannedBy(Organization Z1, Organization Y) => CanNotBeDistributedBy(Drug X, Organization Y)"
 },
 "675": {
  "NL": "If Drug X contains Substance Z2, and Substance Z2 is prohibited by Organization Y, then Drug X cannot be distributed by Organization Y.",
  "FOL": "Contains(Drug X, Substance Z2) ^ ProhibitedBy(Substance Z2, Organization Y) => CanNotBeDistributedBy(Drug X, Organization Y)"
 },
 "676": {
  "NL": "If Facility X is built with Material Z1 and Material Z1 is resistant to Natural Phenomenon Y, then Facility X cannot be influenced by Natural Phenomenon Y.",
  "FOL": "BuiltWith(Facility X, Material Z1) ^ ResistantTo(Material Z1, Natural Phenomenon Y) => CanNotBeInfluencedBy(Facility X, Natural Phenomenon Y)"
 },
 "677": {
  "NL": "If Facility X is located at Region Z2, and Alcohol Y is banned in Region Z2, then Alcohol Y cannot be served at Facility X.",
  "FOL": "FacilityRegion(Facility X, Region Z2) ^ AlcoholBan(Region Z2, Alcohol Y) => CanNotBeServedAt(Facility X, Alcohol Y)"
 },
 "678": {
  "NL": "If Platform X is made of Material Z1, and Material Z1 is toxic to Plant Y, then Platform X cannot be decorated with Plant Y.",
  "FOL": "MaterialOf(Platform X, Material Z1) ^ ToxicTo(Material Z1, Plant Y) => CanNotBeDecoratedWith(Platform X, Plant Y)"
 },
 "679": {
  "NL": "If Artwork X is coated with Material Z2, and Material Z2 protects against Substance Y, then Artwork X cannot be damaged by Substance Y.",
  "FOL": "CoatedWith(Artwork X, Material Z2) ^ ProtectsAgainst(Material Z2, Substance Y) => CanNotBeDamagedBy(Artwork X, Substance Y)"
 },
 "680": {
  "NL": "If Artwork X is made of Material Z1, and Tool Y damages Material Z1, then Artwork X cannot be preserved with Tool Y.",
  "FOL": "MaterialOf(Artwork X, Material Z1) ^ ToolDamages(Material Z1, Tool Y) => CanNotBePreservedWith(Artwork X, Tool Y)"
 },
 "681": {
  "NL": "If Publication X is made of Material Z1, and Material Z1 degrades in Material Y, then Publication X cannot be preserved in Material Y.",
  "FOL": "MaterialOf(Publication X, Material Z1) ^ DegradesIn(Material Z1, Material Y) => CanNotBePreservedIn(Publication X, Material Y)"
 },
 "682": {
  "NL": "If Publication X is published by Organization Z1, and Organization Z1 competes with Organization Y, then Publication X cannot be sponsored by Organization Y.",
  "FOL": "PublishedBy(Publication X, Organization Z1) ^ CompetesWith(Organization Z1, Organization Y) => CanNotBeSponsoredBy(Publication X, Organization Y)"
 },
 "683": {
  "NL": "If Financial Product X is regulated by Facility Z1, and Game Y is prohibited by Facility Z1, then Financial Product X cannot be gambled on Game Y.",
  "FOL": "RegulatedBy(Financial Product X, Facility Z1) ^ ProhibitedBy(Facility Z1, Game Y) => CanNotBeGambledOn(Financial Product X, Game Y)"
 },
 "684": {
  "NL": "If Food X contains Substance Z1, and Substance Z1 neutralizes Drug Y, then Food X cannot enhance the effect of Drug Y.",
  "FOL": "Contains(Food X, Substance Z1) ^ Neutralizes(Substance Z1, Drug Y) => CanNotEnhanceEffect(Food X, Drug Y)"
 },
 "685": {
  "NL": "If Drug X contains Substance A and Substance A reacts with Material Y, then Drug X cannot be packaged in Material Y.",
  "FOL": "Contains(Drug X, Substance A) ^ ReactsWith(Substance A, Material Y) => CanNotBePackagedIn(Drug X, Material Y)"
 },
 "686": {
  "NL": "If Person X owns Space Z1 and the space required for Animal Y is Space Z2, and Space Z1 is bigger than Space Z2, then Person X can adopt Animal Y.",
  "FOL": "Own(Person X, Space Z1) ^ RequireSpace(Animal Y, Space Z2) ^ BiggerThan(Space Z1, Space Z2) => CanAdopt(Person X, Animal Y)"
 },
 "687": {
  "NL": "If Person X has Money Z1 and the cost to buy Material Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can purchase Material Y.",
  "FOL": "Have(Person X, Money Z1) ^ Buy(Material Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanPurchase(Person X, Material Y)"
 },
 "688": {
  "NL": "If Person X is born with Strength Z1 and the minimum strength required to move Furniture Y is Strength Z2, and Strength Z1 is bigger than Strength Z2, then Person X can move Furniture Y.",
  "FOL": "BornWith(Person X, Strength Z1) ^ RequireMinimumStrength(Furniture Y, Strength Z2) ^ BiggerThan(Strength Z1, Strength Z2) => CanMove(Person X, Furniture Y)"
 },
 "689": {
  "NL": "If Person X has a Weight Z1 and the Furniture Y is built for Weight Z2, and Weight Z1 is smaller than Weight Z2, then Person X can sit on Furniture Y.",
  "FOL": "Have(Person X, Weight Z1) ^ BuiltFor(Furniture Y, Weight Z2) ^ SmallerThan(Weight Z1, Weight Z2) => CanSitOn(Person X, Furniture Y)"
 },
 "690": {
  "NL": "If Person X has Age Z1 and the law sets Age Z2 as the minimum age for joining Organization Y, and Age Z1 is bigger than Age Z2, then Person X can join Organization Y.",
  "FOL": "Have(Person X, Age Z1) ^ SetByLaw(Organization Y, Age Z2) ^ BiggerThan(Age Z1, Age Z2) => CanJoin(Person X, Organization Y)"
 },
 "691": {
  "NL": "If Person X has Weight Z1 and Animal Y is adapted to carry Weight Z2, and Weight Z1 is smaller than Weight Z2, then Person X can ride Animal Y.",
  "FOL": "Have(Person X, Weight Z1) ^ Adapted(Animal Y, Weight Z2) ^ SmallerThan(Weight Z1, Weight Z2) => CanRide(Person X, Animal Y)"
 },
 "692": {
  "NL": "If Person X has Age Z1 and the minimum age requirement for joining Organization Y is Age Z2, and Age Z1 is bigger than Age Z2, then Person X can be a member of Organization Y.",
  "FOL": "Have(Person X, Age Z1) ^ RequireMinimumAge(Organization Y, Age Z2) ^ BiggerThan(Age Z1, Age Z2) => MemberOf(Person X, Organization Y)"
 },
 "693": {
  "NL": "If Person X has Money Z1 and Organization Y is fundraising for Money Z2, and Money Z1 is bigger than Money Z2, then Person X can donate to Organization Y.",
  "FOL": "Have(Person X, Money Z1) ^ Fundraising(Organization Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanDonate(Person X, Organization Y)"
 },
 "694": {
  "NL": "If Person X is of Age Z1 and Show Y is rated for adults of Age Z2, and Age Z1 is bigger than Age Z2, then Person X can watch Show Y.",
  "FOL": "Have(Person X, Age Z1) ^ RatedForAdults(Show Y, Age Z2) ^ BiggerThan(Age Z1, Age Z2) => CanWatch(Person X, Show Y)"
 },
 "695": {
  "NL": "If Person X can afford Price Z1 and Artwork Y is sold at Price Z2, and Price Z1 is bigger than Price Z2, then Person X can collect Artwork Y.",
  "FOL": "Afford(Person X, Price Z1) ^ SoldAt(Artwork Y, Price Z2) ^ BiggerThan(Price Z1, Price Z2) => CanCollect(Person X, Artwork Y)"
 },
 "696": {
  "NL": "If Person X has been granted Authorization Z1 and Job Y requires Authorization Z2, and Authorization Z1 is greater than Authorization Z2, then Person X can apply for Job Y.",
  "FOL": "Granted(Person X, Authorization Z1) ^ Require(Job Y, Authorization Z2) ^ BiggerThan(Authorization Z1, Authorization Z2) => CanApplyFor(Person X, Job Y)"
 },
 "697": {
  "NL": "If Person X earns Money Z1 and the price of Game Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "FOL": "Earn(Person X, Money Z1) ^ Price(Game Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Game Y)"
 },
 "698": {
  "NL": "If Person X has Money Z1 and Game Y is on sale for Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "FOL": "Have(Person X, Money Z1) ^ OnSale(Game Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Game Y)"
 },
 "699": {
  "NL": "If Person X is of Age Z1 and the legal age to play Game Y is Age Z2, and Age Z1 is bigger than Age Z2, then Person X can play Game Y.",
  "FOL": "Age(Person X, Age Z1) ^ LegalAge(Game Y, Age Z2) ^ BiggerThan(Age Z1, Age Z2) => CanPlay(Person X, Game Y)"
 },
 "700": {
  "NL": "If Person X has a height of Z1 due to surgery and the minimum height requirement to ride Vehicle Y is Height Z2, and Height Z1 is bigger than Height Z2, then Person X can ride Vehicle Y.",
  "FOL": "Surgery(Person X, Height Z1) ^ RequireMinimumHeight(Vehicle Y, Height Z2) ^ BiggerThan(Height Z1, Height Z2) => CanRide(Person X, Vehicle Y)"
 },
 "701": {
  "NL": "If Person X has developed Strength Z1 and the Tool Y requires Strength Z2, and Strength Z1 is bigger than Strength Z2, then Person X can use Tool Y.",
  "FOL": "Develop(Person X, Strength Z1) ^ RequireStrength(Tool Y, Strength Z2) ^ BiggerThan(Strength Z1, Strength Z2) => CanUse(Person X, Tool Y)"
 },
 "702": {
  "NL": "If Person X earns Money Z1 and the cost of Food Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X has money for Food Y.",
  "FOL": "Earn(Person X, Money Z1) ^ Cost(Food Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => HasMoneyFor(Person X, Food Y)"
 },
 "703": {
  "NL": "If Person X has Money Z1 and the minimum investment required for Financial Product Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X has the capital for Financial Product Y.",
  "FOL": "Have(Person X, Money Z1) ^ RequireMinimumInvestment(Financial Product Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => HasCapital(Person X, Financial Product Y)"
 },
 "704": {
  "NL": "If Person X earns more than Price Z1 and the price of accessing Facility Y is Price Z2, and Price Z1 is bigger than Price Z2, then Person X has access to Facility Y.",
  "FOL": "EarnsMoreThan(Person X, Price Z1) ^ PriceOf(Facility Y, Price Z2) ^ BiggerThan(Price Z1, Price Z2) => HasAccess(Person X, Facility Y)"
 },
 "705": {
  "NL": "If Person X works in Job A and Job A requires Skill Z2, and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "FOL": "WorkIn(Person X, Job A) ^ Require(Job A, Skill Z2) ^ NeededFor(Skill Z2, Plant Y) => CanMaintainPlant(Person X, Plant Y)"
 },
 "706": {
  "NL": "If Person X inherits Space Z1 and the condition of Space Z1 is Condition A, and Artwork Y requires Condition A, then Person X can display Artwork Y.",
  "FOL": "Inherit(Person X, Space Z1) ^ ConditionOf(Space Z1, Condition A) ^ Require(Artwork Y, Condition A) => CanDisplay(Person X, Artwork Y)"
 },
 "707": {
  "NL": "If Person X has a job A that requires Skill Z1 and Skill Z1 is developed for Platform Y, then Person X has skills for Platform Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobRequires(Job A, Skill Z1) ^ DevelopedFor(Skill Z1, Platform Y) => HasSkills(Person X, Platform Y)"
 },
 "708": {
  "NL": "If Person X has Job A and Skill Z1 is needed for Job A, and Skill Z1 allows driving Vehicle Y, then Person X can travel with Vehicle Y.",
  "FOL": "Job(Person X, Job A) ^ Needed(Skill Z1, Job A) ^ Drive(Skill Z1, Vehicle Y) => CanTravel(Person X, Vehicle Y)"
 },
 "709": {
  "NL": "If Person X has a job A that requires Skill Z, and Skill Z is required to cook Food Y, then Person X can cook Food Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobRequiresSkill(Job A, Skill Z) ^ RequiredFor(Skill Z, Food Y) => CanCook(Person X, Food Y)"
 },
 "710": {
  "NL": "If Person X rents Facility A and Facility A contains Space Z2, and Vehicle Y is designed for Space Z2, then Person X can park Vehicle Y.",
  "FOL": "Rent(Person X, Facility A) ^ Contain(Facility A, Space Z2) ^ DesignedFor(Vehicle Y, Space Z2) => CanPark(Person X, Vehicle Y)"
 },
 "711": {
  "NL": "If Person X has worked at Job A and Skill Z1 is required for Job A, and Skill Z1 improves Technology Y, then Person X can upgrade Technology Y.",
  "FOL": "WorkedAt(Person X, Job A) ^ RequiredFor(Skill Z1, Job A) ^ Improves(Skill Z1, Technology Y) => CanUpgrade(Person X, Technology Y)"
 },
 "712": {
  "NL": "If Person X works as Job A and Job A requires Tool Z1, and Tool Z1 is designed for measuring Natural Phenomenon Y, then Person X can measure Natural Phenomenon Y.",
  "FOL": "WorkAs(Person X, Job A) ^ Require(Job A, Tool Z1) ^ DesignedFor(Tool Z1, Natural Phenomenon Y) => CanMeasure(Person X, Natural Phenomenon Y)"
 },
 "713": {
  "NL": "If Person X has Job A and Job A requires Skill Z1, and Skill Z1 is required for writing Publication Y, then Person X can compose Publication Y.",
  "FOL": "Job(Person X, Job A) ^ Require(Job A, Skill Z1) ^ RequiredForWriting(Skill Z1, Publication Y) => CanCompose(Person X, Publication Y)"
 },
 "714": {
  "NL": "If Person X participates in Event A, and Event A involves Skill Z, and Skill Z is required for cooking Food Y, then Person X can cook Food Y.",
  "FOL": "ParticipateIn(Person X, Event A) ^ Involve(Event A, Skill Z) ^ RequiredFor(Skill Z, Food Y) => CanCook(Person X, Food Y)"
 },
 "715": {
  "NL": "If Person A has sent Electronic Device Z1 to Person X, and Platform Y is designed for Electronic Device Z1, then Person X has access to Platform Y.",
  "FOL": "Sent(Person A, Electronic Device Z1) ^ To(Person A, Person X) ^ DesignedFor(Platform Y, Electronic Device Z1) => HasAccessTo(Person X, Platform Y)"
 },
 "716": {
  "NL": "If Person X has a job A that requires Skill Z1 and Artwork Y is damaged and requires Skill Z1 for evaluation, then Person X can evaluate Artwork Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobRequires(Job A, Skill Z1) ^ Damaged(Artwork Y, Skill Z1) => CanEvaluateArtwork(Person X, Artwork Y)"
 },
 "717": {
  "NL": "If Person X works in Job A and Job A requires Tool Z, and Tool Z can lift Furniture Y, then Person X can move Furniture Y.",
  "FOL": "WorkIn(Person X, Job A) ^ Require(Job A, Tool Z) ^ CanLift(Tool Z, Furniture Y) => CanMove(Person X, Furniture Y)"
 },
 "718": {
  "NL": "If Person X works as Job A and Job A needs Skill Z2, and Platform Y is maintained by Skill Z2, then Person X knows how to use Platform Y.",
  "FOL": "WorkAs(Person X, Job A) ^ Need(Job A, Skill Z2) ^ Maintain(Platform Y, Skill Z2) => KnowsHowToUse(Person X, Platform Y)"
 },
 "719": {
  "NL": "If Person X works in Job A and Job A requires Skill Z1, and Skill Z1 is mandatory for Authorization Y, then Person X can request Authorization Y.",
  "FOL": "WorkIn(Person X, Job A) ^ Require(Job A, Skill Z1) ^ MandatoryFor(Skill Z1, Authorization Y) => CanRequest(Person X, Authorization Y)"
 },
 "720": {
  "NL": "If Person X has Skill Z1, and Skill Z1 is required for Job A, and Organization Y offers Job A, then Person X can work for Organization Y.",
  "FOL": "Have(Person X, Skill Z1) ^ RequireFor(Job A, Skill Z1) ^ Offer(Organization Y, Job A) => CanWorkFor(Person X, Organization Y)"
 },
 "721": {
  "NL": "If Person X was born in Time Period Z1 and Show Y aired during Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Person X can discuss Show Y.",
  "FOL": "BornIn(Person X, Time Period Z1) ^ AiredAt(Show Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanDiscuss(Person X, Show Y)"
 },
 "722": {
  "NL": "If Person X was alive during Time Period Z1 and Artwork Y was produced during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Person X can access Artwork Y.",
  "FOL": "AliveDuring(Person X, Time Period Z1) ^ Produced(Artwork Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Person X, Artwork Y)"
 },
 "723": {
  "NL": "If Person X was born in Time Period Z1 and Furniture Y was crafted in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Person X can use Furniture Y.",
  "FOL": "BornIn(Person X, Time Period Z1) ^ CraftedIn(Furniture Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanUse(Person X, Furniture Y)"
 },
 "724": {
  "NL": "If Organization X is active in Time Period Z1 and Technology Y was developed in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Technology Y.",
  "FOL": "ActiveIn(Organization X, Time Period Z1) ^ DevelopedIn(Technology Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Organization X, Technology Y)"
 },
 "725": {
  "NL": "If Organization X was founded during Time Period Z1 and Financial Product Y is offered during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "FOL": "FoundedDuring(Organization X, Time Period Z1) ^ OfferDuring(Financial Product Y, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanAccess(Organization X, Financial Product Y)"
 },
 "726": {
  "NL": "If Organization X was established in Time Period Z1 and Legislation Y was passed in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X must comply with Legislation Y.",
  "FOL": "EstablishedIn(Organization X, Time Period Z1) ^ PassedIn(Legislation Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => MustComply(Organization X, Legislation Y)"
 },
 "727": {
  "NL": "If Event X happens at Time Period Z1 and Technology Y originated during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Event X can access Technology Y.",
  "FOL": "HappenAt(Event X, Time Period Z1) ^ OriginatedDuring(Technology Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Event X, Technology Y)"
 },
 "728": {
  "NL": "If Organization X was created in Time Period Z1 and Game Y was published during Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Organization X can play Game Y.",
  "FOL": "CreatedIn(Organization X, Time Period Z1) ^ PublishedDuring(Game Y, Time Period Z2) ^ EarlierThan(Time Period Z1, Time Period Z2) => CanPlay(Organization X, Game Y)"
 },
 "729": {
  "NL": "If Substance X exists during Time Period Z1 and Job Y operates during Time Period Z2, and Time Period Z2 is within Time Period Z1, then Job Y can access Substance X.",
  "FOL": "ExistDuring(Substance X, Time Period Z1) ^ OperateDuring(Job Y, Time Period Z2) ^ Within(Time Period Z1, Time Period Z2) => CanAccess(Substance X, Job Y)"
 },
 "730": {
  "NL": "If Facility X is open during Time Period Z1 and Material Y is mined in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Facility X can use Material Y.",
  "FOL": "OpenDuring(Facility X, Time Period Z1) ^ MinedIn(Material Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanUse(Facility X, Material Y)"
 },
 "731": {
  "NL": "If Facility X operates in Time Period Z1 and Financial Product Y is offered during Time Period Z2, and Time Period Z2 starts before the end of Time Period Z1, then Facility X can access Financial Product Y.",
  "FOL": "OperateIn(Facility X, Time Period Z1) ^ OfferDuring(Financial Product Y, Time Period Z2) ^ StartBeforeEnd(Time Period Z1, Time Period Z2) => CanAccess(Facility X, Financial Product Y)"
 },
 "732": {
  "NL": "If Job X is in Region Z and Food Y naturally grows in Natural Place A, which is located in Region Z, then Job X can access Food Y.",
  "FOL": "JobInRegion(Job X, Region Z) ^ NaturalGrow(Food Y, Natural Place A) ^ LocatedIn(Natural Place A, Region Z) => CanAccess(Job X, Food Y)"
 },
 "733": {
  "NL": "If Person X studies in Facility A, and Facility A is located in Region Z, and Event Y is organized in Region Z, then Person X can access Event Y.",
  "FOL": "StudiesIn(Person X, Facility A) ^ LocatedIn(Facility A, Region Z) ^ OrganizedIn(Event Y, Region Z) => CanAccess(Person X, Event Y)"
 },
 "734": {
  "NL": "If Animal X can survive in Condition A, and Condition A is present in Region Z, and Disease Y is prevalent in Region Z, then Animal X can access Disease Y.",
  "FOL": "SurviveIn(Animal X, Condition A) ^ ConditionIn(Region Z, Condition A) ^ PrevalentIn(Disease Y, Region Z) => CanAccess(Animal X, Disease Y)"
 },
 "735": {
  "NL": "If Person X lives in Region Z and Disease Y is spread by Animal A, and Animal A is common in Region Z, then Person X is at risk of Disease Y.",
  "FOL": "LiveIn(Person X, Region Z) ^ SpreadIn(Disease Y, Animal A) ^ CommonIn(Animal A, Region Z) => AtRisk(Person X, Disease Y)"
 },
 "736": {
  "NL": "If Facility X is located in Region Z, Material Y is manufactured in Facility A, and Facility A is also located in Region Z, then Facility X can use Material Y.",
  "FOL": "LocatedIn(Facility X, Region Z) ^ ManufacturedIn(Material Y, Facility A) ^ LocatedIn(Facility A, Region Z) => CanUse(Facility X, Material Y)"
 },
 "737": {
  "NL": "If Organization X is established in Region Z1 and Tool Y is sold in Facility A, which is located in Region Z1, then Organization X can access Tool Y.",
  "FOL": "EstablishedIn(Organization X, Region Z1) ^ SoldIn(Tool Y, Facility A) ^ LocatedIn(Facility A, Region Z1) => CanAccess(Organization X, Tool Y)"
 },
 "738": {
  "NL": "If Facility X is open during Time Period Z1 and Alcohol Y is brewed during Time Period A, and Time Period A is earlier than Time Period Z1, then Facility X can access Alcohol Y.",
  "FOL": "OpenDuring(Facility X, Time Period Z1) ^ BrewedDuring(Alcohol Y, Time Period A) ^ EarlierThan(Time Period A, Time Period Z1) => CanAccess(Facility X, Alcohol Y)"
 },
 "739": {
  "NL": "If Person X lives in Region Z1 and Game Y is distributed by Organization A which operates in Region Z1, then Person X can access Game Y.",
  "FOL": "LiveIn(Person X, Region Z1) ^ DistributedBy(Game Y, Organization A) ^ OperateIn(Organization A, Region Z1) => CanAccess(Person X, Game Y)"
 },
 "740": {
  "NL": "If Technology X is developed for Electronic Device A, and Electronic Device A is compatible with Platform Z, and Game Y is developed for Platform Z, then Technology X can access Game Y.",
  "FOL": "DevelopedFor(Technology X, Electronic Device A) ^ CompatibleWith(Electronic Device A, Platform Z) ^ DevelopedFor(Game Y, Platform Z) => CanAccess(Technology X, Game Y)"
 },
 "741": {
  "NL": "If Animal X has migrated to Region Z, and Plant A grows in Region Z, and Substance Y is derived from Plant A, then Animal X can access Substance Y.",
  "FOL": "MigratedTo(Animal X, Region Z) ^ GrowsIn(Plant A, Region Z) ^ DerivedFrom(Substance Y, Plant A) => CanAccess(Animal X, Substance Y)"
 },
 "742": {
  "NL": "If Organization X operates in Facility A which is situated in Region Z, and Substance Y is imported to Region Z, then Organization X can access Substance Y.",
  "FOL": "OperateIn(Organization X, Facility A) ^ SituatedIn(Facility A, Region Z) ^ ImportedTo(Substance Y, Region Z) => CanAccess(Organization X, Substance Y)"
 },
 "743": {
  "NL": "If Animal X is native to Region Z and Food Y is cultivated in Facility A, which is located in Region Z, then Animal X can access Food Y.",
  "FOL": "NativeTo(Animal X, Region Z) ^ CultivatedIn(Food Y, Facility A) ^ LocatedIn(Facility A, Region Z) => CanAccess(Animal X, Food Y)"
 },
 "744": {
  "NL": "If Substance X is allowed as Material Z, and Material Z requires Authorization A, and Authorization A is mandated by Legislation Y, then Substance X can be accessed under Legislation Y.",
  "FOL": "Allowed(Substance X, Material Z) ^ Require(Material Z, Authorization A) ^ Mandate(Authorization A, Legislation Y) => CanAccess(Substance X, Legislation Y)"
 },
 "745": {
  "NL": "If Vehicle X is equipped for Condition Z1 and Natural Place Y is located in Region A which is characterized by Condition Z1, then Vehicle X can access Natural Place Y.",
  "FOL": "EquippedFor(Vehicle X, Condition Z1) ^ LocatedIn(Natural Place Y, Region A) ^ CharacterizedBy(Region A, Condition Z1) => CanAccess(Vehicle X, Natural Place Y)"
 },
 "746": {
  "NL": "If Vehicle X operates in Region Z1 and Food Y naturally grows in Natural Place A which is located in Region Z1, then Vehicle X can deliver Food Y.",
  "FOL": "OperateIn(Vehicle X, Region Z1) ^ NaturalGrow(Food Y, Natural Place A) ^ LocatedIn(Natural Place A, Region Z1) => CanDeliver(Vehicle X, Food Y)"
 },
 "747": {
  "NL": "If Animal X is nocturnal during Time Period Z1, and Food Y is stored in Region A which is open during Time Period Z1, then Animal X can access Food Y.",
  "FOL": "Nocturnal(Animal X, Time Period Z1) ^ StoredIn(Food Y, Region A) ^ OpenDuring(Region A, Time Period Z1) => CanAccess(Animal X, Food Y)"
 },
 "748": {
  "NL": "If Person X moves to Region Z1 and Game Y is distributed on Platform A, and Platform A is popular in Region Z1, then Person X can access Game Y.",
  "FOL": "MoveTo(Person X, Region Z1) ^ DistributedIn(Game Y, Platform A) ^ PopularIn(Platform A, Region Z1) => CanAccess(Person X, Game Y)"
 },
 "749": {
  "NL": "If Person X works in Organization A, and Organization A is located in Region Z1, and Tool Y is found in Region Z1, then Person X can access Tool Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ LocatedIn(Organization A, Region Z1) ^ FoundIn(Tool Y, Region Z1) => CanAccess(Person X, Tool Y)"
 },
 "750": {
  "NL": "If Facility X operates in Time Period Z1, and Alcohol Y is consumed in Event A, and Event A occurs in Time Period Z1, then Facility X can access Alcohol Y.",
  "FOL": "OperateIn(Facility X, Time Period Z1) ^ ConsumedIn(Alcohol Y, Event A) ^ OccurredIn(Event A, Time Period Z1) => CanAccess(Facility X, Alcohol Y)"
 },
 "751": {
  "NL": "If Substance X is naturally found in Natural Place A, and Natural Place A is located in Region Z1, and Region Z1 can transport to Facility Y, then Substance X can access Facility Y.",
  "FOL": "NaturalIn(Substance X, Natural Place A) ^ LocatedIn(Natural Place A, Region Z1) ^ TransportTo(Region Z1, Facility Y) => CanAccess(Substance X, Facility Y)"
 },
 "752": {
  "NL": "If Organization X is active in Event A, and Event A occurs during Time Period Z2, and Natural Place Y is safe during Time Period Z2, then Organization X can access Natural Place Y.",
  "FOL": "ActiveIn(Organization X, Event A) ^ OccurDuring(Event A, Time Period Z2) ^ SafeDuring(Natural Place Y, Time Period Z2) => CanAccess(Organization X, Natural Place Y)"
 },
 "753": {
  "NL": "If Furniture X is distributed by Organization Z, and Organization Z has a branch in Region A, and Region A is located in Region Y, then Furniture X is sold in Region Y.",
  "FOL": "DistributedBy(Furniture X, Organization Z) ^ HasBranchIn(Organization Z, Region A) ^ LocatedIn(Region A, Region Y) => SoldIn(Furniture X, Region Y)"
 },
 "754": {
  "NL": "If Substance X is harvested from Natural Place Z, and Natural Place Z is located in Region A, and Region A is part of Region Y, then Substance X is available in Region Y.",
  "FOL": "Harvested(Substance X, Natural Place Z) ^ LocatedIn(Natural Place Z, Region A) ^ PartOf(Region A, Region Y) => AvailableIn(Substance X, Region Y)"
 },
 "755": {
  "NL": "If Technology X is sold in Facility Z, and Facility Z is located in Region A, and Region A is decided to be Region Y, then Technology X is accessible in Region Y.",
  "FOL": "SoldIn(Technology X, Facility Z) ^ WasIn(Facility Z, Region A) ^ Decided(Region A, Region Y) => AccessibleIn(Technology X, Region Y)"
 },
 "756": {
  "NL": "If Authorization X is granted by Facility A, and Facility A is located in Region Z, and Region Z is a territory of Region Y, then Authorization X is legal in Region Y.",
  "FOL": "GrantedBy(Authorization X, Facility A) ^ LocatedIn(Facility A, Region Z) ^ IsTerritory(Region Z, Region Y) => LegalInRegion(Authorization X, Region Y)"
 },
 "757": {
  "NL": "If Technology X is required for Job A, and Job A is in Organization Z, and Organization Z is located in Region Y, then Technology X is available in Region Y.",
  "FOL": "RequiredFor(Technology X, Job A) ^ JobIn(Job A, Organization Z) ^ LocatedIn(Organization Z, Region Y) => Available(Technology X, Region Y)"
 },
 "758": {
  "NL": "If Plant X is grown by Person A, and Person A lives in Natural Place Z, and Natural Place Z exists in Region Y, then Plant X is part of the ecosystem in Region Y.",
  "FOL": "GrownBy(Plant X, Person A) ^ LiveIn(Person A, Natural Place Z) ^ ExistsIn(Natural Place Z, Region Y) => PartOfEcosystem(Plant X, Region Y)"
 },
 "759": {
  "NL": "If Animal X migrates to Natural Place Z, and Natural Place Z is surrounded by Natural Place A, and Natural Place A is located in Region Y, then Animal X can be found in Region Y.",
  "FOL": "MigratesTo(Animal X, Natural Place Z) ^ SurroundedBy(Natural Place Z, Natural Place A) ^ LocatedIn(Natural Place A, Region Y) => FoundIn(Animal X, Region Y)"
 },
 "760": {
  "NL": "If Technology X is used in Organization Z, and Organization Z operates in Facility A, and Facility A is situated in Region Y, then Technology X is available in Region Y.",
  "FOL": "UsedIn(Technology X, Organization Z) ^ OperateIn(Organization Z, Facility A) ^ SituatedIn(Facility A, Region Y) => Available(Technology X, Region Y)"
 },
 "761": {
  "NL": "If Region Y has a SocioEconomic Condition Z, and Condition Z causes an Event A, and Event A triggers Natural Phenomenon X, then the Region Y is familiar with Natural Phenomenon X.",
  "FOL": "SocioEconomicCondition(Region Y, Condition Z) ^ Causes(Condition Z, Event A) ^ Triggers(Event A, Natural Phenomenon X) => FamiliarWith(Natural Phenomenon X, Region Y)"
 },
 "762": {
  "NL": "If Financial Product X is sold by Facility Z, and Facility Z is located in Region A which is a part of Region Y, then Financial Product X can be purchased in Region Y.",
  "FOL": "SoldBy(Facility Z, Financial Product X) ^ LocatedIn(Facility Z, Region A) ^ PartOf(Region A, Region Y) => CanPurchase(Financial Product X, Region Y)"
 },
 "763": {
  "NL": "If Legislation X is enforced by Facility Z, and Facility Z is located in Region A, and Region A is part of Region Y, then Region Y must follow Legislation X.",
  "FOL": "EnforcedBy(Legislation X, Facility Z) ^ LocatedIn(Facility Z, Region A) ^ PartOf(Region A, Region Y) => MustFollow(Legislation X, Region Y)"
 },
 "764": {
  "NL": "If Job Z involves Tool A and Skill X operates Tool A, and Job Z is popular in Region Y, then Skill X is valued in Region Y.",
  "FOL": "Involve(Job Z, Tool A) ^ Operate(Skill X, Tool A) ^ PopularIn(Job Z, Region Y) => ValuedIn(Skill X, Region Y)"
 },
 "765": {
  "NL": "If Substance X is extracted in Facility Z, and Facility Z is owned by Organization A, and Organization A has decided to operate in Region Y, then Substance X is available in Region Y.",
  "FOL": "ExtractedIn(Substance X, Facility Z) ^ OwnedBy(Facility Z, Organization A) ^ Decided(Organization A, Region Y) => AvailableIn(Substance X, Region Y)"
 },
 "766": {
  "NL": "If Job X requires Tool A and operating Tool A requires Skill Z, and Skill Z is not practiced in Region Y, then Job X is scarce in Region Y.",
  "FOL": "Requires(Job X, Tool A) ^ Operate(Tool A, Skill Z) ^ NotPracticed(Skill Z, Region Y) => ScarceIn(Job X, Region Y)"
 },
 "768": {
  "NL": "If Material X is extracted by Person A, and Person A is located in Natural Place Z, and Natural Place Z is formed in Region Y, then Material X can be extracted from Region Y.",
  "FOL": "ExtractedBy(Material X, Person A) ^ LocatedIn(Person A, Natural Place Z) ^ FormedIn(Natural Place Z, Region Y) => CanExtract(Material X, Region Y)"
 },
 "769": {
  "NL": "If Person X occupies Space Z1 and Animal Y requires Space Z2, and Space Z1 is smaller than Space Z2, then Person X cannot adopt Animal Y.",
  "FOL": "Occupy(Person X, Space Z1) ^ Require(Animal Y, Space Z2) ^ SmallerThan(Space Z1, Space Z2) => CanNotAdopt(Person X, Animal Y)"
 },
 "770": {
  "NL": "If Person X has Strength Z1 from training and the strength required to dispose Material Y is Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot dispose Material Y.",
  "FOL": "Train(Person X, Strength Z1) ^ RequireStrength(Material Y, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => CanNotDispose(Person X, Material Y)"
 },
 "771": {
  "NL": "If Person X is born with Strength Z1 and the disposal of Material Y requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot dispose of Material Y.",
  "FOL": "BornWith(Person X, Strength Z1) ^ RequireStrength(Material Y, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => CanNotDispose(Person X, Material Y)"
 },
 "772": {
  "NL": "If Person X has Money Z1 and the price of Material Y is Money Z2, and Money Z1 is smaller than Money Z2, then Material Y is not affordable for Person X.",
  "FOL": "Have(Person X, Money Z1) ^ Price(Material Y, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => NotAffordable(Person X, Material Y)"
 },
 "773": {
  "NL": "If Person X has grown to Height Z1 and the Furniture Y requires a height above Z2, and Height Z1 is smaller than Height Z2, then Person X cannot use Furniture Y.",
  "FOL": "GrowTo(Person X, Height Z1) ^ RequireAbove(Furniture Y, Height Z2) ^ SmallerThan(Height Z1, Height Z2) => CanNotUse(Person X, Furniture Y)"
 },
 "774": {
  "NL": "If Person X has a weight of Weight Z1 and the Furniture Y is designed for a weight of Weight Z2, and Weight Z1 is bigger than Weight Z2, then Person X cannot use Furniture Y.",
  "FOL": "WeightOf(Person X, Weight Z1) ^ DesignedForWeight(Furniture Y, Weight Z2) ^ BiggerThan(Weight Z1, Weight Z2) => CanNotUse(Person X, Furniture Y)"
 },
 "775": {
  "NL": "If Person X has Skill Z1 and the minimum skill requirement for being a CEO of Organization Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "FOL": "Have(Person X, Skill Z1) ^ RequireMinimumSkill(Organization Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => NotCEO(Person X, Organization Y)"
 },
 "776": {
  "NL": "If Person X has Skill Z1 and the goal of Organization Y requires Skill Z2, and Skill Z1 is different from Skill Z2, then Person X cannot lead Organization Y.",
  "FOL": "Have(Person X, Skill Z1) ^ Goal(Organization Y, Skill Z2) ^ DifferentFrom(Skill Z1, Skill Z2) => CanNotLead(Person X, Organization Y)"
 },
 "777": {
  "NL": "If Person X is of Age Z1 and the law sets Age Z2 as the minimum age for donating to Organization Y, and Age Z1 is smaller than Age Z2, then Person X cannot donate to Organization Y.",
  "FOL": "Age(Person X, Age Z1) ^ SetByLaw(Organization Y, Age Z2) ^ SmallerThan(Age Z1, Age Z2) => CanNotDonate(Person X, Organization Y)"
 },
 "778": {
  "NL": "If Person X has a space of size Z1 and the event Y is organized in a space of size Z2, and the size Z1 is smaller than size Z2, then Person X cannot host Event Y.",
  "FOL": "SizeOf(Person X, Space Z1) ^ OrganizedIn(Event Y, Space Z2) ^ SmallerThan(Space Z1, Space Z2) => CanNotHost(Person X, Event Y)"
 },
 "779": {
  "NL": "If Artwork Y requires Skill Z1 and Person X has Skill Z2, but Skill Z2 is less than Skill Z1, then Person X is not an artist of Artwork Y.",
  "FOL": "SkillRequired(Artwork Y, Skill Z1) ^ Have(Person X, Skill Z2) ^ LessThan(Skill Z2, Skill Z1) => NotAnArtist(Person X, Artwork Y)"
 },
 "780": {
  "NL": "If Person X has developed Strength Z1 and Job Y requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "FOL": "Develop(Person X, Strength Z1) ^ Require(Job Y, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => CanNotPerform(Person X, Job Y)"
 },
 "781": {
  "NL": "If Person X is born with Strength Z1 and the Strength Z2 is necessary for Job Y, but Strength Z1 is smaller than Strength Z2, then Person X lacks the skills for Job Y.",
  "FOL": "BornWith(Person X, Strength Z1) ^ Necessary(Job Y, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => LacksSkills(Person X, Job Y)"
 },
 "782": {
  "NL": "If Person X has trained to Strength Z1 and the standard strength for Job Y is Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X is not qualified for Job Y.",
  "FOL": "Train(Person X, Strength Z1) ^ Standard(Job Y, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => NotQualified(Person X, Job Y)"
 },
 "783": {
  "NL": "If Person X has Skill Z1 and driving Vehicle Y requires Skill Z2, but Skill Z1 is less than Skill Z2, then Person X cannot park Vehicle Y.",
  "FOL": "Have(Person X, Skill Z1) ^ Drive(Vehicle Y, Skill Z2) ^ LessThan(Skill Z1, Skill Z2) => CanNotPark(Person X, Vehicle Y)"
 },
 "784": {
  "NL": "If Person X has Money Z1 and the cost of Tool Y is Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "FOL": "Have(Person X, Money Z1) ^ Bought(Tool Y, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Tool Y)"
 },
 "785": {
  "NL": "If Person X has a Skill Level Z1 and Technology Y requires Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X is not proficient in Technology Y.",
  "FOL": "SkillLevel(Person X, Skill Z1) ^ RequireSkill(Technology Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => NotProficient(Person X, Technology Y)"
 },
 "786": {
  "NL": "If Person X is of Age Z1 and the safety standard for operating Electronic Device Y is Age Z2, and Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "FOL": "Age(Person X, Age Z1) ^ SafetyStandard(Electronic Device Y, Age Z2) ^ BiggerThan(Age Z2, Age Z1) => CanNotOperate(Person X, Electronic Device Y)"
 },
 "787": {
  "NL": "If Person X has a Skill Level Z1 and the operation of Platform Y needs Skill Level Z2, and Skill Level Z1 is smaller than Skill Level Z2, then Person X cannot use Platform Y.",
  "FOL": "SkillLevel(Person X, Skill Z1) ^ NeedForOperation(Platform Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotUse(Person X, Platform Y)"
 },
 "788": {
  "NL": "If Person X is of Age Z1 and the policy of Platform Y requires a minimum Age Z2, and Age Z1 is smaller than Age Z2, then Person X cannot subscribe to Platform Y.",
  "FOL": "Age(Person X, Age Z1) ^ Policy(Platform Y, Age Z2) ^ SmallerThan(Age Z1, Age Z2) => CanNotSubscribeTo(Person X, Platform Y)"
 },
 "789": {
  "NL": "If Person X is of Age Z1 and the legal requirement for accessing Platform Y is Age Z2, and Age Z1 is smaller than Age Z2, then Person X lacks access to Platform Y.",
  "FOL": "Age(Person X, Age Z1) ^ LegalRequirement(Platform Y, Age Z2) ^ SmallerThan(Age Z1, Age Z2) => LacksAccess(Person X, Platform Y)"
 },
 "790": {
  "NL": "If Person X has Job Title Z1 and the industry standard for Authorization Y is Job Z2, but Job Z1 is different from Job Z2, then Person X cannot use Authorization Y.",
  "FOL": "JobTitle(Person X, Job Z1) ^ IndustryStandard(Job Z2, Authorization Y) ^ Different(Job Z1, Job Z2) => CanNotUse(Person X, Authorization Y)"
 },
 "791": {
  "NL": "If Person X is hired for Job Z1 and the company policy requires Job Z2 for Authorization Y, and Job Z1 is different from Job Z2, then Person X lacks access to Authorization Y.",
  "FOL": "HiredFor(Person X, Job Z1) ^ CompanyPolicy(Job Z2, Authorization Y) ^ Different(Job Z1, Job Z2) => LacksAccess(Person X, Authorization Y)"
 },
 "792": {
  "NL": "If Person X practices Skill Z1 and the skill level required for publishing Publication Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot publish Publication Y.",
  "FOL": "Practice(Person X, Skill Z1) ^ RequireSkillLevel(Publication Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotPublish(Person X, Publication Y)"
 },
 "793": {
  "NL": "If Person X has Age Z1 and the minimum age for visiting Facility Y is Age Z2, and Age Z1 is smaller than Age Z2, then Person X cannot visit Facility Y.",
  "FOL": "Have(Person X, Age Z1) ^ MinimumAge(Facility Y, Age Z2) ^ SmallerThan(Age Z1, Age Z2) => CanNotVisit(Person X, Facility Y)"
 },
 "794": {
  "NL": "If Facility Y requires Strength Z1 and Person X has Strength Z2, and Strength Z2 is smaller than Strength Z1, then Person X lacks the skill for Facility Y.",
  "FOL": "StrengthRequired(Facility Y, Strength Z1) ^ Have(Person X, Strength Z2) ^ SmallerThan(Strength Z2, Strength Z1) => LacksSkill(Person X, Facility Y)"
 },
 "795": {
  "NL": "If Person X is of Age Z1 and the health guideline for Alcohol Y is Age Z2, and Age Z1 is smaller than Age Z2, then Person X cannot buy Alcohol Y.",
  "FOL": "AgeOf(Person X, Age Z1) ^ HealthGuideline(Alcohol Y, Age Z2) ^ SmallerThan(Age Z1, Age Z2) => CanNotBuy(Person X, Alcohol Y)"
 },
 "796": {
  "NL": "If Person X lacks Skill Z2 and Tool A, which is constructed from Material Y, requires Skill Z2 to operate, then Person X cannot recycle Material Y.",
  "FOL": "Lack(Person X, Skill Z2) ^ Construct(Tool A, Material Y) ^ Operate(Tool A, Skill Z2) => CanNotRecycle(Person X, Material Y)"
 },
 "797": {
  "NL": "If Person X has inherited Disease Z2 and Food Y contains Substance A, and Substance A causes Disease Z2, then Person X cannot eat Food Y.",
  "FOL": "Inherit(Person X, Disease Z2) ^ Contains(Food Y, Substance A) ^ Cause(Disease Z2, Substance A) => CanNotEat(Person X, Food Y)"
 },
 "798": {
  "NL": "If Person X has lost Tool Z2 and Drug Y is administered with Skill A, which involves Tool Z2, then Person X cannot research Drug Y.",
  "FOL": "Lost(Person X, Tool Z2) ^ AdministeredWith(Drug Y, Skill A) ^ Involve(Skill A, Tool Z2) => CanNotResearch(Person X, Drug Y)"
 },
 "799": {
  "NL": "If Person X lacks Skill Z2 and Tool A is needed for recycling Material Y, and Tool A is associated with Skill Z2, then Person X cannot recycle Material Y.",
  "FOL": "Lack(Person X, Skill Z2) ^ NeededFor(Material Y, Tool A) ^ ToolFor(Tool A, Skill Z2) => CanNotRecycle(Person X, Material Y)"
 },
 "800": {
  "NL": "If Person X is allergic to Substance A and Food Z2 contains Substance A, and Plant Y is a type of Food Z2, then Person X avoids food from Plant Y.",
  "FOL": "AllergicTo(Person X, Substance A) ^ Contain(Food Z2, Substance A) ^ IsType(Plant Y, Food Z2) => AvoidsFood(Person X, Plant Y)"
 },
 "801": {
  "NL": "If Person X is younger than Age Z1 and the required age for accessing Financial Product Y is Age Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Financial Product Y.",
  "FOL": "YoungerThan(Person X, Age Z1) ^ RequiredAge(Financial Product Y, Age Z2) ^ GreaterThan(Age Z2, Age Z1) => CanNotAccess(Person X, Financial Product Y)"
 },
 "802": {
  "NL": "If Person X moved to Time Period Z1 and Skill Y was developed in Time Period Z2, and Time Period Z2 is later than Time Period Z1, then Person X cannot access Skill Y.",
  "FOL": "MoveTo(Person X, Time Period Z1) ^ DevelopedIn(Skill Y, Time Period Z2) ^ LaterThan(Time Period Z2, Time Period Z1) => CanNotAccess(Person X, Skill Y)"
 },
 "803": {
  "NL": "If Person X is below the legal age of Age Z1 and the required age for accessing Legislation Y is Age Z2, and Age Z1 is less than Age Z2, then Person X cannot access Legislation Y.",
  "FOL": "BelowLegalAge(Person X, Age Z1) ^ RequiredAge(Legislation Y, Age Z2) ^ LessThan(Age Z1, Age Z2) => CanNotAccess(Person X, Legislation Y)"
 },
 "804": {
  "NL": "If Person X works in Region Z1 and Natural Phenomenon Y occurs in Region Z2, and Region Z1 is different from Region Z2, then Person X cannot access Natural Phenomenon Y.",
  "FOL": "WorkIn(Person X, Region Z1) ^ OccurIn(Natural Phenomenon Y, Region Z2) ^ Different(Region Z1, Region Z2) => CanNotAccess(Person X, Natural Phenomenon Y)"
 },
 "805": {
  "NL": "If Artwork Y is located in Facility Z and Facility Z is closed during Time Period Z1, and Person X studies during Time Period Z1, then Person X cannot access Artwork Y.",
  "FOL": "LocatedIn(Artwork Y, Facility Z) ^ ClosedDuring(Facility Z, Time Period Z1) ^ Study(Person X, Time Period Z1) => CanNotAccess(Person X, Artwork Y)"
 },
 "806": {
  "NL": "If Person X is below the legal age of Age Z1 and the game Y has an age restriction of Age Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Game Y.",
  "FOL": "BelowLegalAge(Person X, Age Z1) ^ AgeRestricted(Game Y, Age Z2) ^ GreaterThan(Age Z2, Age Z1) => CanNotAccess(Person X, Game Y)"
 },
 "807": {
  "NL": "If Person X is under the age of Z1 and Game Y has mature content for ages Z2 and above, and Age Z2 is greater than Age Z1, then Person X cannot access Game Y.",
  "FOL": "UnderAge(Person X, Age Z1) ^ MatureContent(Game Y, Age Z2) ^ GreaterThan(Age Z2, Age Z1) => CanNotAccess(Person X, Game Y)"
 },
 "808": {
  "NL": "If Animal X has migrated to Region Z1 and Animal Y lives in Region Z2, and Region Z1 is different from Region Z2, then Animal X cannot access Animal Y.",
  "FOL": "MigratedTo(Animal X, Region Z1) ^ LiveIn(Animal Y, Region Z2) ^ Different(Region Z1, Region Z2) => CanNotAccess(Animal X, Animal Y)"
 },
 "809": {
  "NL": "If Animal X is adapted to Region Z1 and Natural Phenomenon Y occurs in Region Z2, and Region Z1 and Region Z2 are different, then Animal X cannot access Natural Phenomenon Y.",
  "FOL": "AdaptedTo(Animal X, Region Z1) ^ OccurIn(Natural Phenomenon Y, Region Z2) ^ DifferentRegion(Region Z1, Region Z2) => CanNotAccess(Animal X, Natural Phenomenon Y)"
 },
 "810": {
  "NL": "If Animal X's natural habitat is Region Z1 and Game Y is released in Region Z2, and Region Z1 is different from Region Z2, then Animal X cannot access Game Y.",
  "FOL": "NaturalHabitat(Animal X, Region Z1) ^ ReleasedIn(Game Y, Region Z2) ^ Different(Region Z1, Region Z2) => CanNotAccess(Animal X, Game Y)"
 },
 "811": {
  "NL": "If Organization X operates in Time Period Z1 and Event Y exists in Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Organization X cannot access Event Y.",
  "FOL": "OperateIn(Organization X, Time Period Z1) ^ ExistIn(Event Y, Time Period Z2) ^ EarlierThan(Time Period Z1, Time Period Z2) => CanNotAccess(Organization X, Event Y)"
 },
 "812": {
  "NL": "If Animal X was born in Region Z1 and Show Y is restricted to Region Z2, and Region Z1 is different from Region Z2, then Animal X is not viewing Show Y.",
  "FOL": "BornIn(Animal X, Region Z1) ^ RestrictedTo(Show Y, Region Z2) ^ Different(Region Z1, Region Z2) => NotViewing(Animal X, Show Y)"
 },
 "813": {
  "NL": "If Animal X sleeps during Time Period Z1 and Show Y airs during Time Period Z2, and Time Period Z1 is the same as Time Period Z2, then Animal X cannot access Show Y.",
  "FOL": "SleepDuring(Animal X, Time Period Z1) ^ AirsDuring(Show Y, Time Period Z2) ^ Same(Time Period Z1, Time Period Z2) => CanNotAccess(Animal X, Show Y)"
 },
 "814": {
  "NL": "If Technology X is adapted for Condition Z1 and Facility Y provides Condition Z2, but Condition Z1 is different from Condition Z2, then Technology X cannot access Facility Y.",
  "FOL": "AdaptedFor(Technology X, Condition Z1) ^ Provide(Facility Y, Condition Z2) ^ Different(Condition Z1, Condition Z2) => CanNotAccess(Technology X, Facility Y)"
 },
 "815": {
  "NL": "If Vehicle X operates in Region Z1 and Animal Y is adapted to Region Z2, and Region Z1 is different from Region Z2, then Animal Y cannot access Vehicle X.",
  "FOL": "OperateIn(Vehicle X, Region Z1) ^ AdaptedTo(Animal Y, Region Z2) ^ Different(Region Z1, Region Z2) => CanNotAccess(Vehicle X, Animal Y)"
 },
 "816": {
  "NL": "If Vehicle X is used in Time Period Z1 and Animal Y exists in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "FOL": "UsedIn(Vehicle X, Time Period Z1) ^ ExistIn(Animal Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Vehicle X, Animal Y)"
 },
 "817": {
  "NL": "If Vehicle X is overloaded with Weight Z1 and the weight limit for Platform Y is Weight Z2, and Weight Z1 is greater than Weight Z2, then Vehicle X cannot access Platform Y.",
  "FOL": "Overloaded(Vehicle X, Weight Z1) ^ WeightLimit(Platform Y, Weight Z2) ^ GreaterThan(Weight Z1, Weight Z2) => CanNotAccess(Vehicle X, Platform Y)"
 },
 "818": {
  "NL": "If Natural Phenomenon X is predicted for Time Period Z1 and Food Y is harvested during Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Natural Phenomenon X cannot access Food Y.",
  "FOL": "Predicted(Natural Phenomenon X, Time Period Z1) ^ HarvestedDuring(Food Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Natural Phenomenon X, Food Y)"
 },
 "819": {
  "NL": "If Game X is set in Time Period Z1 and Show Y is scheduled at Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Game X cannot access Show Y.",
  "FOL": "SetIn(Game X, Time Period Z1) ^ ScheduledAt(Show Y, Time Period Z2) ^ EarlierThan(Time Period Z1, Time Period Z2) => CanNotAccess(Game X, Show Y)"
 },
 "820": {
  "NL": "If Tool X is designed for Temperature Z1 and Alcohol Y is damaged at Temperature Z2, and Temperature Z1 is higher than Temperature Z2, then Tool X cannot access Alcohol Y.",
  "FOL": "DesignedFor(Tool X, Temperature Z1) ^ DamagedAt(Alcohol Y, Temperature Z2) ^ HigherThan(Temperature Z1, Temperature Z2) => CanNotAccess(Tool X, Alcohol Y)"
 },
 "821": {
  "NL": "If Substance X is produced in Time Period Z1 and Plant Y blooms in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Substance X cannot access Plant Y.",
  "FOL": "ProducedIn(Substance X, Time Period Z1) ^ BloomsIn(Plant Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Substance X, Plant Y)"
 },
 "822": {
  "NL": "If Substance X exists in Time Period Z1 and Show Y is produced at Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Substance X is not in Show Y.",
  "FOL": "ExistIn(Substance X, Time Period Z1) ^ ProducedAt(Show Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => NotInShow(Substance X, Show Y)"
 },
 "823": {
  "NL": "If Natural Phenomenon X happens during Time Period Z1 and Artwork Y was made during Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Natural Phenomenon X cannot access Artwork Y.",
  "FOL": "HappenDuring(Natural Phenomenon X, Time Period Z1) ^ Made(Artwork Y, Time Period Z2) ^ EarlierThan(Time Period Z1, Time Period Z2) => CanNotAccess(Natural Phenomenon X, Artwork Y)"
 },
 "824": {
  "NL": "If Drug X is distributed through Technology Z and Platform Y was developed in Time Period A, and Technology Z did not exist in Time Period A, then Drug X cannot be accessed on Platform Y.",
  "FOL": "Distribute(Drug X, Technology Z) ^ DevelopedIn(Platform Y, Time Period A) ^ NotExist(Technology Z, Time Period A) => CanNotAccess(Drug X, Platform Y)"
 },
 "825": {
  "NL": "If Person X has Condition Z and Job Y requires Skill A, but Condition Z lacks Skill A, then Person X cannot access Job Y.",
  "FOL": "Have(Person X, Condition Z) ^ Requires(Job Y, Skill A) ^ Lacks(Condition Z, Skill A) => CanNotAccess(Person X, Job Y)"
 },
 "826": {
  "NL": "If Electronic Device X operates with Technology Z and Platform Y was developed in Time Period A, and Technology Z did not exist in Time Period A, then Electronic Device X cannot access Platform Y.",
  "FOL": "OperateWith(Electronic Device X, Technology Z) ^ DevelopedIn(Platform Y, Time Period A) ^ NotExist(Technology Z, Time Period A) => CanNotAccess(Electronic Device X, Platform Y)"
 },
 "827": {
  "NL": "If Material X requires Condition Z and Condition Z needs Technology A, but Platform Y does not incorporate Technology A, then Material X is not compatible with Platform Y.",
  "FOL": "Requires(Material X, Condition Z) ^ Needs(Condition Z, Technology A) ^ NotIncorporate(Platform Y, Technology A) => NotCompatible(Material X, Platform Y)"
 },
 "828": {
  "NL": "If Artwork Y requires Condition Z and Facility X is made of Material A, which is vulnerable to Condition Z, then Facility X cannot access Artwork Y.",
  "FOL": "Require(Artwork Y, Condition Z) ^ MadeOf(Facility X, Material A) ^ VulnerableTo(Material A, Condition Z) => CanNotAccess(Facility X, Artwork Y)"
 },
 "829": {
  "NL": "If Technology X is made from Material A, and Material A requires Condition Z, but Material Y lacks Condition Z, then Technology X is incompatible with Material Y.",
  "FOL": "MadeFrom(Technology X, Material A) ^ Require(Material A, Condition Z) ^ Lack(Material Y, Condition Z) => IncompatibleWith(Technology X, Material Y)"
 },
 "830": {
  "NL": "If Drug X requires Condition Z2 and Natural Place Y is located in Region A, and Condition Z2 is not present in Region A, then Drug X is not local to Natural Place Y.",
  "FOL": "Requires(Drug X, Condition Z2) ^ LocatedIn(Natural Place Y, Region A) ^ NotPresent(Condition Z2, Region A) => NotLocal(Drug X, Natural Place Y)"
 },
 "831": {
  "NL": "If Tool X is operated by Person A, and Person A works in Condition Z2, and Condition Z2 is absent in Natural Phenomenon Y, then Tool X cannot access Natural Phenomenon Y.",
  "FOL": "OperatedBy(Tool X, Person A) ^ WorkIn(Person A, Condition Z2) ^ AbsentIn(Natural Phenomenon Y, Condition Z2) => CanNotAccess(Tool X, Natural Phenomenon Y)"
 },
 "832": {
  "NL": "If Person X works in Region Z1 and Platform Y violates Legislation A, which is enforced in Region Z1, then Person X has a restriction on Platform Y.",
  "FOL": "WorksIn(Person X, Region Z1) ^ Violates(Platform Y, Legislation A) ^ EnforcedIn(Legislation A, Region Z1) => HasRestriction(Person X, Platform Y)"
 },
 "833": {
  "NL": "If Game Y is designed for Platform Z and Electronic Device X is manufactured by Organization A, and Organization A does not support Platform Z, then Electronic Device X is incompatible with Game Y.",
  "FOL": "DesignedFor(Game Y, Platform Z) ^ ManufacturedBy(Electronic Device X, Organization A) ^ NotSupport(Organization A, Platform Z) => Incompatible(Electronic Device X, Game Y)"
 },
 "834": {
  "NL": "If Animal X existed in Time Period Z2 and Publication Y was printed in Time Period A, and Time Period A is later than Time Period Z2, then Animal X cannot access Publication Y.",
  "FOL": "ExistedIn(Animal X, Time Period Z2) ^ PrintedIn(Publication Y, Time Period A) ^ LaterThan(Time Period A, Time Period Z2) => CanNotAccess(Animal X, Publication Y)"
 },
 "835": {
  "NL": "If Material X exists in Region Z1 and Region Z1 prevents Condition A, and Natural Phenomenon Y needs Condition A to occur, then Material X is safe from Natural Phenomenon Y.",
  "FOL": "ExistIn(Material X, Region Z1) ^ Prevent(Region Z1, Condition A) ^ Need(Natural Phenomenon Y, Condition A) => SafeFrom(Material X, Natural Phenomenon Y)"
 },
 "836": {
  "NL": "If Tool X requires Condition Z1 and Food Y is stored in Region A, and Condition Z1 is absent in Region A, then Tool X is not used for the preparation of Food Y.",
  "FOL": "Requires(Tool X, Condition Z1) ^ StoredIn(Food Y, Region A) ^ AbsentIn(Region A, Condition Z1) => NotUsedForPreparation(Tool X, Food Y)"
 },
 "837": {
  "NL": "If Artwork Y requires Condition Z and Facility X is located in Region A, and Condition Z is not available in Region A, then Artwork Y is not in the collection of Facility X.",
  "FOL": "Require(Artwork Y, Condition Z) ^ LocatedIn(Facility X, Region A) ^ NotAvailableIn(Condition Z, Region A) => NotInCollection(Facility X, Artwork Y)"
 },
 "838": {
  "NL": "If Game X requires Skill Z and Disease Y causes Condition A which hinders Skill Z, then Game X is not suitable for someone with Disease Y.",
  "FOL": "Requires(Game X, Skill Z) ^ Causes(Disease Y, Condition A) ^ Hinders(Condition A, Skill Z) => NotSuitableFor(Game X, Disease Y)"
 },
 "839": {
  "NL": "If Event X requires Tool A and Skill Z1 is needed to operate Tool A, but Job Y lacks Skill Z1, then Job Y is not qualified for Event X.",
  "FOL": "Require(Event X, Tool A) ^ Operate(Skill Z1, Tool A) ^ Lacks(Job Y, Skill Z1) => NotQualifiedFor(Event X, Job Y)"
 },
 "840": {
  "NL": "If Event X requires Skill Z1 and Job Y is performed by Person A, but Person A does not possess Skill Z1, then Person A is not qualified for Event X.",
  "FOL": "Necessary(Event X, Skill Z1) ^ PerformedBy(Job Y, Person A) ^ NotPossess(Person A, Skill Z1) => NotQualifiedFor(Event X, Job Y)"
 },
 "841": {
  "NL": "If Material X is cultivated in Facility A, and Facility A is located in Region Z1, and Disease Y is absent in Region Z1, then Disease Y cannot access Material X.",
  "FOL": "CultivatedIn(Material X, Facility A) ^ LocatedIn(Facility A, Region Z1) ^ AbsentIn(Disease Y, Region Z1) => CanNotAccess(Material X, Disease Y)"
 },
 "842": {
  "NL": "If Platform X operates on Technology Z2 and Game Y was developed in Time Period A, but Technology Z2 was not invented in Time Period A, then Platform X cannot access Game Y.",
  "FOL": "Operate(Platform X, Technology Z2) ^ DevelopedIn(Game Y, Time Period A) ^ NotInvented(Technology Z2, Time Period A) => CanNotAccess(Platform X, Game Y)"
 },
 "843": {
  "NL": "If Job Y requires Skill Z and Animal X is not in Condition A, and Skill Z requires Condition A, then Animal X is not suitable for Job Y.",
  "FOL": "Require(Job Y, Skill Z) ^ NotInCondition(Animal X, Condition A) ^ Require(Skill Z, Condition A) => NotSuitableFor(Animal X, Job Y)"
 },
 "844": {
  "NL": "If Organization X conducts Event A that happens during Time Period Z2 and Natural Place Y is unavailable during Time Period Z2, then Organization X cannot access Natural Place Y.",
  "FOL": "ConductEvent(Organization X, Event A) ^ HappenIn(Event A, Time Period Z2) ^ UnavailableDuring(Natural Place Y, Time Period Z2) => CanNotAccess(Organization X, Natural Place Y)"
 },
 "845": {
  "NL": "If Person X works in Organization A, and Organization A is located in Region Z1, and Region Z1 requires Authorization Y, then Person X needs to use Authorization Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ LocatedIn(Organization A, Region Z1) ^ Requires(Region Z1, Authorization Y) => NeedToUse(Person X, Authorization Y)"
 },
 "846": {
  "NL": "If Person X wants to access Facility Z, and Facility Z is owned by Organization A, and Organization A requires Authorization Y, then Person X must comply with the rules of Authorization Y.",
  "FOL": "WantsToAccess(Person X, Facility Z) ^ OwnedBy(Facility Z, Organization A) ^ Requires(Organization A, Authorization Y) => MustComplyWithRules(Person X, Authorization Y)"
 },
 "847": {
  "NL": "If Person X works in Job Z and Job Z involves Event A which is regulated by Authorization Y, then Person X applies for Authorization Y.",
  "FOL": "WorksIn(Person X, Job Z) ^ Involves(Job Z, Event A) ^ RegulatedBy(Event A, Authorization Y) => AppliesFor(Person X, Authorization Y)"
 },
 "848": {
  "NL": "If Person X works in Job Z and Job Z uses Tool A, and Tool A requires Authorization Y, then Person X needs to obtain Authorization Y.",
  "FOL": "WorksIn(Person X, Job Z) ^ Uses(Job Z, Tool A) ^ Requires(Tool A, Authorization Y) => NeedToObtain(Person X, Authorization Y)"
 },
 "850": {
  "NL": "If Person X is a citizen of Region Z, and Legislation Y applies to Event A, which is common in Region Z, then Person X needs to comply with Legislation Y.",
  "FOL": "IsCitizen(Person X, Region Z) ^ ApplyTo(Legislation Y, Event A) ^ CommonIn(Event A, Region Z) => NeedToComplyWith(Person X, Legislation Y)"
 },
 "851": {
  "NL": "If Person X has Job Z and Job Z requires Skill A, and Skill A is based on Technology Y, then Person X needs to use Technology Y.",
  "FOL": "HasJob(Person X, Job Z) ^ Requires(Job Z, Skill A) ^ BasedOn(Skill A, Technology Y) => NeedToUse(Person X, Technology Y)"
 },
 "852": {
  "NL": "If Person X visits Region Z1 and Region Z1 has Legislation A that mandates Authorization Y, then Person X needs to use Authorization Y.",
  "FOL": "Visits(Person X, Region Z1) ^ HasLegislation(Region Z1, Legislation A) ^ Mandates(Legislation A, Authorization Y) => NeedToUse(Person X, Authorization Y)"
 },
 "853": {
  "NL": "If Person X is employed by Organization A, which is located in Region Z1, and Region Z1 is protected by Authorization Y, then Person X has an obligation to obtain Authorization Y.",
  "FOL": "Protected(Region Z1, Authorization Y) ^ EmployedBy(Person X, Organization A) ^ LocatedIn(Organization A, Region Z1) => HasObligation(Person X, Authorization Y)"
 },
 "854": {
  "NL": "If Person X is hired for Job Z and Job Z requires Skill A, and Skill A is regulated by Authorization Y, then Person X applies for Authorization Y.",
  "FOL": "Hired(Person X, Job Z) ^ Require(Job Z, Skill A) ^ Regulate(Skill A, Authorization Y) => AppliesFor(Person X, Authorization Y)"
 },
 "856": {
  "NL": "If Person X has been promoted to Job Z1 and Tool Y is needed for Skill A, and Skill A is required for Job Z1, then Person X needs to use Tool Y.",
  "FOL": "PromotedTo(Person X, Job Z1) ^ NeededFor(Tool Y, Skill A) ^ RequiredFor(Skill A, Job Z1) => NeedToUse(Person X, Tool Y)"
 },
 "857": {
  "NL": "If Person X moves to Region Z and Legislation Y is enforced by Organization A which operates in Region Z, then Person X needs to obey Legislation Y.",
  "FOL": "MoveTo(Person X, Region Z) ^ EnforcedBy(Legislation Y, Organization A) ^ OperateIn(Organization A, Region Z) => NeedToObey(Person X, Legislation Y)"
 },
 "858": {
  "NL": "If Person X works at Facility Z and Facility Z handles Material A, and Authorization Y regulates Material A, then Person X needs to obtain Authorization Y.",
  "FOL": "WorksAt(Person X, Facility Z) ^ Handles(Facility Z, Material A) ^ Regulates(Authorization Y, Material A) => NeedToObtain(Person X, Authorization Y)"
 },
 "859": {
  "NL": "If Person X has Job Z and Job Z involves working in Condition A, and Material Y is necessary for Condition A, then Person X needs to use Material Y.",
  "FOL": "Has(Person X, Job Z) ^ WorkIn(Job Z, Condition A) ^ NecessaryIn(Material Y, Condition A) => NeedToUse(Person X, Material Y)"
 },
 "860": {
  "NL": "If Person X is interested in Event A, and Event A is hosted at Facility Z, and Facility Z requires Authorization Y, then Person X needs to obtain Authorization Y.",
  "FOL": "InterestedIn(Person X, Event A) ^ HostedAt(Event A, Facility Z) ^ Requires(Facility Z, Authorization Y) => NeedToObtain(Person X, Authorization Y)"
 },
 "861": {
  "NL": "If Person X has Condition A and Disease Z1 is associated with Condition A, and Disease Z1 can lead to Disease Y, then Person X needs to prevent Disease Y.",
  "FOL": "HasCondition(Person X, Condition A) ^ AssociatedWith(Disease Z1, Condition A) ^ CanLeadTo(Disease Z1, Disease Y) => NeedToPrevent(Person X, Disease Y)"
 },
 "862": {
  "NL": "If Person X has Job Z and Job Z needs Tool A, and Tool A is supplied by Platform Y, then Person X needs to use Platform Y.",
  "FOL": "Has(Person X, Job Z) ^ Needs(Job Z, Tool A) ^ SuppliedBy(Tool A, Platform Y) => NeedToUse(Person X, Platform Y)"
 },
 "863": {
  "NL": "If Person X wants to enter Region Z, and Region Z has Legislation A that mandates Authorization Y, then Person X is responsible for obtaining Authorization Y.",
  "FOL": "WantsToEnter(Person X, Region Z) ^ HasLegislation(Region Z, Legislation A) ^ Mandates(Legislation A, Authorization Y) => ResponsibleFor(Person X, Authorization Y)"
 },
 "864": {
  "NL": "If Person X is naturalized in Region Z and Legislation Y, which was passed in Facility A, is located in Region Z, then Person X needs to comply with Legislation Y.",
  "FOL": "Naturalized(Person X, Region Z) ^ PassedIn(Legislation Y, Facility A) ^ LocatedIn(Facility A, Region Z) => NeedToComplyWith(Person X, Legislation Y)"
 },
 "865": {
  "NL": "If Furniture X is made of Material Z1 and Material Z1 is made of Substance A, and Substance A dissolves in Alcohol Y, then Furniture X cannot be disinfected with Alcohol Y.",
  "FOL": "MaterialOf(Furniture X, Material Z1) ^ MadeOf(Material Z1, Substance A) ^ DissolveIn(Substance A, Alcohol Y) => CanNotBeDisinfectedWith(Furniture X, Alcohol Y)"
 },
 "866": {
  "NL": "If Furniture X is made of Material A and Material A has Condition Z2, and Substance Y is ineffective on Condition Z2, then Furniture X cannot be painted with Substance Y.",
  "FOL": "MadeOf(Furniture X, Material A) ^ MaterialCondition(Material A, Condition Z2) ^ SubstanceIneffective(Condition Z2, Substance Y) => CanNotBePaintedWith(Furniture X, Substance Y)"
 },
 "867": {
  "NL": "If Furniture X is stored in Region A and the condition of Region A makes Substance Y ineffective, then Furniture X cannot be painted with Substance Y.",
  "FOL": "StoredIn(Furniture X, Region A) ^ RegionCondition(Region A, Condition Z2) ^ SubstanceIneffective(Condition Z2, Substance Y) => CanNotBePaintedWith(Furniture X, Substance Y)"
 },
 "868": {
  "NL": "If Substance X contains Food Z1, and Food Z1 contains Substance A, and Substance A is harmful for Disease Y, then Substance X cannot prevent Disease Y.",
  "FOL": "Contains(Substance X, Food Z1) ^ Contains(Food Z1, Substance A) ^ Harmful(Substance A, Disease Y) => CanNotPrevent(Substance X, Disease Y)"
 },
 "869": {
  "NL": "If Tool X belongs to Person A, and Person A lives in Region Z2, and Region Z2 is protected from Natural Phenomenon Y, then Tool X cannot be damaged by Natural Phenomenon Y.",
  "FOL": "BelongsTo(Tool X, Person A) ^ LivesIn(Person A, Region Z2) ^ ProtectedFrom(Region Z2, Natural Phenomenon Y) => CanNotBeDamagedBy(Tool X, Natural Phenomenon Y)"
 },
 "870": {
  "NL": "If Food Y contains Substance A, and Substance A triggers Condition Z1, and Condition Z1 leads to Disease X, then Food Y cannot prevent Disease X.",
  "FOL": "Contains(Food Y, Substance A) ^ Triggers(Substance A, Condition Z1) ^ LeadsTo(Condition Z1, Disease X) => CanNotPrevent(Disease X, Food Y)"
 },
 "871": {
  "NL": "If Electronic Device X is made from Material A, and Material A is composed of Material Z1, and Material Z1 is resistant to Substance Y, then Electronic Device X cannot be damaged by Substance Y.",
  "FOL": "MadeFrom(Electronic Device X, Material A) ^ ComposedOf(Material A, Material Z1) ^ ResistantTo(Material Z1, Substance Y) => CanNotBeDamagedBy(Electronic Device X, Substance Y)"
 },
 "872": {
  "NL": "If Natural Place X contains Substance A, and Substance A is composed of Substance Z1, and Substance Z1 is incompatible with Substance Y, then Natural Place X cannot contain Substance Y.",
  "FOL": "Contains(Natural Place X, Substance A) ^ ComposedOf(Substance A, Substance Z1) ^ Incompatible(Substance Z1, Substance Y) => CanNotContain(Natural Place X, Substance Y)"
 },
 "873": {
  "NL": "If Organization X is located in Region Z2, which is governed by Facility A, and Facility A prohibits the production of Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "FOL": "LocatedIn(Organization X, Region Z2) ^ GovernedBy(Region Z2, Facility A) ^ Prohibit(Facility A, Alcohol Y) => CanNotProduce(Organization X, Alcohol Y)"
 },
 "874": {
  "NL": "If Natural Phenomenon X triggers Event A, and Event A leads to Condition Z1, and Condition Z1 leads to Disease Y, then Natural Phenomenon X cannot prevent Disease Y.",
  "FOL": "Triggers(Natural Phenomenon X, Event A) ^ LeadsTo(Event A, Condition Z1) ^ LeadsTo(Condition Z1, Disease Y) => CanNotPrevent(Natural Phenomenon X, Disease Y)"
 },
 "875": {
  "NL": "If Artwork Y is made of Material Z1 and Material Z1 is made of Substance A, and Substance A is non-reactive with Alcohol X, then Alcohol X cannot dissolve Artwork Y.",
  "FOL": "MadeOf(Artwork Y, Material Z1) ^ MadeOf(Material Z1, Substance A) ^ NonReactive(Substance A, Alcohol X) => CanNotDissolve(Alcohol X, Artwork Y)"
 },
 "876": {
  "NL": "If Alcohol X contains Substance A, and Substance A causes Condition Z2, and Condition Z2 leads to Disease Y, then Alcohol X cannot prevent Disease Y.",
  "FOL": "Contains(Alcohol X, Substance A) ^ Causes(Substance A, Condition Z2) ^ LeadsTo(Condition Z2, Disease Y) => CanNotPrevent(Alcohol X, Disease Y)"
 },
 "877": {
  "NL": "If Facility Y is of type Facility Z1 and Facility Z1 is located in Region A, and Alcohol X is prohibited in Region A, then Alcohol X cannot be served in Facility Y.",
  "FOL": "FacilityType(Facility Y, Facility Z1) ^ LocatedIn(Facility Z1, Region A) ^ AlcoholProhibited(Region A, Alcohol X) => CanNotBeServedIn(Alcohol X, Facility Y)"
 },
 "878": {
  "NL": "If Drug X is produced in Facility A, Facility A is owned by Organization Z1, and Organization Z1 has banned Organization Y, then Drug X cannot be distributed by Organization Y.",
  "FOL": "ProducedIn(Drug X, Facility A) ^ OwnedBy(Facility A, Organization Z1) ^ BannedBy(Organization Z1, Organization Y) => CanNotBeDistributedBy(Drug X, Organization Y)"
 },
 "879": {
  "NL": "If Facility X is in Region Z2, and Region Z2 is governed by Facility A, and Facility A prohibits Alcohol Y, then Alcohol Y cannot be served at Facility X.",
  "FOL": "FacilityRegion(Facility X, Region Z2) ^ GovernedBy(Region Z2, Facility A) ^ Prohibit(Facility A, Alcohol Y) => CanNotBeServedAt(Facility X, Alcohol Y)"
 },
 "880": {
  "NL": "If Drug X is made from Material C, and Material C is composed of Substance A, and Substance A reacts with Material Y, then Drug X cannot be packaged in Material Y.",
  "FOL": "MadeFrom(Drug X, Material C) ^ ComposedOf(Material C, Substance A) ^ ReactsWith(Substance A, Material Y) => CanNotBePackagedIn(Drug X, Material Y)"
 },
 "881": {
  "NL": "If Person X has Job A that pays Money Z1 and the cost of Food Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can order Food Y.",
  "FOL": "Job(Person X, Job A) ^ Pay(Job A, Money Z1) ^ Cost(Food Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanOrder(Person X, Food Y)"
 },
 "882": {
  "NL": "If Person X earns Money Z1 and Tool Y is manufactured by Organization A, which has set the price for the tool at Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Tool Y.",
  "FOL": "Earn(Person X, Money Z1) ^ ManufacturedBy(Tool Y, Organization A) ^ SetPrice(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Tool Y)"
 },
 "883": {
  "NL": "If Person X has won Money Z1 and Game Y is developed by Organization A, and Organization A has set the price of the game as Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "FOL": "Win(Person X, Money Z1) ^ DevelopedBy(Game Y, Organization A) ^ SetPrice(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Game Y)"
 },
 "884": {
  "NL": "If Person X works at Job A which pays Money Z1, and the retail price of Electronic Device Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Electronic Device Y.",
  "FOL": "WorkAt(Person X, Job A) ^ Pay(Job A, Money Z1) ^ RetailPrice(Electronic Device Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Electronic Device Y)"
 },
 "885": {
  "NL": "If Person X has a job A that pays Money Z1 and the minimum investment required for Financial Product Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X has the capital for Financial Product Y.",
  "FOL": "Job(Person X, Job A) ^ Pay(Job A, Money Z1) ^ RequireMinimumInvestment(Financial Product Y, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => HasCapital(Person X, Financial Product Y)"
 },
 "886": {
  "NL": "If Person X has a job A that requires Technology C, and Technology C requires Skill Z2, and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobInvolves(Job A, Technology C) ^ TechnologyRequiresSkill(Technology C, Skill Z2) ^ NeededFor(Skill Z2, Plant Y) => CanMaintainPlant(Person X, Plant Y)"
 },
 "887": {
  "NL": "If Person X has a job A that requires Tool C, and Tool C is operated by Skill Z1, and Skill Z1 is required for reading Publication Y, then Person X can discuss Publication Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobRequires(Job A, Tool C) ^ ToolOperatedBy(Tool C, Skill Z1) ^ RequiredForReading(Skill Z1, Publication Y) => CanDiscuss(Person X, Publication Y)"
 },
 "888": {
  "NL": "If Person X works in Job A which requires Skill Z1, and Job C also requires Skill Z1, and Organization Y offers Job C, then Person X can work for Organization Y.",
  "FOL": "WorkIn(Person X, Job A) ^ Require(Job A, Skill Z1) ^ RequireFor(Job C, Skill Z1) ^ Offer(Organization Y, Job C) => CanWorkFor(Person X, Organization Y)"
 },
 "889": {
  "NL": "If Person X has Job A and Skill Z is used in Tool C, and Tool C is utilized in Job A, and Skill Z is required for Authorization Y, then Person X can use Authorization Y.",
  "FOL": "Job(Person X, Job A) ^ UsedIn(Skill Z, Tool C) ^ UtilizedIn(Tool C, Job A) ^ RequiredForAuthorization(Skill Z, Authorization Y) => CanUse(Person X, Authorization Y)"
 },
 "890": {
  "NL": "If Person X works in Job C and Skill Z2 is required in Job C, and Plant Y is sensitive to Condition A which can be managed by Skill Z2, then Person X can maintain Plant Y.",
  "FOL": "WorkIn(Person X, Job C) ^ RequiredIn(Skill Z2, Job C) ^ SensitiveTo(Plant Y, Condition A) ^ Manage(Skill Z2, Condition A) => CanMaintainPlant(Person X, Plant Y)"
 },
 "891": {
  "NL": "If Person X has a job A that requires dealing with Material C, and handling Material C requires Skill Z1, and Skill Z1 is developed for Platform Y, then Person X has skills for Platform Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobDealsWith(Job A, Material C) ^ MaterialHandling(Material C, Skill Z1) ^ DevelopedFor(Skill Z1, Platform Y) => HasSkills(Person X, Platform Y)"
 },
 "892": {
  "NL": "If Person X has a job C that requires Skill Z2, and Job C requires managing Condition A which Plant Y is sensitive to, then Person X can maintain Plant Y.",
  "FOL": "JobRequires(Person X, Job C) ^ JobRequires(Job C, Skill Z2) ^ SensitiveTo(Plant Y, Condition A) ^ Manage(Skill Z2, Condition A) => CanMaintainPlant(Person X, Plant Y)"
 },
 "893": {
  "NL": "If Person X has a job A that requires dealing with Material C, and Person X has Skill Z for handling Material C, and Skill Z is required for cooking Food Y, then Person X can cook Food Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobDealsWith(Job A, Material C) ^ MaterialHandling(Material C, Skill Z) ^ RequiredFor(Skill Z, Food Y) => CanCook(Person X, Food Y)"
 },
 "894": {
  "NL": "If Person X has Condition Z1 and Substance Y neutralizes Substance A, and Food C contains Substance A and triggers Condition Z1, then Person X can be exposed to Substance Y.",
  "FOL": "Contract(Person X, Condition Z1) ^ Neutralize(Substance Y, Substance A) ^ Contain(Substance A, Food C) ^ Trigger(Food C, Condition Z1) => CanBeExposedTo(Person X, Substance Y)"
 },
 "895": {
  "NL": "If Person X has a job A that requires Tool C, and Skill Z1 is needed to use Tool C, and Skill Z1 is also required for the maintenance of Tool Y, then Person X can maintain Tool Y.",
  "FOL": "JobRequires(Person X, Job A) ^ JobRequires(Job A, Tool C) ^ SkillToUse(Skill Z1, Tool C) ^ RequiredForRepair(Skill Z1, Tool Y) => CanMaintain(Person X, Tool Y)"
 },
 "896": {
  "NL": "If Person X inherits Space Z1 and the condition of Space Z1 is Condition A, and Artwork Y is made of Material C which needs Condition A, then Person X can display Artwork Y.",
  "FOL": "Inherit(Person X, Space Z1) ^ ConditionOf(Space Z1, Condition A) ^ MadeOf(Artwork Y, Material C) ^ Need(Material C, Condition A) => CanDisplay(Person X, Artwork Y)"
 },
 "897": {
  "NL": "If Event X is organized by Organization A, and Organization A operates in Time Period Z1, and Technology Y originated during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Event X can access Technology Y.",
  "FOL": "OrganizedBy(Event X, Organization A) ^ OperateIn(Organization A, Time Period Z1) ^ OriginatedDuring(Technology Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Event X, Technology Y)"
 },
 "898": {
  "NL": "If Organization X operates in Time Period Z1 and Alcohol Y is brewed by Person A, who lived in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Alcohol Y.",
  "FOL": "OperateIn(Organization X, Time Period Z1) ^ BrewedBy(Alcohol Y, Person A) ^ LivedIn(Person A, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Organization X, Alcohol Y)"
 },
 "899": {
  "NL": "If Organization X conducts an activity during Time Period Z1 and Technology Y was invented during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Technology Y.",
  "FOL": "ConductActivity(Organization X, Event A) ^ HappenIn(Event A, Time Period Z1) ^ InventedIn(Technology Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Organization X, Technology Y)"
 },
 "900": {
  "NL": "If Facility X is owned by Organization A, and Organization A is active during Time Period Z1, and Financial Product Y is offered during Time Period Z2, and Time Period Z1 starts before the end of Time Period Z2, then Facility X can access Financial Product Y.",
  "FOL": "OwnedBy(Facility X, Organization A) ^ ActiveIn(Organization A, Time Period Z1) ^ OfferDuring(Financial Product Y, Time Period Z2) ^ StartBeforeEnd(Time Period Z1, Time Period Z2) => CanAccess(Facility X, Financial Product Y)"
 },
 "901": {
  "NL": "If Person A is involved in Event X and lives in Time Period Z1, and Technology Y was developed during Time Period Z2 which is earlier than Time Period Z1, then Event X can access Technology Y.",
  "FOL": "InvolveIn(Person A, Event X) ^ LiveIn(Person A, Time Period Z1) ^ DevelopedDuring(Technology Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Event X, Technology Y)"
 },
 "902": {
  "NL": "If Person X works in Organization A, and Organization A operates in Facility C, and Facility C is located in Region Z, and Event Y is organized in Region Z, then Person X can access Event Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ OperateIn(Organization A, Facility C) ^ LocatedIn(Facility C, Region Z) ^ OrganizedIn(Event Y, Region Z) => CanAccess(Person X, Event Y)"
 },
 "903": {
  "NL": "If Animal X is active during Time Period Z1, and Plant Y grows in Region C which is characterized by Condition A, and Condition A dominates in Time Period Z1, then Animal X can access Plant Y.",
  "FOL": "ActiveDuring(Animal X, Time Period Z1) ^ GrowsIn(Plant Y, Region C) ^ CharacterizedBy(Region C, Condition A) ^ DominatesIn(Condition A, Time Period Z1) => CanAccess(Animal X, Plant Y)"
 },
 "904": {
  "NL": "If Person X has received Electronic Device Z2, and Platform Y is developed with Technology C which is compatible with Technology A, and Electronic Device Z2 uses Technology A, then Person X can access Platform Y.",
  "FOL": "Received(Person X, Electronic Device Z2) ^ DevelopedWith(Platform Y, Technology C) ^ CompatibleWith(Technology C, Technology A) ^ Uses(Electronic Device Z2, Technology A) => CanAccess(Person X, Platform Y)"
 },
 "905": {
  "NL": "If Animal X lives in Natural Place A, which is located in Region Z, and Substance Y is produced in Facility C, which is also located in Region Z, then Animal X can access Substance Y.",
  "FOL": "LiveIn(Animal X, Natural Place A) ^ LocatedIn(Natural Place A, Region Z) ^ ProducedIn(Substance Y, Facility C) ^ LocatedIn(Facility C, Region Z) => CanAccess(Animal X, Substance Y)"
 },
 "906": {
  "NL": "If Substance X can be extracted from Plant C, and Plant C grows in Natural Place A, and Natural Place A is located in Region Z1, and Region Z1 can transport to Facility Y, then Substance X can be accessed at Facility Y.",
  "FOL": "ExtractFrom(Substance X, Plant C) ^ GrowIn(Plant C, Natural Place A) ^ LocatedIn(Natural Place A, Region Z1) ^ TransportTo(Region Z1, Facility Y) => CanAccess(Substance X, Facility Y)"
 },
 "907": {
  "NL": "If Organization X is located in Region Z and Game Y is distributed by Organization A, and if Organization A is headquartered in Region C which is located in Region Z, then Organization X can access Game Y.",
  "FOL": "LocatedIn(Organization X, Region Z) ^ DistributedBy(Game Y, Organization A) ^ HeadquarteredIn(Organization A, Region C) ^ LocatedIn(Region C, Region Z) => CanAccess(Organization X, Game Y)"
 },
 "908": {
  "NL": "If Person X studies in Facility A, which is located in Region Z, and Natural Phenomenon Y occurs in Condition C, which is predominant in Region Z, then Person X can study Natural Phenomenon Y.",
  "FOL": "StudiesIn(Person X, Facility A) ^ LocatedIn(Facility A, Region Z) ^ OccurIn(Natural Phenomenon Y, Condition C) ^ PredominantIn(Condition C, Region Z) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "909": {
  "NL": "If Game Y needs Electronic Device C and Electronic Device C uses Technology A, and if Platform Z supports Technology A and Electronic Device X runs on Platform Z, then Electronic Device X can play Game Y.",
  "FOL": "Needs(Game Y, Electronic Device C) ^ Uses(Electronic Device C, Technology A) ^ Supports(Platform Z, Technology A) ^ RunOn(Electronic Device X, Platform Z) => CanPlay(Electronic Device X, Game Y)"
 },
 "910": {
  "NL": "If Organization X operates in Facility A which is located in Region Z, and Organization C has rights to Show Y and also operates in Region Z, then Organization X can access Show Y.",
  "FOL": "OperateIn(Organization X, Facility A) ^ LocatedIn(Facility A, Region Z) ^ HasRights(Organization C, Show Y) ^ OperateIn(Organization C, Region Z) => CanAccess(Organization X, Show Y)"
 },
 "911": {
  "NL": "If Person X owns Electronic Device Z, and Game Y is developed for Platform A, and Platform A requires Technology C, and Electronic Device Z is equipped with Technology C, then Person X can play Game Y.",
  "FOL": "Owns(Person X, Electronic Device Z) ^ DevelopedFor(Game Y, Platform A) ^ Require(Platform A, Technology C) ^ EquippedWith(Electronic Device Z, Technology C) => CanPlay(Person X, Game Y)"
 },
 "912": {
  "NL": "If Person X works in Organization A, which operates in Facility C located in Region Z, and the Natural Phenomenon Y is suitable for study in Region Z, then Person X can study Natural Phenomenon Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ OperateIn(Organization A, Facility C) ^ LocatedIn(Facility C, Region Z) ^ SuitableEnvironment(Natural Phenomenon Y, Region Z) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "913": {
  "NL": "If Person X is located in Region Z and Electronic Device Y is shipped to Region A, and Region A is part of Region C which in turn is part of Region Z, then Person X can access Electronic Device Y.",
  "FOL": "LocatedIn(Person X, Region Z) ^ ShippedTo(Electronic Device Y, Region A) ^ PartOf(Region A, Region C) ^ PartOf(Region C, Region Z) => CanAccess(Person X, Electronic Device Y)"
 },
 "914": {
  "NL": "If Animal Z lives in Natural Place X and feeds on Food A, and Food A is handled by Person C who is infected with Disease Y, then Disease Y can access Natural Place X.",
  "FOL": "LiveIn(Animal Z, Natural Place X) ^ FeedOn(Animal Z, Food A) ^ HandledBy(Food A, Person C) ^ InfectedWith(Person C, Disease Y) => CanAccess(Natural Place X, Disease Y)"
 },
 "915": {
  "NL": "If Organization X operates in Facility A which is situated in Region Z, and Food Y is grown in Facility C that is located in the same Region Z, then Organization X can access Food Y.",
  "FOL": "OperateIn(Organization X, Facility A) ^ SituatedIn(Facility A, Region Z) ^ GrownIn(Food Y, Facility C) ^ LocatedIn(Facility C, Region Z) => CanAccess(Organization X, Food Y)"
 },
 "916": {
  "NL": "If Organization X has a branch in Region A, and Region Z1 contains Region C, which in turn contains Region A, and Tool Y is imported to Region Z1, then Organization X can access Tool Y.",
  "FOL": "HasBranchIn(Organization X, Region A) ^ Contains(Region Z1, Region C) ^ Contains(Region C, Region A) ^ ImportedTo(Region Z1, Tool Y) => CanAccess(Organization X, Tool Y)"
 },
 "917": {
  "NL": "If Organization X is active in Event A, and Event A happens in Region C during Time Period Z2, and Natural Place Y is safe during Time Period Z2, then Organization X can access Natural Place Y.",
  "FOL": "ActiveIn(Organization X, Event A) ^ HappenIn(Event A, Region C) ^ TimeIn(Region C, Time Period Z2) ^ SafeDuring(Natural Place Y, Time Period Z2) => CanAccess(Organization X, Natural Place Y)"
 },
 "918": {
  "NL": "If Animal X is adapted to Region Z, and Natural Phenomenon Y creates Condition C, and Condition C is triggered by Event A, and Event A happens in Region Z, then Animal X can access Natural Phenomenon Y.",
  "FOL": "AdaptedTo(Animal X, Region Z) ^ Create(Natural Phenomenon Y, Condition C) ^ ConditionTrigger(Condition C, Event A) ^ HappenIn(Event A, Region Z) => CanAccess(Animal X, Natural Phenomenon Y)"
 },
 "919": {
  "NL": "If Facility X is open during Time Period Z1, and Alcohol Y is produced in Region C, and Region C has Facility A where Alcohol Y is available, and Facility A is also open during Time Period Z1, then Facility X can access Alcohol Y.",
  "FOL": "OpenDuring(Facility X, Time Period Z1) ^ ProducedIn(Alcohol Y, Region C) ^ AvailableIn(Region C, Facility A) ^ OpenDuring(Facility A, Time Period Z1) => CanAccess(Facility X, Alcohol Y)"
 },
 "920": {
  "NL": "If Technology X is required for Job C, and Job C is in Organization Z, and Organization Z operates in Facility A, and Facility A is situated in Region Y, then Technology X can be used in Region Y.",
  "FOL": "RequiredFor(Technology X, Job C) ^ JobIn(Job C, Organization Z) ^ OperateIn(Organization Z, Facility A) ^ SituatedIn(Facility A, Region Y) => CanUse(Technology X, Region Y)"
 },
 "921": {
  "NL": "If Material X is mined by Organization C, and Organization C operates in Natural Place Z, and Natural Place Z is surrounded by Natural Place A, and Natural Place A is located in Region Y, then Material X is produced in Region Y.",
  "FOL": "MinedBy(Material X, Organization C) ^ OperateIn(Organization C, Natural Place Z) ^ SurroundedBy(Natural Place Z, Natural Place A) ^ LocatedIn(Natural Place A, Region Y) => ProducedIn(Material X, Region Y)"
 },
 "922": {
  "NL": "If Plant X is grown by Person A, and Person A lives in Natural Place Z, and Natural Place Z is located in Region C, and Region C is part of Region Y, then Plant X can be found in Region Y.",
  "FOL": "GrownBy(Plant X, Person A) ^ LiveIn(Person A, Natural Place Z) ^ LocatedIn(Natural Place Z, Region C) ^ PartOf(Region C, Region Y) => FoundIn(Plant X, Region Y)"
 },
 "923": {
  "NL": "If Technology X is required for Job A, and Job A is offered by Organization C, and Organization C has merged with Organization Z, and Organization Z has moved to Region Y, then Technology X is accessible in Region Y.",
  "FOL": "RequiredFor(Technology X, Job A) ^ Offer(Job A, Organization C) ^ Merge(Organization C, Organization Z) ^ MovedTo(Organization Z, Region Y) => AccessibleIn(Technology X, Region Y)"
 },
 "924": {
  "NL": "If Food X is sold in Facility Z, and Facility Z is purchased by Organization C, and Organization C is a subsidiary of Organization A, and Organization A has decided on Region Y, then Food X is available in Region Y.",
  "FOL": "SoldIn(Food X, Facility Z) ^ PurchasedBy(Facility Z, Organization C) ^ SubsidiaryOf(Organization C, Organization A) ^ Decided(Organization A, Region Y) => AvailableIn(Food X, Region Y)"
 },
 "925": {
  "NL": "If Alcohol X contains Substance A, and Substance A violates Legislation C, and Legislation C is enforced in Region Z1, and Region Z1 is part of Region Y, then Alcohol X is restricted in Region Y.",
  "FOL": "Contains(Substance X, Substance A) ^ ViolateLegislation(Substance A, Legislation C) ^ Enforced(Legislation C, Region Z1) ^ PartOf(Region Z1, Region Y) => RestrictedIn(Alcohol X, Region Y)"
 },
 "926": {
  "NL": "If Material X is extracted by Person A, and Person A works in Facility C, and Facility C is situated in Natural Place Z, and Natural Place Z is found in Region Y, then the origin of Material X is Region Y.",
  "FOL": "ExtractedBy(Material X, Person A) ^ WorkIn(Person A, Facility C) ^ SituatedIn(Facility C, Natural Place Z) ^ FoundIn(Natural Place Z, Region Y) => OriginOfMaterial(Material X, Region Y)"
 },
 "927": {
  "NL": "If Condition X exists in Natural Place Z, and Natural Place Z is located in Region C, and Region A contains Region C, and Region A is inside Region Y, then Condition X is observed in Region Y.",
  "FOL": "Exist(Condition X, Natural Place Z) ^ LocatedIn(Natural Place Z, Region C) ^ Contains(Region A, Region C) ^ Inside(Region A, Region Y) => ObservedIn(Condition X, Region Y)"
 },
 "928": {
  "NL": "If Authorization X is granted by Facility A, and Facility A operates in Natural Place C, and Natural Place C is included in Region Z, and Region Z is a territory of Region Y, then Authorization X is legal in Region Y.",
  "FOL": "GrantedBy(Authorization X, Facility A) ^ OperateIn(Facility A, Natural Place C) ^ IncludedIn(Natural Place C, Region Z) ^ IsTerritory(Region Z, Region Y) => LegalInRegion(Authorization X, Region Y)"
 },
 "929": {
  "NL": "If Alcohol X is distilled in Facility A, and Facility A is built in Natural Place C, and Natural Place C is inside Facility Z, and Facility Z is built in Region Y, then Alcohol X is available in Region Y.",
  "FOL": "DistilledIn(Alcohol X, Facility A) ^ BuiltIn(Facility A, Natural Place C) ^ Inside(Natural Place C, Facility Z) ^ BuiltIn(Facility Z, Region Y) => AvailableIn(Alcohol X, Region Y)"
 },
 "930": {
  "NL": "If Furniture X is distributed by Organization Z, and Organization Z operates in Region A, and Region Y contains Region C, which in turn contains Region A, then Furniture X is sold in Region Y.",
  "FOL": "DistributedBy(Furniture X, Organization Z) ^ OperatesIn(Organization Z, Region A) ^ Contains(Region Y, Region C) ^ Contains(Region C, Region A) => SoldIn(Furniture X, Region Y)"
 },
 "931": {
  "NL": "If Substance X is illegal in Region Z1, and Region Y contains Region A, which is surrounded by Natural Place C that is located in Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "FOL": "Illegal(Substance X, Region Z1) ^ Contains(Region Y, Region A) ^ Surround(Region A, Natural Place C) ^ LocatedIn(Natural Place C, Region Z1) => CannotPurchase(Alcohol X, Region Y)"
 },
 "932": {
  "NL": "If Person X has participated in Event A which develops Skill Z1, and Organization Y requires a minimum of Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "FOL": "ParticipatedIn(Person X, Event A) ^ Develop(Event A, Skill Z1) ^ RequireMinimumSkill(Organization Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => NotCEO(Person X, Organization Y)"
 },
 "933": {
  "NL": "If Person X has practiced Skill Z1 and Furniture Y is made of Material A, and Skill Z2 is required to work with Material A, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Practice(Person X, Skill Z1) ^ MadeOf(Furniture Y, Material A) ^ WorkWith(Skill Z2, Material A) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "934": {
  "NL": "If Person X works at Job A which pays Money Z1 and Tool Y is bought for Money Z2, and if Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "FOL": "WorkAt(Person X, Job A) ^ Pay(Job A, Money Z1) ^ Bought(Tool Y, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Tool Y)"
 },
 "935": {
  "NL": "If Person X has worked in Job A requiring Skill Z1 and the minimum skill required for being a CEO in Organization Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "FOL": "WorkedIn(Person X, Job A) ^ RequiredIn(Skill Z1, Job A) ^ RequireMinimumSkill(Organization Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => NotCEO(Person X, Organization Y)"
 },
 "936": {
  "NL": "If Person X has Money Z1 and Tool Y is sold in Facility A with a price tag of Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "FOL": "Have(Person X, Money Z1) ^ SoldIn(Tool Y, Facility A) ^ PriceTag(Facility A, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Tool Y)"
 },
 "937": {
  "NL": "If Person X has survived Event A which demanded Strength Z1, and Job Y requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "FOL": "Survive(Person X, Event A) ^ Demand(Event A, Strength Z1) ^ Necessary(Job Y, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => CanNotPerform(Person X, Job Y)"
 },
 "938": {
  "NL": "If Person X has trained to Strength Z1 and Job Y involves Event A which requires Strength Z2, and Strength Z1 is smaller than Strength Z2, then Person X is not qualified for Job Y.",
  "FOL": "Train(Person X, Strength Z1) ^ Involves(Job Y, Event A) ^ StrengthNeeded(Event A, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => NotQualified(Person X, Job Y)"
 },
 "939": {
  "NL": "If Person X works as Job A and Job A needs Skill Z1, and if Furniture Y requires Skill Z2 which is greater than Skill Z1, then Person X cannot design Furniture Y.",
  "FOL": "WorkAs(Person X, Job A) ^ Need(Job A, Skill Z1) ^ RequireSkill(Furniture Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "940": {
  "NL": "If Facility Y requires Strength Z1 and Person X survived Event A which demanded Strength Z2, and Strength Z2 is smaller than Strength Z1, then Person X lacks the skill for Facility Y.",
  "FOL": "StrengthRequired(Facility Y, Strength Z1) ^ Survive(Person X, Event A) ^ Demand(Event A, Strength Z2) ^ SmallerThan(Strength Z2, Strength Z1) => LacksSkill(Person X, Facility Y)"
 },
 "941": {
  "NL": "If Artwork Y requires Skill Z1 and Person X has worked in Job A which requires Skill Z2, and Skill Z2 is less than Skill Z1, then Person X is not an artist for Artwork Y.",
  "FOL": "SkillRequired(Artwork Y, Skill Z1) ^ WorkedIn(Person X, Job A) ^ RequiredIn(Skill Z2, Job A) ^ LessThan(Skill Z2, Skill Z1) => NotAnArtist(Person X, Artwork Y)"
 },
 "942": {
  "NL": "If Person X earns from Job A, Job A pays Money Z1, Alcohol Y is sold for Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Alcohol Y.",
  "FOL": "Earns(Person X, Job A) ^ Pays(Job A, Money Z1) ^ Sell(Alcohol Y, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Alcohol Y)"
 },
 "943": {
  "NL": "If Person X has Money Z1 and Electronic Device Y is manufactured by Organization A, and Organization A has set the price for the device as Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Electronic Device Y.",
  "FOL": "Have(Person X, Money Z1) ^ ManufacturedBy(Electronic Device Y, Organization A) ^ PriceSetBy(Organization A, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Electronic Device Y)"
 },
 "944": {
  "NL": "If Person X is of Age Z1 and Electronic Device Y contains Material A, and Material A is safe for Age Z2, but Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "FOL": "Age(Person X, Age Z1) ^ Contains(Electronic Device Y, Material A) ^ SafeFor(Material A, Age Z2) ^ BiggerThan(Age Z2, Age Z1) => CanNotOperate(Person X, Electronic Device Y)"
 },
 "945": {
  "NL": "If Person X works at Job A which pays Money Z1 and the price of Material Y is Money Z2, and Money Z1 is smaller than Money Z2, then Material Y is not affordable for Person X.",
  "FOL": "WorkAt(Person X, Job A) ^ Pay(Job A, Money Z1) ^ Price(Material Y, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => NotAffordable(Person X, Material Y)"
 },
 "946": {
  "NL": "If Person X works as Job A and Job A needs Skill Z1, and the skill level required for Publication Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot publish Publication Y.",
  "FOL": "WorkAs(Person X, Job A) ^ Need(Job A, Skill Z1) ^ RequireSkillLevel(Publication Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotPublish(Person X, Publication Y)"
 },
 "947": {
  "NL": "If Person X has Skill Z1 and the goal of Organization Y is Skill Z2, and Skill Z1 is used in Job A but Skill Z2 is not used in Job A, then Person X cannot lead Organization Y.",
  "FOL": "Have(Person X, Skill Z1) ^ Goal(Organization Y, Skill Z2) ^ UsedIn(Skill Z1, Job A) ^ NotUsedIn(Skill Z2, Job A) => CanNotLead(Person X, Organization Y)"
 },
 "948": {
  "NL": "If Person X is of Age Z1 and Electronic Device Y is designed by Organization A, which follows an age policy of Age Z2, and Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "FOL": "Age(Person X, Age Z1) ^ DesignedBy(Electronic Device Y, Organization A) ^ Follows(Organization A, Age Z2) ^ BiggerThan(Age Z2, Age Z1) => CanNotOperate(Person X, Electronic Device Y)"
 },
 "949": {
  "NL": "If Person X has Disease Z2, and Food Y is processed in Facility A, and Facility A is contaminated with Substance B, and Substance B causes Disease Z2, then Person X cannot eat Food Y.",
  "FOL": "Have(Person X, Disease Z2) ^ ProcessedIn(Food Y, Facility A) ^ Contaminated(Facility A, Substance B) ^ Cause(Substance B, Disease Z2) => CanNotEat(Person X, Food Y)"
 },
 "950": {
  "NL": "If Person A is a parent of Person C, and Person C is a parent of Person X, and Person A is allergic to Substance Z1, and Plant Y absorbs Substance Z1, then Person X avoids food from Plant Y.",
  "FOL": "ParentOf(Person A, Person C) ^ ParentOf(Person C, Person X) ^ AllergicTo(Person A, Substance Z1) ^ Absorb(Plant Y, Substance Z1) => AvoidsFood(Person X, Plant Y)"
 },
 "951": {
  "NL": "If Material X was created in Event A, which occurred in Time Period Z1, and Show Y was filmed during Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Material X is not in Show Y.",
  "FOL": "CreatedIn(Material X, Event A) ^ OccurredIn(Event A, Time Period Z1) ^ FilmedDuring(Show Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => NotInShow(Material X, Show Y)"
 },
 "952": {
  "NL": "If Vehicle X is operated by Person A, and Person A lived in Time Period Z1, and Animal Y existed in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "FOL": "OperatedBy(Vehicle X, Person A) ^ LivedIn(Person A, Time Period Z1) ^ ExistIn(Animal Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Vehicle X, Animal Y)"
 },
 "953": {
  "NL": "If Natural Phenomenon X is triggered by Event A, and Event A occurs during Time Period Z1, and Artwork Y is made during Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Natural Phenomenon X cannot access Artwork Y.",
  "FOL": "TriggeredBy(Natural Phenomenon X, Event A) ^ OccurDuring(Event A, Time Period Z1) ^ Made(Artwork Y, Time Period Z2) ^ EarlierThan(Time Period Z1, Time Period Z2) => CanNotAccess(Natural Phenomenon X, Artwork Y)"
 },
 "954": {
  "NL": "If Person X is under the age of Z1 and Financial Product Y is regulated by Legislation A, which stipulates a minimum age of Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Financial Product Y.",
  "FOL": "UnderAge(Person X, Age Z1) ^ RegulatedBy(Financial Product Y, Legislation A) ^ Stipulates(Legislation A, Age Z2) ^ GreaterThan(Age Z2, Age Z1) => CanNotAccess(Person X, Financial Product Y)"
 },
 "955": {
  "NL": "If Person X is below the legal age Z1, and Financial Product Y is offered by Facility A which has set the legal age as Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Financial Product Y.",
  "FOL": "BelowLegalAge(Person X, Age Z1) ^ OfferedBy(Financial Product Y, Facility A) ^ SetBy(Facility A, Age Z2) ^ GreaterThan(Age Z2, Age Z1) => CanNotAccess(Person X, Financial Product Y)"
 },
 "956": {
  "NL": "If Organization X is involved in Event A, and Event A is regulated by Legislation Z2, and Drug Y contains Substance C, and Substance C is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "FOL": "InvolvedIn(Organization X, Event A) ^ RegulatedBy(Event A, Legislation Z2) ^ Contains(Drug Y, Substance C) ^ BannedIn(Substance C, Legislation Z2) => CanNotAccess(Organization X, Drug Y)"
 },
 "957": {
  "NL": "If Organization X provides services in Region C, and Region C is located in Region A, and Legislation Z is enforced in Region A, and Game Y is illegal under Legislation Z, then Organization X cannot access Game Y.",
  "FOL": "ProvidesServiceIn(Organization X, Region C) ^ LocatedIn(Region C, Region A) ^ EnforcedIn(Legislation Z, Region A) ^ Illegal(Game Y, Legislation Z) => CanNotAccess(Organization X, Game Y)"
 },
 "958": {
  "NL": "If Facility X operates with Technology Z and Platform Y was developed in Time Period A, and if Technology Z was destroyed in Time Period C which is earlier than Time Period A, then Facility X cannot access Platform Y.",
  "FOL": "Operate(Facility X, Technology Z) ^ DevelopedIn(Platform Y, Time Period A) ^ DestroyedIn(Technology Z, Time Period C) ^ EarlierThan(Time Period C, Time Period A) => CanNotAccess(Facility X, Platform Y)"
 },
 "959": {
  "NL": "If Game X requires Skill Z and Disease Y progresses to Disease C, and Disease C causes Condition A which prevents Skill Z, then Game X is not suitable for someone with Disease Y.",
  "FOL": "Requires(Game X, Skill Z) ^ ProgressesTo(Disease Y, Disease C) ^ Causes(Disease C, Condition A) ^ Prevents(Condition A, Skill Z) => NotSuitableFor(Game X, Disease Y)"
 },
 "960": {
  "NL": "If Electronic Device X is built with Material A, and Technology Z that produced Material A, and Platform Y was developed in Time Period C, but Technology Z was not invented in Time Period C, then Electronic Device X is incompatible with Platform Y.",
  "FOL": "BuiltWith(Electronic Device X, Material A) ^ ProducedBy(Technology Z, Material A) ^ DevelopedIn(Platform Y, Time Period C) ^ NotInvented(Technology Z, Time Period C) => Incompatible(Electronic Device X, Platform Y)"
 },
 "961": {
  "NL": "If Organization X requires Legislation Z2 and Drug Y is manufactured from Material C, which is composed of Substance A, and Substance A is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "FOL": "Required(Organization X, Legislation Z2) ^ ManufacturedFrom(Drug Y, Material C) ^ ComposedOf(Material C, Substance A) ^ BannedIn(Substance A, Legislation Z2) => CanNotAccess(Organization X, Drug Y)"
 },
 "962": {
  "NL": "If Material X exists in Region Z1 and Natural Phenomenon Y triggers Event C which needs Condition A, and Region Z1 lacks Condition A, then Material X is safe from Natural Phenomenon Y.",
  "FOL": "ExistIn(Material X, Region Z1) ^ Trigger(Natural Phenomenon Y, Event C) ^ Need(Event C, Condition A) ^ Lack(Region Z1, Condition A) => SafeFrom(Material X, Natural Phenomenon Y)"
 },
 "963": {
  "NL": "If Person X is employed by Organization A, and Organization A is located in Region Z1, and Platform Y violates Legislation C which is enforced in Region Z1, then Person X has a restriction on Platform Y.",
  "FOL": "EmployedBy(Person X, Organization A) ^ LocatedIn(Organization A, Region Z1) ^ Violates(Platform Y, Legislation C) ^ EnforcedIn(Legislation C, Region Z1) => HasRestriction(Person X, Platform Y)"
 },
 "964": {
  "NL": "If Job Y requires Condition Z, and Natural Phenomenon X triggers Event C, and Event C occurs during Time Period A, and Condition Z does not exist during Time Period A, then Natural Phenomenon X is not required in Job Y.",
  "FOL": "Necessary(Job Y, Condition Z) ^ TriggeredBy(Natural Phenomenon X, Event C) ^ OccurDuring(Event C, Time Period A) ^ NotExistAt(Condition Z, Time Period A) => NotRequiredInJob(Natural Phenomenon X, Job Y)"
 },
 "965": {
  "NL": "If Artwork Y is made from Material A, and Material A needs Condition Z to be preserved, and Facility X is located in Region C where Condition Z is not available, then Artwork Y is not in the collection of Facility X.",
  "FOL": "MadeFrom(Artwork Y, Material A) ^ Need(Material A, Condition Z) ^ LocatedIn(Facility X, Region C) ^ NotAvailableIn(Condition Z, Region C) => NotInCollection(Facility X, Artwork Y)"
 },
 "966": {
  "NL": "If Drug X grows in Region Z1 and Natural Place Y is located in Region A, and Skill C is spoken in Region A but not spoken in Region Z1, then Drug X is not local to Natural Place Y.",
  "FOL": "GrowsIn(Drug X, Region Z1) ^ LocatedIn(Natural Place Y, Region A) ^ SpeakIn(Skill C, Region A) ^ NotSpeakIn(Skill C, Region Z1) => NotLocal(Drug X, Natural Place Y)"
 },
 "967": {
  "NL": "If Drug X is distributed through Technology Z, and Platform Y was developed in Time Period A, and Technology Z did not exist in Time Period C, and Time Period A is earlier than Time Period C, then Drug X cannot be accessed on Platform Y.",
  "FOL": "Distribute(Drug X, Technology Z) ^ DevelopedIn(Platform Y, Time Period A) ^ NotExist(Technology Z, Time Period C) ^ EarlierThan(Time Period A, Time Period C) => CanNotAccess(Drug X, Platform Y)"
 },
 "968": {
  "NL": "If Organization X operates in Region A, and Legislation Z has been passed in Facility C, which is located in Region A, and Substance Y is prohibited by Legislation Z, then Organization X cannot access Substance Y.",
  "FOL": "OperateIn(Organization X, Region A) ^ PassedIn(Legislation Z, Facility C) ^ LocatedIn(Facility C, Region A) ^ ProhibitedBy(Substance Y, Legislation Z) => CanNotAccess(Organization X, Substance Y)"
 },
 "969": {
  "NL": "If Drug X requires Condition C, and Condition C is the same as Condition A, and Condition A is maintained by Technology Z, and Platform Y lacks Technology Z, then Drug X is not available on Platform Y.",
  "FOL": "Requires(Drug X, Condition C) ^ SameCondition(Condition C, Condition A) ^ Maintain(Condition A, Technology Z) ^ Lack(Platform Y, Technology Z) => NotAvailable(Drug X, Platform Y)"
 },
 "970": {
  "NL": "If Tool X is operated by Person A, and Person A is employed by Organization C, and Organization C operates in Condition Z2, and Condition Z2 is absent in Natural Phenomenon Y, then Tool X cannot access Natural Phenomenon Y.",
  "FOL": "OperatedBy(Tool X, Person A) ^ EmployedBy(Person A, Organization C) ^ OperateIn(Organization C, Condition Z2) ^ AbsentIn(Natural Phenomenon Y, Condition Z2) => CanNotAccess(Tool X, Natural Phenomenon Y)"
 },
 "971": {
  "NL": "If Show Y is sponsored by Organization A, and Organization A advocates for Legislation C, and Alcohol X is prohibited in Region E, and Region E is governed by Legislation C, then Alcohol X is a restricted item for Show Y.",
  "FOL": "SponsoredBy(Show Y, Organization A) ^ Advocate(Organization A, Legislation C) ^ ProhibitedIn(Alcohol X, Region E) ^ GovernedBy(Region E, Legislation C) => RestrictedItem(Alcohol X, Show Y)"
 },
 "972": {
  "NL": "If Person X lives in Region Z, and Legislation Y was passed in Facility A, which is operated by Organization C that belongs to Region Z, then Person X needs to obey Legislation Y.",
  "FOL": "LiveIn(Person X, Region Z) ^ PassedIn(Legislation Y, Facility A) ^ OperatedBy(Facility A, Organization C) ^ BelongTo(Organization C, Region Z) => NeedToObey(Person X, Legislation Y)"
 },
 "973": {
  "NL": "If Person X is susceptible to Disease Z1, and Disease Z1 causes Condition A, and Condition A aggravates Disease C, which leads to Disease Y, then Person X needs to prevent Disease Y.",
  "FOL": "BeSusceptibleTo(Person X, Disease Z1) ^ Causes(Disease Z1, Condition A) ^ Aggravates(Condition A, Disease C) ^ LeadsTo(Disease C, Disease Y) => NeedToPrevent(Person X, Disease Y)"
 },
 "974": {
  "NL": "If Person X has Job Z and Job Z requires Tool A, and Tool A is constructed with Material C which is composed of Material Y, then Person X needs to use Material Y.",
  "FOL": "Has(Person X, Job Z) ^ Require(Job Z, Tool A) ^ ConstructedWith(Tool A, Material C) ^ ComposedOf(Material C, Material Y) => NeedToUse(Person X, Material Y)"
 },
 "975": {
  "NL": "If Person X is assigned to Region Z, and Region Z is part of Region C, and Region C has Legislation A, and Legislation A mandates Authorization Y, then Person X needs to use Authorization Y.",
  "FOL": "AssignedTo(Person X, Region Z) ^ PartOf(Region Z, Region C) ^ HasLegislation(Region C, Legislation A) ^ Mandates(Legislation A, Authorization Y) => NeedToUse(Person X, Authorization Y)"
 },
 "976": {
  "NL": "If Person X works for Organization A, and Organization A operates in Facility C, and Facility C is located in Region Z, and Region Z requires Authorization Y, then Person X needs to use Authorization Y.",
  "FOL": "WorksFor(Person X, Organization A) ^ OperateIn(Organization A, Facility C) ^ LocatedIn(Facility C, Region Z) ^ Requires(Region Z, Authorization Y) => NeedToUse(Person X, Authorization Y)"
 },
 "977": {
  "NL": "If Person X needs Facility Z, and Facility Z is purchased by Organization C, and Organization C is a subsidiary of Organization A, and Organization A is granted Authorization Y, then Person X must comply with the rules of Authorization Y.",
  "FOL": "Needs(Person X, Facility Z) ^ PurchasedBy(Facility Z, Organization C) ^ SubsidiaryOf(Organization C, Organization A) ^ Granted(Organization A, Authorization Y) => MustComplyWithRules(Person X, Authorization Y)"
 },
 "978": {
  "NL": "If Person X visits Region Z1 which is governed by Facility C, and Legislation A enacted by Facility C mandates Authorization Y, then Person X needs to use Authorization Y.",
  "FOL": "Visits(Person X, Region Z1) ^ GovernedBy(Region Z1, Facility C) ^ EnactedBy(Legislation A, Facility C) ^ Mandates(Legislation A, Authorization Y) => NeedToUse(Person X, Authorization Y)"
 },
 "979": {
  "NL": "If Person X has Job Z and Job Z requires training in Skill C, and Tool A is needed for Skill C and Tool A is powered by Technology Y, then Person X needs to use Technology Y.",
  "FOL": "HasJob(Person X, Job Z) ^ TrainedIn(Job Z, Skill C) ^ NeededFor(Tool A, Skill C) ^ PoweredBy(Tool A, Technology Y) => NeedToUse(Person X, Technology Y)"
 },
 "980": {
  "NL": "If Person X has Job Z which involves Material C, and Tool A is used to manipulate Material C, and Tool A is supplied by Platform Y, then Person X needs to access Platform Y.",
  "FOL": "Has(Person X, Job Z) ^ Involves(Job Z, Material C) ^ Manipulate(Tool A, Material C) ^ SuppliedBy(Tool A, Platform Y) => NeedToAccess(Person X, Platform Y)"
 },
 "981": {
  "NL": "If Person X has Condition A, and Disease Z1 is associated with Condition A, and Disease Z1 causes Condition C, and Condition C is triggered by Disease Y, then Person X needs to prevent Disease Y.",
  "FOL": "HasCondition(Person X, Condition A) ^ AssociatedWith(Disease Z1, Condition A) ^ Causes(Disease Z1, Condition C) ^ TriggeredBy(Condition C, Disease Y) => NeedToPrevent(Person X, Disease Y)"
 },
 "982": {
  "NL": "If Person X wants to access Facility Z, and Facility Z is owned by Organization A, and Organization A is registered under Legislation C, and Legislation C is enforced by Authorization Y, then Person X needs to obtain Authorization Y.",
  "FOL": "WantsToAccess(Person X, Facility Z) ^ OwnedBy(Facility Z, Organization A) ^ RegisteredUnder(Organization A, Legislation C) ^ EnforcedBy(Legislation C, Authorization Y) => NeedToObtain(Person X, Authorization Y)"
 },
 "983": {
  "NL": "If Furniture X is made of Material Z1, and Material Z1 is made of Substance A, and Substance A is made of Material C, and Material C is not affected by Alcohol Y, then Furniture X cannot be stained by Alcohol Y.",
  "FOL": "MaterialOf(Furniture X, Material Z1) ^ MadeOf(Material Z1, Substance A) ^ MadeOf(Substance A, Material C) ^ NonAlcohol(Material C, Alcohol Y) => CanNotBeStainedBy(Furniture X, Alcohol Y)"
 },
 "984": {
  "NL": "If Furniture X is owned by Person C, and Person C lives in Region A, and Region A has Condition Z2, and Substance Y is ineffective under Condition Z2, then Furniture X cannot be painted with Substance Y.",
  "FOL": "OwnedBy(Furniture X, Person C) ^ LivesIn(Person C, Region A) ^ RegionCondition(Region A, Condition Z2) ^ SubstanceIneffective(Condition Z2, Substance Y) => CanNotBePaintedWith(Furniture X, Substance Y)"
 },
 "985": {
  "NL": "If Tool X is made from Substance A, Substance A is composed of Material Z1, Material Z1 is made of Substance C, and Substance C is non-reactive with Alcohol Y, then Tool X cannot be dissolved in Alcohol Y.",
  "FOL": "MadeFrom(Tool X, Substance A) ^ ComposedOf(Substance A, Material Z1) ^ MadeOf(Material Z1, Substance C) ^ NonReactive(Substance C, Alcohol Y) => CanNotBeDissolvedIn(Tool X, Alcohol Y)"
 },
 "986": {
  "NL": "If Electronic Device X is coated with Substance Z2, and Substance Z2 is made of Material A, and Material A is made of Substance C, and Substance C is non-reactive with Alcohol Y, then Electronic Device X cannot be damaged by Alcohol Y.",
  "FOL": "CoatedWith(Electronic Device X, Substance Z2) ^ MadeOf(Substance Z2, Material A) ^ MadeOf(Material A, Substance C) ^ NonReactive(Substance C, Alcohol Y) => CanNotBeDamagedBy(Electronic Device X, Alcohol Y)"
 },
 "987": {
  "NL": "If Natural Place X is formed from Substance C, and Substance C is composed of Substance A, and Substance A is further composed of Substance Z1, and Substance Z1 is incompatible with Substance Y, then Natural Place X cannot contain Substance Y.",
  "FOL": "FormedFrom(Natural Place X, Substance C) ^ ComposedOf(Substance C, Substance A) ^ ComposedOf(Substance A, Substance Z1) ^ Incompatible(Substance Z1, Substance Y) => CanNotContain(Natural Place X, Substance Y)"
 },
 "988": {
  "NL": "If Organization X operates in Facility A which is located in Region Z2, and Region Z2 is governed by Facility C that prohibits the production of Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "FOL": "OperateIn(Organization X, Facility A) ^ LocatedIn(Facility A, Region Z2) ^ GovernedBy(Region Z2, Facility C) ^ Prohibit(Facility C, Alcohol Y) => CanNotProduce(Organization X, Alcohol Y)"
 },
 "989": {
  "NL": "If Organization X is located in Region Z2, and Region Z2 is governed by Facility A, and Facility A is located in Region C, and there is an alcohol ban in Region C for Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "FOL": "LocatedIn(Organization X, Region Z2) ^ GovernedBy(Region Z2, Facility A) ^ LocatedIn(Facility A, Region C) ^ AlcoholBan(Region C, Alcohol Y) => CanNotProduce(Organization X, Alcohol Y)"
 },
 "990": {
  "NL": "If Natural Phenomenon X causes Condition C, and Condition C leads to Event A, and Event A leads to Condition Z1, and Condition Z1 leads to Disease Y, then Natural Phenomenon X cannot prevent Disease Y.",
  "FOL": "Causes(Natural Phenomenon X, Condition C) ^ LeadsTo(Condition C, Event A) ^ LeadsTo(Event A, Condition Z1) ^ LeadsTo(Condition Z1, Disease Y) => CanNotPrevent(Natural Phenomenon X, Disease Y)"
 },
 "991": {
  "NL": "If Vehicle X is coated with Material A, and Material A is composed of Substance C, and Substance C is extracted from Material Z1, and Material Z1 is resistant to Substance Y, then Vehicle X cannot be damaged by Substance Y.",
  "FOL": "CoatedWith(Vehicle X, Material A) ^ ComposedOf(Material A, Substance C) ^ ExtractedFrom(Substance C, Material Z1) ^ ResistantTo(Material Z1, Substance Y) => CanNotBeDamagedBy(Vehicle X, Substance Y)"
 },
 "992": {
  "NL": "If Alcohol X is distilled from Material C, and Material C is composed of Substance A, and Substance A causes Condition Z2, and Condition Z2 leads to Disease Y, then Alcohol X cannot prevent Disease Y.",
  "FOL": "DistilledFrom(Alcohol X, Material C) ^ ComposedOf(Material C, Substance A) ^ Causes(Substance A, Condition Z2) ^ LeadsTo(Condition Z2, Disease Y) => CanNotPrevent(Alcohol X, Disease Y)"
 },
 "993": {
  "NL": "If Facility Y is of type Facility Z1 and Facility Z1 is located in Region A, and Region A has Legislation C that prohibits Alcohol X, then Alcohol X cannot be consumed in Facility Y.",
  "FOL": "FacilityType(Facility Y, Facility Z1) ^ FacilityLocatedIn(Facility Z1, Region A) ^ Has(Region A, Legislation C) ^ Prohibits(Legislation C, Alcohol X) => CanNotBeConsumedIn(Alcohol X, Facility Y)"
 },
 "994": {
  "NL": "If Platform Y is constructed with Material A, and Material A is made of Material Z1, and Material Z1 is made of Substance C, and Substance C is non-reactive with Alcohol X, then Alcohol X cannot stain Platform Y.",
  "FOL": "ConstructedWith(Platform Y, Material A) ^ MadeOf(Material A, Material Z1) ^ MadeOf(Material Z1, Substance C) ^ NonReactive(Substance C, Alcohol X) => CanNotStain(Alcohol X, Platform Y)"
 },
 "995": {
  "NL": "If Furniture Y is made of Material Z2, and Material Z2 is made of Substance A, and Substance A is made of Material C, and Material C can dissolve in Alcohol X, then Alcohol X cannot be placed on Furniture Y.",
  "FOL": "MaterialOf(Furniture Y, Material Z2) ^ MadeOf(Material Z2, Substance A) ^ MadeOf(Substance A, Material C) ^ Dissolve(Material C, Alcohol X) => CanNotBePlacedOn(Alcohol X, Furniture Y)"
 },
 "996": {
  "NL": "If Facility X is in Region Z2, and Region Z2 is governed by Facility A, and Facility A is located in Region C, and there is an alcohol ban on Alcohol Y in Region C, then Alcohol Y cannot be served at Facility X.",
  "FOL": "FacilityRegion(Facility X, Region Z2) ^ GovernedBy(Region Z2, Facility A) ^ LocatedIn(Facility A, Region C) ^ AlcoholBan(Region C, Alcohol Y) => CanNotBeServedAt(Facility X, Alcohol Y)"
 },
 "997": {
  "NL": "If Person X works at Job A which pays Money Z1, and Vehicle Y is manufactured by Organization C which has set the price as Money Z2, and if Money Z1 is bigger than Money Z2, then Person X can own Vehicle Y.",
  "FOL": "WorkAt(Person X, Job A) ^ Pay(Job A, Money Z1) ^ ManufacturedBy(Vehicle Y, Organization C) ^ SetPrice(Organization C, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanOwn(Person X, Vehicle Y)"
 },
 "998": {
  "NL": "If Person X has a job C that pays Money Z1, and Game Y is on sale during Event A which offers a discount of Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "FOL": "Job(Person X, Job C) ^ Pay(Job C, Money Z1) ^ Sale(Game Y, Event A) ^ EventDiscount(Event A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Game Y)"
 },
 "999": {
  "NL": "If Person X rents Facility C which contains Space Z2, the size of Space Z2 is Size A, and the size of Food Y is Size B, and Size A is greater than Size B, then Person X can store Food Y in Facility C.",
  "FOL": "Rent(Person X, Facility C) ^ Contain(Facility C, Space Z2) ^ SizeOf(Space Z2, Size A) ^ SizeOf(Food Y, Size B) ^ GreaterThan(Size A, Size B) => CanStore(Person X, Food Y)"
 },
 "1000": {
  "NL": "If Person X has Money Z1 and Vehicle Y is assembled in Facility C, which is owned by Organization A that has set the price for the vehicle as Money Z2, and Money Z1 is bigger than Money Z2, then Person X can own Vehicle Y.",
  "FOL": "Have(Person X, Money Z1) ^ AssembledIn(Vehicle Y, Facility C) ^ OwnedBy(Facility C, Organization A) ^ SetPrice(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanOwn(Person X, Vehicle Y)"
 },
 "1001": {
  "NL": "If Person X has a job C that pays Money Z1, and Electronic Device Y is sold by Organization A which has set the price at Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Electronic Device Y.",
  "FOL": "Job(Person X, Job C) ^ Pay(Job C, Money Z1) ^ SoldBy(Electronic Device Y, Organization A) ^ PriceSet(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Electronic Device Y)"
 },
 "1002": {
  "NL": "If Person X participates in Event A which requires Tool C, and Person X can operate Tool C with Skill Z2, and if Plant Y is sensitive to Condition E which can be managed by Skill Z2, then Person X can maintain Plant Y.",
  "FOL": "ParticipateIn(Person X, Event A) ^ Require(Event A, Tool C) ^ Operate(Tool C, Skill Z2) ^ SensitiveTo(Plant Y, Condition E) ^ Manage(Skill Z2, Condition E) => CanMaintainPlant(Person X, Plant Y)"
 },
 "1003": {
  "NL": "If Person X has a job A that requires Skill E, and Tool C is needed for Skill E, and Job A requires Skill E, and Tool C is operated by Skill Z1, and Skill Z1 is required for repairing Tool Y, then Person X can maintain Tool Y.",
  "FOL": "JobRequires(Person X, Job A) ^ NeededFor(Tool C, Skill E) ^ SkillRequired(Job A, Skill E) ^ ToolOperatedBy(Tool C, Skill Z1) ^ RequiredForRepair(Skill Z1, Tool Y) => CanMaintain(Person X, Tool Y)"
 },
 "1004": {
  "NL": "If Person X has a job C that requires Tool E, and Person X has Skill Z2 to use Tool E, and Plant Y is sensitive to Condition A, and Skill Z2 can manage Condition A, then Person X can maintain Plant Y.",
  "FOL": "JobRequires(Person X, Job C) ^ JobRequires(Job C, Tool E) ^ SkillToUse(Skill Z2, Tool E) ^ SensitiveTo(Plant Y, Condition A) ^ Manage(Skill Z2, Condition A) => CanMaintainPlant(Person X, Plant Y)"
 },
 "1005": {
  "NL": "If Person X has a job A that requires Skill E, and Skill E is based on Technology C, and Technology C requires Skill Z1, and Skill Z1 is required for reading Publication Y, then Person X can discuss Publication Y.",
  "FOL": "JobRequires(Person X, Job A) ^ Requires(Job A, Skill E) ^ BasedOn(Skill E, Technology C) ^ TechnologyRequiresSkill(Technology C, Skill Z1) ^ RequiredForReading(Skill Z1, Publication Y) => CanDiscuss(Person X, Publication Y)"
 },
 "1006": {
  "NL": "If Person X has a job A that requires Skill E, and Skill E is based on Technology C, and Technology C requires Skill Z2, and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "FOL": "JobRequires(Person X, Job A) ^ Requires(Job A, Skill E) ^ BasedOn(Skill E, Technology C) ^ TechnologyRequiresSkill(Technology C, Skill Z2) ^ NeededFor(Skill Z2, Plant Y) => CanMaintainPlant(Person X, Plant Y)"
 },
 "1007": {
  "NL": "If Person X works in Job C, Skill Z2 is used in Tool E, Tool E is utilized in Job C, Plant Y is sensitive to Condition A, and Skill Z2 can manage Condition A, then Person X can maintain Plant Y.",
  "FOL": "WorkIn(Person X, Job C) ^ UsedIn(Skill Z2, Tool E) ^ UtilizedIn(Tool E, Job C) ^ SensitiveTo(Plant Y, Condition A) ^ Manage(Skill Z2, Condition A) => CanMaintainPlant(Person X, Plant Y)"
 },
 "1008": {
  "NL": "If Person X has a job A that requires Tool E, and Tool E is made of Material C, and handling Material C requires Skill Z1, and Skill Z1 is developed for Platform Y, then Person X has skills for Platform Y.",
  "FOL": "JobRequires(Person X, Job A) ^ Requires(Job A, Tool E) ^ MadeOf(Tool E, Material C) ^ MaterialHandling(Material C, Skill Z1) ^ DevelopedFor(Skill Z1, Platform Y) => HasSkills(Person X, Platform Y)"
 },
 "1009": {
  "NL": "If Person X has a job A that requires Tool E, and Tool E is made of Material C, and handling Material C requires Skill Z, and Skill Z is required for making Food Y, then Person X can cook Food Y.",
  "FOL": "JobRequires(Person X, Job A) ^ Requires(Job A, Tool E) ^ MadeOf(Tool E, Material C) ^ MaterialHandling(Material C, Skill Z) ^ RequiredFor(Skill Z, Food Y) => CanCook(Person X, Food Y)"
 },
 "1010": {
  "NL": "If Facility X is managed by Person A, and Person A is alive in Time Period Z1, and Financial Product Y is promoted by Event C, and Event C happens in Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Facility X can utilize Financial Product Y.",
  "FOL": "ManagedBy(Facility X, Person A) ^ AliveIn(Person A, Time Period Z1) ^ PromotedBy(Financial Product Y, Event C) ^ HappenIn(Event C, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanUtilize(Facility X, Financial Product Y)"
 },
 "1011": {
  "NL": "If Organization X conducts an Event A that happens in Time Period Z1, and Alcohol Y is produced in Facility C which operates in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Alcohol Y.",
  "FOL": "ConductActivity(Organization X, Event A) ^ HappenIn(Event A, Time Period Z1) ^ ProducedIn(Alcohol Y, Facility C) ^ OperatedIn(Facility C, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Organization X, Alcohol Y)"
 },
 "1012": {
  "NL": "If Organization X organizes Event C, which includes SubEvent A, and SubEvent A happens in Time Period Z1, and Material Y is extracted in Time Period Z2 which is earlier than Time Period Z1, then Organization X can access Material Y.",
  "FOL": "Organize(Organization X, Event C) ^ SubEvent(Event C, Event A) ^ HappenIn(Event A, Time Period Z1) ^ ExtractedIn(Material Y, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Organization X, Material Y)"
 },
 "1013": {
  "NL": "If Animal X can survive in Condition A, and Region Z is governed by Facility C, and Facility C implements Legislation D, and Legislation D results in Condition A, and Natural Phenomenon Y occurs in Region Z, then Animal X can access Natural Phenomenon Y.",
  "FOL": "SurviveIn(Animal X, Condition A) ^ GovernedBy(Region Z, Facility C) ^ Implement(Facility C, Legislation D) ^ ResultIn(Legislation D, Condition A) ^ OccurIn(Natural Phenomenon Y, Region Z) => CanAccess(Animal X, Natural Phenomenon Y)"
 },
 "1014": {
  "NL": "If Organization X exists during Time Period Z1, and Financial Product Y is managed by Person C, who works in Facility A that operates during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "FOL": "ExistDuring(Organization X, Time Period Z1) ^ ManagedBy(Financial Product Y, Person C) ^ WorksIn(Person C, Facility A) ^ OperateDuring(Facility A, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanAccess(Organization X, Financial Product Y)"
 },
 "1015": {
  "NL": "If Organization X has an activity in Event A, which happens in Time Period Z1, and Material Y was created in Event C, which occurred in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can use Material Y.",
  "FOL": "HaveActivityIn(Organization X, Event A) ^ HappenIn(Event A, Time Period Z1) ^ CreatedIn(Material Y, Event C) ^ OccurredIn(Event C, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanUse(Organization X, Material Y)"
 },
 "1016": {
  "NL": "If Organization X is active in Event A, and Event A occurs during Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C operates during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "FOL": "ActiveIn(Organization X, Event A) ^ OccurDuring(Event A, Time Period Z1) ^ PromotedBy(Financial Product Y, Organization C) ^ OperateDuring(Organization C, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanAccess(Organization X, Financial Product Y)"
 },
 "1017": {
  "NL": "If Facility X is managed by Person A, and Person A is alive during Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C operates during Time Period Z2, and Time Period Z1 starts before the end of Time Period Z2, then Facility X can access Financial Product Y.",
  "FOL": "ManagedBy(Facility X, Person A) ^ AliveIn(Person A, Time Period Z1) ^ PromotedBy(Financial Product Y, Organization C) ^ OperateDuring(Organization C, Time Period Z2) ^ StartBeforeEnd(Time Period Z1, Time Period Z2) => CanAccess(Facility X, Financial Product Y)"
 },
 "1018": {
  "NL": "If Person X works in Organization A, which operates in Facility C situated in Region Z, and Event Y is held in Facility E that is located in the same Region Z, then Person X can access Event Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ OperateIn(Organization A, Facility C) ^ SituatedIn(Facility C, Region Z) ^ HeldIn(Event Y, Facility E) ^ LocatedIn(Facility E, Region Z) => CanAccess(Person X, Event Y)"
 },
 "1019": {
  "NL": "If Organization X provides services in Natural Place A, and Natural Place A is surrounded by Substance C, and Substance C is located in Region Z, and Legislation Y applies to Event E, and Event E is common in Region Z, then Organization X must comply with Legislation Y.",
  "FOL": "ProvideServiceIn(Organization X, Natural Place A) ^ SurroundedBy(Natural Place A, Substance C) ^ LocatedIn(Substance C, Region Z) ^ ApplyTo(Legislation Y, Event E) ^ CommonIn(Event E, Region Z) => MustComply(Organization X, Legislation Y)"
 },
 "1020": {
  "NL": "If Organization X provides service in Region E, and Region E is located in Region C, and Region C contains Region A, and Region A is located in Region Z1, and Electronic Device Y is imported to Region Z1, then Organization X can access Electronic Device Y.",
  "FOL": "ProvidesServiceIn(Organization X, Region E) ^ LocatedIn(Region E, Region C) ^ Contains(Region C, Region A) ^ LocatedIn(Region A, Region Z1) ^ ImportedTo(Electronic Device Y, Region Z1) => CanAccess(Organization X, Electronic Device Y)"
 },
 "1021": {
  "NL": "If Organization X is active in Event A, and Event A is caused by Natural Phenomenon E, and Natural Phenomenon E occurs in Region C during Time Period Z2, and Natural Place Y is not restricted during Time Period Z2, then Organization X can access Natural Place Y.",
  "FOL": "ActiveIn(Organization X, Event A) ^ CausedBy(Event A, Natural Phenomenon E) ^ OccurIn(Natural Phenomenon E, Region C) ^ TimeIn(Region C, Time Period Z2) ^ NotRestrictedDuring(Natural Place Y, Time Period Z2) => CanAccess(Organization X, Natural Place Y)"
 },
 "1022": {
  "NL": "If Person X works in Organization A, which is located in Region Z, and Electronic Device Y has been shipped to Region C, which is part of Region E, and Region E is part of Region Z, then Person X can access Electronic Device Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ LocatedIn(Organization A, Region Z) ^ ShippedTo(Electronic Device Y, Region C) ^ PartOf(Region C, Region E) ^ PartOf(Region E, Region Z) => CanAccess(Person X, Electronic Device Y)"
 },
 "1023": {
  "NL": "If Organization X operates in Region Z1, and Tool Y is distributed by Organization A, and Organization A provides service in Natural Place C, and Natural Place C is surrounded by Substance E, and Substance E is located in Region Z1, then Organization X can access Tool Y.",
  "FOL": "OperatesIn(Organization X, Region Z1) ^ DistributedBy(Tool Y, Organization A) ^ ProvideServiceIn(Organization A, Natural Place C) ^ SurroundedBy(Natural Place C, Substance E) ^ LocatedIn(Substance E, Region Z1) => CanAccess(Organization X, Tool Y)"
 },
 "1024": {
  "NL": "If Person X lives in Region Z1 and Material Y is grown in Natural Place C, and Natural Place C is surrounded by Natural Place E, and Natural Place E is located in Natural Place A, and Natural Place A is located in Region Z1, then Person X can access Material Y.",
  "FOL": "LiveIn(Person X, Region Z1) ^ GrownIn(Material Y, Natural Place C) ^ SurroundedBy(Natural Place C, Natural Place E) ^ LocatedIn(Natural Place E, Natural Place A) ^ LocatedIn(Natural Place A, Region Z1) => CanAccess(Person X, Material Y)"
 },
 "1025": {
  "NL": "If Technology X is required for Job C, which is performed by Organization A, and Organization A operates in Facility E, which is located in Region Z, and Plant Y is adapted to Region Z, then Technology X can access Plant Y.",
  "FOL": "RequiredFor(Technology X, Job C) ^ PerformedBy(Job C, Organization A) ^ OperateIn(Organization A, Facility E) ^ LocatedIn(Facility E, Region Z) ^ AdaptedTo(Plant Y, Region Z) => CanAccess(Technology X, Plant Y)"
 },
 "1026": {
  "NL": "If Person X has moved to Region Z1, and Publication Y is distributed by Organization A, which is headquartered in Region C, and Region C is part of Region E, which in turn is part of Region Z1, then Person X can access Publication Y.",
  "FOL": "MovedTo(Person X, Region Z1) ^ DistributedBy(Publication Y, Organization A) ^ HeadquarteredIn(Organization A, Region C) ^ PartOf(Region C, Region E) ^ PartOf(Region E, Region Z1) => CanAccess(Person X, Publication Y)"
 },
 "1027": {
  "NL": "If Organization X operates in Region Z1 and Tool Y is distributed by Organization A, and Organization A is headquartered in Region C which is part of Region E, and Region E is part of Region Z1, then Organization X can access Tool Y.",
  "FOL": "OperatesIn(Organization X, Region Z1) ^ DistributedBy(Tool Y, Organization A) ^ HeadquarteredIn(Organization A, Region C) ^ PartOf(Region C, Region E) ^ PartOf(Region E, Region Z1) => CanAccess(Organization X, Tool Y)"
 },
 "1028": {
  "NL": "If Organization X operates in Facility E which is located in Region A, and Region Z1 contains Region C which in turn contains Region A, and Tool Y is imported to Region Z1, then Organization X can access Tool Y.",
  "FOL": "OperatesIn(Organization X, Facility E) ^ LocatedIn(Facility E, Region A) ^ Contains(Region Z1, Region C) ^ Contains(Region C, Region A) ^ ImportedTo(Region Z1, Tool Y) => CanAccess(Organization X, Tool Y)"
 },
 "1029": {
  "NL": "If Electronic Device X is compatible with Platform Z, and Financial Product Y is listed on Platform A, and Platform A is a subsidiary of Platform C, and Platform C is a subsidiary of Organization E, and Organization E is owned by Platform Z, then Electronic Device X can access Financial Product Y.",
  "FOL": "CompatibleWith(Electronic Device X, Platform Z) ^ ListedOn(Financial Product Y, Platform A) ^ SubsidiaryOf(Platform A, Platform C) ^ SubsidiaryOf(Platform C, Organization E) ^ OwnedBy(Organization E, Platform Z) => CanAccess(Electronic Device X, Financial Product Y)"
 },
 "1030": {
  "NL": "If Animal X can survive in Condition A, and Condition A exists in Region Z, and Natural Phenomenon Y causes Event C, and Event C is caused by Natural Phenomenon E, and Natural Phenomenon E occurs in Region Z, then Animal X can access Natural Phenomenon Y.",
  "FOL": "SurviveIn(Animal X, Condition A) ^ ConditionIn(Region Z, Condition A) ^ CauseIn(Natural Phenomenon Y, Event C) ^ CausedBy(Event C, Natural Phenomenon E) ^ OccurIn(Natural Phenomenon E, Region Z) => CanAccess(Animal X, Natural Phenomenon Y)"
 },
 "1031": {
  "NL": "If Organization X is established in Region Z1, and Tool Y is produced in Facility C, which is built in Natural Place E, and Natural Place E is inside Facility A, which is located in Region Z1, then Organization X can access Tool Y.",
  "FOL": "EstablishedIn(Organization X, Region Z1) ^ ProducedIn(Tool Y, Facility C) ^ BuiltIn(Facility C, Natural Place E) ^ Inside(Natural Place E, Facility A) ^ LocatedIn(Facility A, Region Z1) => CanAccess(Organization X, Tool Y)"
 },
 "1032": {
  "NL": "If Animal X can survive in Condition A, and Condition A is found in Region Z, and Natural Place Y is surrounded by Substance C, and Substance C is found in Natural Place E, and Natural Place E is located in Region Z, then Animal X can access Natural Place Y.",
  "FOL": "SurviveIn(Animal X, Condition A) ^ ConditionIn(Region Z, Condition A) ^ SurroundedBy(Natural Place Y, Substance C) ^ FoundIn(Substance C, Natural Place E) ^ LocatedIn(Natural Place E, Region Z) => CanAccess(Animal X, Natural Place Y)"
 },
 "1033": {
  "NL": "If Person X works in Organization A, which is located in Region Z, and Natural Phenomenon Y causes Event C, which is caused by Natural Phenomenon E that occurs in Region Z, then Person X can study Natural Phenomenon Y.",
  "FOL": "WorksIn(Person X, Organization A) ^ LocatedIn(Organization A, Region Z) ^ Cause(Natural Phenomenon Y, Event C) ^ CausedBy(Event C, Natural Phenomenon E) ^ OccurIn(Natural Phenomenon E, Region Z) => CanStudy(Person X, Natural Phenomenon Y)"
 },
 "1034": {
  "NL": "If Material X is safe for Condition Z2, and Job Y requires Skill E, and Skill E uses Tool C, and Skill A operates Tool C, and Condition Z2 needs Skill A, then Material X can be used for Job Y.",
  "FOL": "SafeFor(Material X, Condition Z2) ^ RequiredIn(Job Y, Skill E) ^ Use(Skill E, Tool C) ^ Operate(Skill A, Tool C) ^ SkillNeed(Condition Z2, Skill A) => CanUse(Material X, Job Y)"
 },
 "1035": {
  "NL": "If Material X is extracted from Natural Place A, and Natural Place A is surrounded by Substance C, and Substance C is found in Natural Place E, and Natural Place E is located in Region Z, and Region Z has adopted Legislation Y, then Material X is governed by Legislation Y.",
  "FOL": "ExtractedFrom(Material X, Natural Place A) ^ SurroundedBy(Natural Place A, Substance C) ^ FoundIn(Substance C, Natural Place E) ^ LocatedIn(Natural Place E, Region Z) ^ AdoptedFrom(Region Z, Legislation Y) => GovernedBy(Material X, Legislation Y)"
 },
 "1036": {
  "NL": "If Animal X can survive in Condition A, and Region Z has Natural Phenomenon C which causes Condition A, and Natural Phenomenon Y causes Event E which happens in Region Z, then Animal X can access Natural Phenomenon Y.",
  "FOL": "SurviveIn(Animal X, Condition A) ^ HaveIn(Region Z, Natural Phenomenon C) ^ Cause(Natural Phenomenon C, Condition A) ^ CauseIn(Natural Phenomenon Y, Event E) ^ HappenIn(Event E, Region Z) => CanAccess(Animal X, Natural Phenomenon Y)"
 },
 "1037": {
  "NL": "If Alcohol X contains Substance A, and Substance A violates Legislation C, and Legislation C has been passed in Facility E, and Region Z1 governs Facility E, and Region Y is a subregion of Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "FOL": "Contains(Substance X, Substance A) ^ ViolateLegislation(Substance A, Legislation C) ^ PassedIn(Legislation C, Facility E) ^ Govern(Region Z1, Facility E) ^ Subregion(Region Z1, Region Y) => CannotPurchase(Alcohol X, Region Y)"
 },
 "1038": {
  "NL": "If Material X is extracted by Person A, and Person A works in Facility C, and Facility C is situated in Natural Place Z, and Natural Place Z is surrounded by Natural Place E, and Natural Place E is located in Region Y, then the origin of Material X is Region Y.",
  "FOL": "ExtractedBy(Material X, Person A) ^ WorkIn(Person A, Facility C) ^ SituatedIn(Facility C, Natural Place Z) ^ SurroundedBy(Natural Place Z, Natural Place E) ^ LocatedIn(Natural Place E, Region Y) => OriginOfMaterial(Material X, Region Y)"
 },
 "1039": {
  "NL": "If Authorization X is granted by Facility A, and Facility A is built in Region E, and Region E is located in Natural Place C, and Natural Place C is included in Region Z, and Region Z is a territory of Region Y, then Authorization X is legal in Region Y.",
  "FOL": "GrantedBy(Authorization X, Facility A) ^ BuiltIn(Facility A, Region E) ^ LocatedIn(Region E, Natural Place C) ^ IncludedIn(Natural Place C, Region Z) ^ IsTerritory(Region Z, Region Y) => LegalInRegion(Authorization X, Region Y)"
 },
 "1040": {
  "NL": "If Alcohol X contains Substance A, and Substance A violates Legislation C, and Legislation C applies to Event E, and Event E is conducted in Region Z1, and Region Z1 is part of Region Y, then Alcohol X is restricted in Region Y.",
  "FOL": "Contains(Substance X, Substance A) ^ ViolateLegislation(Substance A, Legislation C) ^ ApplyTo(Legislation C, Event E) ^ ConductIn(Event E, Region Z1) ^ PartOf(Region Z1, Region Y) => RestrictedIn(Alcohol X, Region Y)"
 },
 "1041": {
  "NL": "If Alcohol X is made of Material C, and Material C is composed of Substance A, and Substance A violates Legislation E, and Legislation E is enforced in Region Z1, and Region Y is a subregion of Region Z1, then Alcohol X cannot be consumed in Region Y.",
  "FOL": "MadeOf(Substance X, Material C) ^ ComposedOf(Material C, Substance A) ^ ViolateLegislation(Substance A, Legislation E) ^ Enforced(Legislation E, Region Z1) ^ Subregion(Region Z1, Region Y) => CannotConsume(Alcohol X, Region Y)"
 },
 "1042": {
  "NL": "If Condition X exists in Natural Place Z, and Natural Place Z is located in Region C, and Region A contains Region C, and Region A is surrounded by Region E, and Region E is a part of Region Y, then Condition X is observed in Region Y.",
  "FOL": "Exist(Condition X, Natural Place Z) ^ LocatedIn(Natural Place Z, Region C) ^ Contains(Region A, Region C) ^ SurroundedBy(Region A, Region E) ^ PartOf(Region E, Region Y) => ObservedIn(Condition X, Region Y)"
 },
 "1043": {
  "NL": "If Furniture X is distributed by Organization Z, and Organization Z operates in Region A, and Region Y is surrounded by Natural Place E, and Natural Place E is located in Region C, and Region C contains Region A, then Furniture X is sold in Region Y.",
  "FOL": "DistributedBy(Furniture X, Organization Z) ^ OperatesIn(Organization Z, Region A) ^ Surround(Region Y, Natural Place E) ^ LocatedIn(Natural Place E, Region C) ^ Contains(Region C, Region A) => SoldIn(Furniture X, Region Y)"
 },
 "1044": {
  "NL": "If Alcohol X contains Substance A, and Substance A is banned in Region Z1, and Region Y contains Region C, which is surrounded by Natural Place E that is located in Region Z1, then Alcohol X cannot be consumed in Region Y.",
  "FOL": "Contains(Substance X, Substance A) ^ BannedIn(Substance A, Region Z1) ^ Contains(Region Y, Region C) ^ Surround(Region C, Natural Place E) ^ LocatedIn(Natural Place E, Region Z1) => CannotConsume(Alcohol X, Region Y)"
 },
 "1045": {
  "NL": "If Substance A is dissolved in Substance C, and Substance C is equal to Alcohol X, and Substance A violates Legislation E, and Legislation E is enforced in Region Z1, and Region Y is a subregion of Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "FOL": "DissolvedIn(Substance A, Substance C) ^ Equal(Substance C, Substance X) ^ ViolateLegislation(Substance A, Legislation E) ^ Enforced(Legislation E, Region Z1) ^ Subregion(Region Z1, Region Y) => CannotPurchase(Alcohol X, Region Y)"
 },
 "1046": {
  "NL": "If Financial Product X is provided by Facility Z, and Facility Z is built in Region E, and Region E is located in Natural Place C, which is included in Region A, and Region A is part of Region Y, then Financial Product X is available in Region Y.",
  "FOL": "ProvidedBy(Facility Z, Financial Product X) ^ BuiltIn(Facility Z, Region E) ^ LocatedIn(Region E, Natural Place C) ^ IncludedIn(Natural Place C, Region A) ^ PartOf(Region A, Region Y) => AvailableIn(Financial Product X, Region Y)"
 },
 "1047": {
  "NL": "If Technology X is required for Job C, and Job C is in Organization Z, and Organization Z operates in Facility A, and Facility A operates in Natural Place E, and Natural Place E is included in Region Y, then Technology X can be used in Region Y.",
  "FOL": "RequiredFor(Technology X, Job C) ^ JobIn(Job C, Organization Z) ^ OperateIn(Organization Z, Facility A) ^ OperateIn(Facility A, Natural Place E) ^ IncludedIn(Natural Place E, Region Y) => CanUse(Technology X, Region Y)"
 },
 "1048": {
  "NL": "If Artwork Y is made of Material A and Skill Z1 is needed to work with Material A, and Person X has worked Job C which requires Skill Z2, and Skill Z2 is less than Skill Z1, then Person X is not an artist of Artwork Y.",
  "FOL": "MadeOf(Artwork Y, Material A) ^ SkillNeeded(Skill Z1, Material A) ^ Worked(Person X, Job C) ^ Required(Skill Z2, Job C) ^ LessThan(Skill Z2, Skill Z1) => NotAnArtist(Person X, Artwork Y)"
 },
 "1049": {
  "NL": "If Person X works in Job A which requires Skill Z1, and the goal of Organization Y is Skill Z2, and while Skill Z1 is used in Job C, Skill Z2 is not used in Job C, then Person X cannot lead Organization Y.",
  "FOL": "WorkIn(Person X, Job A) ^ Require(Job A, Skill Z1) ^ Goal(Organization Y, Skill Z2) ^ UsedIn(Skill Z1, Job C) ^ NotUsedIn(Skill Z2, Job C) => CanNotLead(Person X, Organization Y)"
 },
 "1050": {
  "NL": "If Person X has Job C and Job C needs Skill Z1, and Furniture Y is made of Material A which requires Skill Z2 to work with, and Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Job(Person X, Job C) ^ Need(Job C, Skill Z1) ^ MadeOf(Furniture Y, Material A) ^ WorkWith(Skill Z2, Material A) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "1051": {
  "NL": "If Person X has survived Event C which demanded Strength Z1, and Job Y involves Event A which needs Strength Z2, and Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "FOL": "Survive(Person X, Event C) ^ Demand(Event C, Strength Z1) ^ Involves(Job Y, Event A) ^ StrengthNeeded(Event A, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => CanNotPerform(Person X, Job Y)"
 },
 "1052": {
  "NL": "If Person X has Job A that uses Tool C, and operating Tool C requires Skill Z1, and the minimum skill required by Organization Y is Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "FOL": "Job(Person X, Job A) ^ Use(Job A, Tool C) ^ Operate(Tool C, Skill Z1) ^ RequireMinimumSkill(Organization Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => NotCEO(Person X, Organization Y)"
 },
 "1053": {
  "NL": "If Person X inherits from Person A, and Person A has earned from Job C, and Job C pays Money Z1, and Alcohol Y is sold for Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Alcohol Y.",
  "FOL": "Inherits(Person X, Person A) ^ Earned(Person A, Job C) ^ Paid(Job C, Money Z1) ^ Sell(Alcohol Y, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Alcohol Y)"
 },
 "1054": {
  "NL": "If Person X has trained for Strength Z1 and Job Y involves Event A which requires Skill C, and Skill C needs Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X is not qualified for Job Y.",
  "FOL": "Train(Person X, Strength Z1) ^ Involves(Job Y, Event A) ^ Require(Event A, Skill C) ^ Need(Skill C, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => NotQualified(Person X, Job Y)"
 },
 "1055": {
  "NL": "If Person X has Job A and Job A requires Skill Z1, and Furniture Y is assembled with Tool C which is operated by Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Job(Person X, Job A) ^ Require(Job A, Skill Z1) ^ Assemble(Furniture Y, Tool C) ^ Operate(Skill Z2, Tool C) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "1056": {
  "NL": "If Person X is born with Strength Z1 and Job Y involves Event A which requires Skill C, and Skill C requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X lacks the skills for Job Y.",
  "FOL": "BornWith(Person X, Strength Z1) ^ Involve(Job Y, Event A) ^ Require(Event A, Skill C) ^ Require(Skill C, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => LacksSkills(Person X, Job Y)"
 },
 "1057": {
  "NL": "If Person X works at Job A which pays Money Z1, and Tool Y is sold at Facility C with a price tag of Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "FOL": "WorkAt(Person X, Job A) ^ Pay(Job A, Money Z1) ^ SoldIn(Tool Y, Facility C) ^ PriceTag(Facility C, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Tool Y)"
 },
 "1058": {
  "NL": "If Person X has Skill Z1 and Organization Y has a goal related to Skill Z2, and Skill Z1 is needed for Job C which is involved in Event A, but Skill Z2 is not involved in Event A, then Person X cannot lead Organization Y.",
  "FOL": "Have(Person X, Skill Z1) ^ Goal(Organization Y, Skill Z2) ^ NeededFor(Skill Z1, Job C) ^ JobIn(Event A, Job C) ^ NotInvolve(Skill Z2, Event A) => CanNotLead(Person X, Organization Y)"
 },
 "1059": {
  "NL": "If Person X is of Age Z1 and Electronic Device Y is made of Material C, which is composed of Material A, and Material A is safe for Age Z2, but Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "FOL": "Age(Person X, Age Z1) ^ MadeOf(Electronic Device Y, Material C) ^ ComposedOf(Material C, Material A) ^ SafeFor(Material A, Age Z2) ^ BiggerThan(Age Z2, Age Z1) => CanNotOperate(Person X, Electronic Device Y)"
 },
 "1060": {
  "NL": "If Person X has Job A that uses Tool C, and to operate Tool C requires Skill Z1, and designing Furniture Y requires Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Job(Person X, Job A) ^ Use(Job A, Tool C) ^ Operate(Tool C, Skill Z1) ^ RequireSkill(Furniture Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "1061": {
  "NL": "If Person X has Money Z1 and Electronic Device Y is assembled in Facility C, which is owned by Organization A that sets the price for the device at Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Electronic Device Y.",
  "FOL": "Have(Person X, Money Z1) ^ AssembledIn(Electronic Device Y, Facility C) ^ OwnedBy(Facility C, Organization A) ^ PriceSetBy(Organization A, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Electronic Device Y)"
 },
 "1062": {
  "NL": "If Person X has Condition Z and Job Y requires Tool A, and Person X is allergic to Material B, and Tool A is constructed from Material C which contains Material B, then Person X cannot access Job Y.",
  "FOL": "Have(Person X, Condition Z) ^ Need(Job Y, Tool A) ^ Allergic(Person Z, Material B) ^ ConstructedFrom(Tool A, Material C) ^ Contains(Material C, Material B) => CanNotAccess(Person X, Job Y)"
 },
 "1063": {
  "NL": "If Vehicle X is operated by Person A, and Person A works in Organization C, and Organization C operates in Time Period Z1, and Animal Y exists in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "FOL": "OperatedBy(Vehicle X, Person A) ^ WorkIn(Person A, Organization C) ^ OperateIn(Organization C, Time Period Z1) ^ ExistIn(Animal Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Vehicle X, Animal Y)"
 },
 "1064": {
  "NL": "If Person X lives in Time Period Z1 and Skill Y was first used in Event A, which was witnessed by Person C who lived in Time Period Z2, and Time Period Z2 is later than Time Period Z1, then Person X cannot access Skill Y.",
  "FOL": "LiveIn(Person X, Time Period Z1) ^ FirstUsed(Skill Y, Event A) ^ WitnessedBy(Event A, Person C) ^ LivedIn(Person C, Time Period Z2) ^ LaterThan(Time Period Z2, Time Period Z1) => CanNotAccess(Person X, Skill Y)"
 },
 "1065": {
  "NL": "If Technology X is made from Material A, and Material A is made from Material C, and Material C requires Condition B, and Condition Z is equal to Condition B, and Material Y has expired under Condition Z, then Technology X cannot access Material Y.",
  "FOL": "MadeFrom(Technology X, Material A) ^ MadeFrom(Material A, Material C) ^ Require(Material C, Condition B) ^ Equal(Condition Z, Condition B) ^ Expired(Material Y, Condition Z) => CanNotAccess(Technology X, Material Y)"
 },
 "1066": {
  "NL": "If Organization X has a branch in Region C, and Region C is located in Region A, and Legislation Z2 is enforced in Region A, and Drug Y contains Substance E, and Substance E is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "FOL": "HaveBranchIn(Organization X, Region C) ^ LocatedIn(Region C, Region A) ^ EnforcedIn(Legislation Z2, Region A) ^ Contains(Drug Y, Substance E) ^ BannedIn(Substance E, Legislation Z2) => CanNotAccess(Organization X, Drug Y)"
 },
 "1067": {
  "NL": "If Game Y is designed for Platform Z and Electronic Device X is manufactured by Organization A, and Organization A uses Technology C, and Platform Z uses Skill E, but Technology C does not understand Skill E, then Electronic Device X cannot access Game Y.",
  "FOL": "DesignedFor(Game Y, Platform Z) ^ ManufacturedBy(Electronic Device X, Organization A) ^ Use(Organization A, Technology C) ^ Use(Platform Z, Skill E) ^ NotUnderstand(Technology C, Skill E) => CanNotAccess(Electronic Device X, Game Y)"
 },
 "1068": {
  "NL": "If Material X is planted in Natural Place E, and Natural Place E is the same as Natural Place C, and Natural Place C is located in Facility A, and Facility A is located in Region Z1, and Disease Y is absent in Region Z1, then Disease Y cannot access Material X.",
  "FOL": "PlantIn(Material X, Natural Place E) ^ SamePlace(Natural Place E, Natural Place C) ^ LocatedIn(Natural Place C, Facility A) ^ LocatedIn(Facility A, Region Z1) ^ AbsentIn(Disease Y, Region Z1) => CanNotAccess(Material X, Disease Y)"
 },
 "1069": {
  "NL": "If Drug X is stored in Condition A and Condition A is maintained by Technology Z, and if Technology Z was invented in Time Period E, and Platform Y was developed in Time Period C which is earlier than Time Period E, then Drug X is not available on Platform Y.",
  "FOL": "StoredIn(Drug X, Condition A) ^ Maintain(Condition A, Technology Z) ^ DevelopedIn(Platform Y, Time Period C) ^ InventedIn(Technology Z, Time Period E) ^ EarlierThan(Time Period C, Time Period E) => NotAvailable(Drug X, Platform Y)"
 },
 "1070": {
  "NL": "If Organization X operates in Facility E, which is located in Region C, and Region C is located within Region A, and there is Legislation Z2 enforced in Region A that prohibits Drug Y, then Organization X cannot access Drug Y.",
  "FOL": "OperateIn(Organization X, Facility E) ^ LocatedIn(Facility E, Region C) ^ LocatedIn(Region C, Region A) ^ EnforcedIn(Legislation Z2, Region A) ^ Prohibits(Legislation Z2, Drug Y) => CanNotAccess(Organization X, Drug Y)"
 },
 "1071": {
  "NL": "If Organization X provides services in Region C, and Region C is located in Region A, and Legislation Z has been passed in Facility E, and Facility E is located in Region A, and Substance Y is prohibited by Legislation Z, then Organization X cannot access Substance Y.",
  "FOL": "ProvideServiceIn(Organization X, Region C) ^ LocatedIn(Region C, Region A) ^ PassedIn(Legislation Z, Facility E) ^ LocatedIn(Facility E, Region A) ^ ProhibitedBy(Substance Y, Legislation Z) => CanNotAccess(Organization X, Substance Y)"
 },
 "1072": {
  "NL": "If Game Y requires Platform Z, and Electronic Device X is designed by Person C, who is employed by Organization A that follows Legislation E, and Legislation E prohibits Platform Z, then Electronic Device X is incompatible with Game Y.",
  "FOL": "Requires(Game Y, Platform Z) ^ DesignedBy(Electronic Device X, Person C) ^ EmployedBy(Person C, Organization A) ^ Follow(Organization A, Legislation E) ^ Prohibit(Legislation E, Platform Z) => Incompatible(Electronic Device X, Game Y)"
 },
 "1073": {
  "NL": "If Person X has inherited Condition Z, and Drug Y is manufactured from Material C, which is derived from Material E, and Material E is composed of Substance A, and Substance A triggers Condition Z, then Drug Y is contraindicated for Person X.",
  "FOL": "Inherit(Person X, Condition Z) ^ ManufacturedFrom(Drug Y, Material C) ^ DerivedFrom(Material C, Material E) ^ ComposedOf(Material E, Substance A) ^ Trigger(Substance A, Condition Z) => Contraindicated(Person X, Drug Y)"
 },
 "1074": {
  "NL": "If Tool X is made of Material A, and Material A needs Condition Z1, and Food Y is produced in Facility E, and Facility E is located in Region C, and Condition Z1 is absent in Region C, then Tool X is not used for serving Food Y.",
  "FOL": "MadeOf(Tool X, Material A) ^ Needs(Material A, Condition Z1) ^ ProducedIn(Food Y, Facility E) ^ LocatedIn(Facility E, Region C) ^ AbsentIn(Region C, Condition Z1) => NotUsedForServing(Tool X, Food Y)"
 },
 "1075": {
  "NL": "If Tool X is constructed from Material C, and Material C contains Material A, and Material A needs Condition Z1 to be used, and Food Y is stored in Region E, and Condition Z1 is absent in Region E, then Tool X is not used for serving Food Y.",
  "FOL": "ConstructedFrom(Tool X, Material C) ^ Contains(Material C, Material A) ^ Needs(Material A, Condition Z1) ^ StoredIn(Food Y, Region E) ^ AbsentIn(Region E, Condition Z1) => NotUsedForServing(Tool X, Food Y)"
 },
 "1076": {
  "NL": "If Organization X is involved in Event A which is regulated by Legislation Z2, and Drug Y is made from Material E which is composed of Substance C, and Substance C is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "FOL": "InvolvedIn(Organization X, Event A) ^ RegulatedBy(Event A, Legislation Z2) ^ MadeFrom(Drug Y, Material E) ^ ComposedOf(Material E, Substance C) ^ BannedIn(Substance C, Legislation Z2) => CanNotAccess(Organization X, Drug Y)"
 },
 "1077": {
  "NL": "If Tool X is constructed from Material C, which contains Material A, and Material A has Condition Z1, and if Food Y is stored in Region E where Condition Z1 is absent, then Tool X is not used for the preparation of Food Y.",
  "FOL": "ConstructedFrom(Tool X, Material C) ^ Contains(Material C, Material A) ^ MaterialCondition(Material A, Condition Z1) ^ StoredIn(Food Y, Region E) ^ AbsentIn(Region E, Condition Z1) => NotUsedForPreparation(Tool X, Food Y)"
 },
 "1078": {
  "NL": "If Drug X requires Technology Z, and Platform Y was developed in Time Period A, and Technology Z was created in Event E, and Event E occurred in Time Period C, and Time Period A is earlier than Time Period C, then Drug X is not available on Platform Y.",
  "FOL": "Require(Drug X, Technology Z) ^ DevelopedIn(Platform Y, Time Period A) ^ CreatedIn(Technology Z, Event E) ^ OccurredIn(Event E, Time Period C) ^ EarlierThan(Time Period A, Time Period C) => NotAvailable(Drug X, Platform Y)"
 },
 "1079": {
  "NL": "If Game Y is designed for Platform Z, and Electronic Device X is assembled in Facility C, which is built by Organization E that has merged with Organization A, and Organization A does not support Platform Z, then Electronic Device X is incompatible with Game Y.",
  "FOL": "DesignedFor(Game Y, Platform Z) ^ AssembledIn(Electronic Device X, Facility C) ^ BuiltBy(Facility C, Organization E) ^ MergedWith(Organization E, Organization A) ^ NotSupport(Organization A, Platform Z) => Incompatible(Electronic Device X, Game Y)"
 },
 "1080": {
  "NL": "If Person X earns Money Z1 and Event Y is planned by Person C, who is employed by Organization E, which is a sub-organization of Organization A, and Organization A has set a fee of Money Z2, and Money Z1 is bigger than Money Z2, then Person X can sponsor Event Y.",
  "FOL": "Earn(Person X, Money Z1) ^ PlannedBy(Event Y, Person C) ^ EmployedBy(Person C, Organization E) ^ SubOrganization(Organization E, Organization A) ^ SetFee(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanSponsor(Person X, Event Y)"
 },
 "1081": {
  "NL": "If Person X has won Money Z1, and Vehicle Y is assembled in Facility C, which is purchased by Organization E, and Organization E is a subsidiary of Organization A, and Organization A has set the price of the vehicle as Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Vehicle Y.",
  "FOL": "Win(Person X, Money Z1) ^ AssembledIn(Vehicle Y, Facility C) ^ PurchasedBy(Facility C, Organization E) ^ SubsidiaryOf(Organization E, Organization A) ^ SetPrice(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Vehicle Y)"
 },
 "1082": {
  "NL": "If Person X works at Job E which pays Money Z1, and Vehicle Y is assembled in Facility C which is owned by Organization A that has set the price for the vehicle at Money Z2, and if Money Z1 is bigger than Money Z2, then Person X can buy Vehicle Y.",
  "FOL": "WorkAt(Person X, Job E) ^ Pay(Job E, Money Z1) ^ AssembledIn(Vehicle Y, Facility C) ^ OwnedBy(Facility C, Organization A) ^ SetPrice(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanBuy(Person X, Vehicle Y)"
 },
 "1083": {
  "NL": "If Person X works at Job A which pays Money Z1, and Event Y is planned by Person E who works for Organization C that has set a fee of Money Z2, and Money Z1 is bigger than Money Z2, then Person X can sponsor Event Y.",
  "FOL": "WorkAt(Person X, Job A) ^ Pay(Job A, Money Z1) ^ PlannedBy(Event Y, Person E) ^ WorksFor(Person E, Organization C) ^ SetFee(Organization C, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanSponsor(Person X, Event Y)"
 },
 "1084": {
  "NL": "If Person X has a job E that pays Money Z1, and Vehicle Y is assembled in Facility C which is owned by Organization A that has set the price of the vehicle as Money Z2, and the money Person X earns from their job is more than the price of the vehicle, then Person X can own Vehicle Y.",
  "FOL": "Job(Person X, Job E) ^ Pay(Job E, Money Z1) ^ AssembledIn(Vehicle Y, Facility C) ^ OwnedBy(Facility C, Organization A) ^ SetPrice(Organization A, Money Z2) ^ BiggerThan(Money Z1, Money Z2) => CanOwn(Person X, Vehicle Y)"
 },
 "1085": {
  "NL": "If Organization X is active in Event A which occurs in Time Period Z1, and Material Y is manufactured by Organization C which is active in Event E that occurred in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can use Material Y.",
  "FOL": "ActiveIn(Organization X, Event A) ^ OccurIn(Event A, Time Period Z1) ^ ManufacturedBy(Material Y, Organization C) ^ ActiveIn(Organization C, Event E) ^ OccurredIn(Event E, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanUse(Organization X, Material Y)"
 },
 "1086": {
  "NL": "If Organization X is active in Event A, which occurs during Time Period Z1, and Financial Product Y is managed by Person E who works in Facility C that operates during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "FOL": "ActiveIn(Organization X, Event A) ^ OccurDuring(Event A, Time Period Z1) ^ ManagedBy(Financial Product Y, Person E) ^ WorksIn(Person E, Facility C) ^ OperateDuring(Facility C, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanAccess(Organization X, Financial Product Y)"
 },
 "1087": {
  "NL": "If Animal X can survive in Condition A, and Region Z is governed by Facility C which implements Legislation D that results in Condition A, and Disease Y spreads in Animal E which is common in Region Z, then Animal X can access Disease Y.",
  "FOL": "SurviveIn(Animal X, Condition A) ^ GovernedBy(Region Z, Facility C) ^ Implement(Facility C, Legislation D) ^ ResultIn(Legislation D, Condition A) ^ SpreadIn(Disease Y, Animal E) ^ CommonIn(Animal E, Region Z) => CanAccess(Animal X, Disease Y)"
 },
 "1088": {
  "NL": "If Organization X operates during Time Period Z1 and Financial Product Y is promoted by Organization A, and Organization A is active in Event C which happens in Region E, and the time in Region E is Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "FOL": "OperateDuring(Organization X, Time Period Z1) ^ PromotedBy(Financial Product Y, Organization A) ^ ActiveIn(Organization A, Event C) ^ HappenIn(Event C, Region E) ^ TimeIn(Region E, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanAccess(Organization X, Financial Product Y)"
 },
 "1089": {
  "NL": "If Facility X is managed by Person A, and Person A is alive in Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C has an event E, and Event E happens during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Facility X can utilize Financial Product Y.",
  "FOL": "ManagedBy(Facility X, Person A) ^ AliveIn(Person A, Time Period Z1) ^ PromotedBy(Financial Product Y, Organization C) ^ HaveEvent(Organization C, Event E) ^ HappenDuring(Event E, Time Period Z2) ^ Overlap(Time Period Z1, Time Period Z2) => CanUtilize(Facility X, Financial Product Y)"
 },
 "1090": {
  "NL": "If Facility X is available during Time Period Z1 and Material Y is manufactured in Plant E, and Plant E is part of Facility C which is operated by Organization A during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Facility X can access Material Y.",
  "FOL": "Available(Facility X, Time Period Z1) ^ ManufacturedIn(Material Y, Plant E) ^ PartOf(Plant E, Facility C) ^ OperatedBy(Facility C, Organization A) ^ OperatedIn(Organization A, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanAccess(Facility X, Material Y)"
 },
 "1091": {
  "NL": "If Facility X is owned by Organization A, and Organization A is active in Time Period Z1, and Material Y is created in Facility E, and Facility E is operated by Organization C, and Organization C is operating in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Facility X can use Material Y.",
  "FOL": "OwnedBy(Facility X, Organization A) ^ ActiveIn(Organization A, Time Period Z1) ^ CreatedIn(Material Y, Facility E) ^ OperatedBy(Facility E, Organization C) ^ OperatedIn(Organization C, Time Period Z2) ^ EarlierThan(Time Period Z2, Time Period Z1) => CanUse(Facility X, Material Y)"
 },
 "1092": {
  "NL": "If Facility X is owned by Organization A, and Organization A is active during Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C is active during Event E, and Event E occurs during Time Period Z2, and Time Period Z1 starts before the end of Time Period Z2, then Facility X can access Financial Product Y.",
  "FOL": "OwnedBy(Facility X, Organization A) ^ ActiveIn(Organization A, Time Period Z1) ^ PromotedBy(Financial Product Y, Organization C) ^ ActiveIn(Organization C, Event E) ^ OccurDuring(Event E, Time Period Z2) ^ StartBeforeEnd(Time Period Z1, Time Period Z2) => CanAccess(Facility X, Financial Product Y)"
 },
 "1093": {
  "NL": "If Person X works at Job E which pays Money Z1, and Electronic Device Y is assembled in Facility C which is owned by Organization A that sets the price as Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Electronic Device Y.",
  "FOL": "WorkAt(Person X, Job E) ^ Pay(Job E, Money Z1) ^ AssembledIn(Electronic Device Y, Facility C) ^ OwnedBy(Facility C, Organization A) ^ PriceSetBy(Organization A, Money Z2) ^ SmallerThan(Money Z1, Money Z2) => CanNotBuy(Person X, Electronic Device Y)"
 },
 "1094": {
  "NL": "If Person X works in Job A which requires Skill Z1, and Organization Y has a goal related to Skill Z2, and Skill Z1 is used in Game E which is part of Event C, but Skill Z2 is not involved in Event C, then Person X cannot lead Organization Y.",
  "FOL": "WorkIn(Person X, Job A) ^ Require(Job A, Skill Z1) ^ Goal(Organization Y, Skill Z2) ^ UsedIn(Skill Z1, Game E) ^ GameIn(Event C, Game E) ^ NotInvolve(Skill Z2, Event C) => CanNotLead(Person X, Organization Y)"
 },
 "1095": {
  "NL": "If Person X has Job E and Job E requires Skill Z1, and Furniture Y is constructed from Material C which is derived from Material A, and Skill Z2 is needed to work with Material A, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Job(Person X, Job E) ^ Require(Job E, Skill Z1) ^ ConstructedFrom(Furniture Y, Material C) ^ DerivedFrom(Material C, Material A) ^ WorkWith(Skill Z2, Material A) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "1096": {
  "NL": "If Person X has Job C which uses Tool E, and to operate Tool E requires Skill Z1, and to assemble Furniture Y requires Tool A which is operated by Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Job(Person X, Job C) ^ Use(Job C, Tool E) ^ Operate(Tool E, Skill Z1) ^ Assemble(Furniture Y, Tool A) ^ Operate(Skill Z2, Tool A) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "1097": {
  "NL": "If Person X works in Job C which uses Tool E, and to operate Tool E requires Skill Z1, and the goal of Organization Y is Skill Z2, and Skill Z1 is used in Job A but Skill Z2 is not used in Job A, then Person X cannot lead Organization Y.",
  "FOL": "WorkIn(Person X, Job C) ^ Use(Job C, Tool E) ^ Operate(Tool E, Skill Z1) ^ Goal(Organization Y, Skill Z2) ^ UsedIn(Skill Z1, Job A) ^ NotUsedIn(Skill Z2, Job A) => CanNotLead(Person X, Organization Y)"
 },
 "1098": {
  "NL": "If Artwork Y is made of Material E and Skill Z1 is needed to work with Material E, and Person X works in Job A which uses Tool C, and Tool C operates with Skill Z2, and Skill Z2 is less than Skill Z1, then Person X is not an artist of Artwork Y.",
  "FOL": "MadeOf(Artwork Y, Material E) ^ SkillNeeded(Skill Z1, Material E) ^ WorkIn(Person X, Job A) ^ Use(Job A, Tool C) ^ Operate(Tool C, Skill Z2) ^ LessThan(Skill Z2, Skill Z1) => NotAnArtist(Person X, Artwork Y)"
 },
 "1099": {
  "NL": "If Artwork Y requires Skill Z1 and Person X works in Job A, is trained in Skill E for Job A, and operates Tool C which is needed for Skill E but the level of Skill Z2 for operating Tool C is less than Skill Z1, then Person X is not an artist for Artwork Y.",
  "FOL": "SkillRequired(Artwork Y, Skill Z1) ^ WorkIn(Person X, Job A) ^ TrainedIn(Job A, Skill E) ^ NeededFor(Tool C, Skill E) ^ Operate(Tool C, Skill Z2) ^ LessThan(Skill Z2, Skill Z1) => NotAnArtist(Person X, Artwork Y)"
 },
 "1100": {
  "NL": "If Person X has Job A and Job A is trained in Skill E, and Tool C is needed for Skill E and Tool C operates with Skill Z1, and if Furniture Y requires Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "FOL": "Job(Person X, Job A) ^ TrainedIn(Job A, Skill E) ^ NeededFor(Tool C, Skill E) ^ Operate(Tool C, Skill Z1) ^ RequireSkill(Furniture Y, Skill Z2) ^ SmallerThan(Skill Z1, Skill Z2) => CanNotDesign(Person X, Furniture Y)"
 },
 "1101": {
  "NL": "If Person X has survived Event C which demanded Strength Z1, and Job Y involves Event A which requires Skill E, and Skill E requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "FOL": "Survive(Person X, Event C) ^ Demand(Event C, Strength Z1) ^ Involve(Job Y, Event A) ^ Require(Event A, Skill E) ^ Require(Skill E, Strength Z2) ^ SmallerThan(Strength Z1, Strength Z2) => CanNotPerform(Person X, Job Y)"
 },
 "1102": {
  "NL": "If Vehicle X is operated by Person A, and Person A works in Organization C, and Organization C has an activity in Event E, and Event E happens in Time Period Z1, and Animal Y exists in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "FOL": "OperatedBy(Vehicle X, Person A) ^ WorkIn(Person A, Organization C) ^ HaveActivityIn(Organization C, Event E) ^ HappenIn(Event E, Time Period Z1) ^ ExistIn(Animal Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Vehicle X, Animal Y)"
 },
 "1103": {
  "NL": "If Substance X is created in Event A, and Event A is witnessed by Person C who works in Organization E, and Organization E operates in Time Period Z1, and Plant Y blooms in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Substance X cannot access Plant Y.",
  "FOL": "CreatedIn(Substance X, Event A) ^ WitnessedBy(Event A, Person C) ^ WorkIn(Person C, Organization E) ^ OperateIn(Organization E, Time Period Z1) ^ BloomsIn(Plant Y, Time Period Z2) ^ LaterThan(Time Period Z1, Time Period Z2) => CanNotAccess(Substance X, Plant Y)"
 }
}