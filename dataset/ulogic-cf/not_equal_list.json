[
 {
  "s_rule": "CanComplement(Food X, Food Y):- PairWell(Food X, Food Y);",
  "v_rule": "If Food X touched Food Y, then Food X can contaminate Food Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDamage(Furniture X, Food Y):- Fall(Furniture X, Food Y);",
  "v_rule": "If the recipe for Food X includes Substance Y, then Food X can be made of Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeMadeOf(Food X, Material Y):- Contains(Food X, Material Y);",
  "v_rule": "If Material Y is safe for Food X, then Food X can be packaged in Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeContaminatedBy(Food X, Material Y):- StoredWith(Food X, Material Y);",
  "v_rule": "If Food X is safe on Material Y, then Food X can be served on Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeEatenAt(Food X, Event Y):- SuitableFor(Food X, Event Y);",
  "v_rule": "If Food X is available for Event Y, then Food X can be cooked for Event Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanGrowIn(Food X, Natural Place Y):- NativeTo(Food X, Natural Place Y);",
  "v_rule": "If Food X grows in Natural Place Y, then Food X can be found in Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeInspiredBy(Food X, Natural Place Y):- GrownIn(Food X, Natural Place Y);",
  "v_rule": "If Organization Y sells Food X, then Food X can be served by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeInspiredBy(Furniture X, Artwork Y):- Reflects(Furniture X, Artwork Y);",
  "v_rule": "If Artwork X is placed on Furniture Y, then Furniture Y can hold Artwork X.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeRestoredWith(Furniture X, Alcohol Y):- DamagedBy(Furniture X, Alcohol Y);",
  "v_rule": "If Furniture X is antique under Legislation Y, then Furniture X can be protected by Legislation Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeStoredIn(Furniture X, Facility Y):- FitsIn(Furniture X, Facility Y);",
  "v_rule": "If Furniture X fits on Platform Y, then Furniture X can be placed on Platform Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeArrangedWith(Furniture X, Furniture Y):- FitInSameRoom(Furniture X, Furniture Y);",
  "v_rule": "If Furniture X and Furniture Y have the same color, then Furniture X can match Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeAuctionedOn(Furniture X, Show Y):- IsValuable(Furniture X, Show Y);",
  "v_rule": "If Furniture X is required in Event Y, then Furniture X can be used in Event Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBePlacedIn(Furniture X, Natural Place Y):- ResistantTo(Furniture X, Natural Place Y);",
  "v_rule": "If Furniture X is not protected from Natural Place Y, then Furniture X can be damaged by Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeDamagedBy(Furniture X, Natural Place Y):- ExposedTo(Furniture X, Natural Place Y);",
  "v_rule": "If Furniture X is designed for Natural Place Y, then Furniture X can blend with Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBlendWith(Furniture X, Natural Place Y):- DesignedFor(Furniture X, Natural Place Y);",
  "v_rule": "If Furniture X is designed based on Natural Place Y, then Furniture X can be inspired by Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAggravate(Substance X, Disease Y):- IsAllergen(Substance X, Disease Y);",
  "v_rule": "If Substance X alleviates Disease Y, then Substance X can be used for treatment of Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeFormedBy(Substance X, Natural Phenomenon Y):- ResultOf(Substance X, Natural Phenomenon Y);",
  "v_rule": "If Substance X is exposed to Natural Phenomenon Y, then Substance X can be destroyed by Natural Phenomenon Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeMixedWith(Substance X, Alcohol Y):- IsSoluble(Substance X, Alcohol Y);",
  "v_rule": "If Substance X is illegal under Legislation Y, then Substance X can be regulated by Legislation Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDilute(Substance X, Drug Y):- NonReactive(Substance X, Drug Y);",
  "v_rule": "If Substance X is permeable to Drug Y, then Substance X can absorb Drug Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanContaminate(Substance X, Facility Y):- IsToxic(Substance X, Facility Y);",
  "v_rule": "If Substance X is safe for Facility Y, then Substance X can be stored in Facility Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAbsorb(Substance X, Plant Y):- Need(Substance X, Plant Y);",
  "v_rule": "If Substance X is a fertilizer for Plant Y, then Substance X can promote the growth of Plant Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanContaminate(Substance X, Food Y):- IsToxic(Substance X, Food Y);",
  "v_rule": "If Substance X is a spice for Food Y, then Substance X can enhance the flavor of Food Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStain(Substance X, Furniture Y):- IsColored(Substance X, Furniture Y);",
  "v_rule": "If Substance X is effective on Furniture Y, then Substance X can clean Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanClean(Substance X, Furniture Y):- IsSafe(Substance X, Furniture Y);",
  "v_rule": "If Substance X is corrosive to Furniture Y, then Substance X can damage Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDamage(Substance X, Furniture Y):- Corrosive(Substance X, Furniture Y);",
  "v_rule": "If Substance X makes Furniture Y waterproof, then Substance X can protect Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeThemeOf(Game X, Alcohol Y):- IsFeaturedIn(Game X, Alcohol Y);",
  "v_rule": "If Alcohol Y is featured in Game X, then Alcohol Y can be a theme of Game X.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAbsorb(Substance X, Material Y):- IsSoluble(Substance X, Material Y);",
  "v_rule": "If Substance X is an acid for Material Y, then Substance X can react with Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCause(Substance X, Event Y):- IsToxic(Substance X, Event Y);",
  "v_rule": "If Event Y produces Substance X, then Substance X can be a result of Event Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanIngest(Animal X, Substance Y):- Drink(Animal X, Substance Y);",
  "v_rule": "If Animal Y is allergic to Substance X, then Substance X can be harmful to Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAttract(Animal X, Substance Y):- Smell(Animal X, Substance Y);",
  "v_rule": "If Substance X is safe for Animal Y, then Substance X can be applied on Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanErode(Substance X, Natural Place Y):- IsAcidic(Substance X, Natural Place Y);",
  "v_rule": "If Substance X is beneficial to Natural Place Y, then Substance X can enhance Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEnhance(Substance X, Natural Place Y):- IsNourishing(Substance X, Natural Place Y);",
  "v_rule": "If Substance X causes erosion to Natural Place Y, then Substance X can destroy Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDestroy(Substance X, Natural Place Y):- IsPollutant(Substance X, Natural Place Y);",
  "v_rule": "If Organization Y purchased Substance X, then Substance X can be owned by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanResearch(Tool X, Disease Y):- AdaptedFor(Tool X, Disease Y);",
  "v_rule": "If Tool X is allowed in Game Y, then Tool X can be used in Game Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanModify(Tool X, Vehicle Y):- DesignedFor(Tool X, Vehicle Y);",
  "v_rule": "If Tool X fits in Vehicle Y, then Tool X can be stored in Vehicle Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Tool X, Facility Y):- DesignedFor(Tool X, Facility Y);",
  "v_rule": "If Tool X is sharp for Facility Y, then Tool X can damage Facility Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanModify(Tool X, Platform Y):- DesignedFor(Tool X, Platform Y);",
  "v_rule": "If Platform Y has space for Tool X, then Tool X can be stored on Platform Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanShape(Tool X, Substance Y):- IsHeat(Tool X, Substance Y);",
  "v_rule": "If Tool X is a mixer for Substance Y, then Tool X can mix Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanScare(Tool X, Animal Y):- LooksDangerous(Tool X, Animal Y);",
  "v_rule": "If Tool X is heavy for Animal Y, then Tool X can hurt Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanClean(Tool X, Electronic Device Y):- DesignedFor(Tool X, Electronic Device Y);",
  "v_rule": "If Tool X is designed for Technology Y, then Tool X can be used with Technology Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanProtect(Material X, Vehicle Y):- IsResistant(Material X, Vehicle Y);",
  "v_rule": "If Material X can corrode Vehicle Y, then Material X can damage Vehicle Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Material X, Vehicle Y):- IsSuitable(Material X, Vehicle Y);",
  "v_rule": "If Material X is porous to Alcohol Y, then Material X can absorb Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCover(Material X, Platform Y):- IsWaterproof(Material X, Platform Y);",
  "v_rule": "If Publication Y is made of Material X, then Material X can be used in Publication Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanReactWith(Material X, Substance Y):- IsBase(Material X, Substance Y);",
  "v_rule": "If Material X is formed from Substance Y, then Material X can be made of Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanResist(Material X, Substance Y):- IsCoated(Material X, Substance Y);",
  "v_rule": "If Material X is a component of Tool Y, then Material X can be used to make Tool Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanHarm(Animal X, Material Y):- Eat(Animal X, Material Y);",
  "v_rule": "If Material X is food for Animal Y, then Material X can be used for Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeMadeFrom(Material X, Technology Y):- RequiredBy(Material X, Technology Y);",
  "v_rule": "If Material X can overheat Technology Y, then Material X can damage Technology Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanErode(Material X, Natural Place Y):- IsAbrasive(Material X, Natural Place Y);",
  "v_rule": "If Material X is mined from Natural Place Y, then Material X can be extracted from Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeInspiredBy(Show X, Artwork Y):- Discusses(Show X, Artwork Y);",
  "v_rule": "If Artwork X was purchased for Show Y, then Artwork X can feature in Show Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IneligibleForPosition(Person X, Job Y):- Develop(Person X, Condition Z), Prohibit(Job Y, Condition Z);",
  "v_rule": "If Person X has developed Condition Z and Condition Z is prohibited for Job Y, then Person X is ineligible for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotGrownIn(Plant X, Natural Place Y):- Needs(Plant X, Condition Z2), Lacks(Natural Place Y, Condition Z2);",
  "v_rule": "If Plant X needs Condition Z2 to grow and Natural Place Y lacks Condition Z2, then Plant X cannot grow in Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotDisplayed(Facility X, Artwork Y):- Require(Artwork Y, Condition Z), Lack(Facility X, Condition Z);",
  "v_rule": "If Artwork Y requires Condition Z and Facility X lacks Condition Z, then Facility X will not display Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AppliesFor(Person X, Authorization Y):- Hired(Person X, Job Z), Governed(Job Z, Authorization Y);",
  "v_rule": "If Person X is hired for Job Z and Job Z is governed by Authorization Y, then Person X can apply for Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComplyWithRules(Person X, Authorization Y):- Needs(Person X, Facility Z), Governed(Facility Z, Authorization Y);",
  "v_rule": "If Person X needs Facility Z and Facility Z is governed by Authorization Y, then Person X must comply with Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaw(Person X, Legislation Y):- Naturalized(Person X, Region Z), EnforcedIn(Legislation Y, Region Z);",
  "v_rule": "If Person X is naturalized in Region Z and Legislation Y is enforced in Region Z, then Person X is subject to Legislation Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RegionHasResource(Region Y, Material X):- Mined(Material X, Natural Place Z), SurroundedBy(Natural Place Z, Natural Place A), LocatedIn(Natural Place A, Region Y);",
  "v_rule": "If Material X is mined from Natural Place Z, and Natural Place Z is surrounded by Natural Place A, and Natural Place A is located in Region Y, then Region Y has Material X.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaw(Person X, Legislation Y):- LiveIn(Person X, Region Z), PassedIn(Legislation Y, Facility A), Govern(Region Z, Facility A);",
  "v_rule": "If Person X lives in Region Z and Legislation Y was passed in Facility A, and Facility A governs Region Z, then Person X is subject to Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaw(Person X, Legislation Y):- MoveTo(Person X, Region Z), PassedIn(Legislation Y, Facility A), Govern(Region Z, Facility A);",
  "v_rule": "If Person X moves to Region Z and Legislation Y has been passed in Facility A, and Region Z is governed by Facility A, then Person X is subject to Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 }
]